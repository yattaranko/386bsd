VMSPACE(9)                 Kernel Developer‚Äôs Manual                VMSPACE(9)

[1mNAME[0m
       vmspace ‚Äî virtual memory program interface functions

[1mSYNOPSIS[0m
       [1m#include "vm.h"[0m
       [1m#include "vmspace.h"[0m

       [4mstruct[24m [4mvmspace[24m [4m*[0m
       [1mvmspace_fork[22m([4mstruct[24m [4mvmspace[24m [4m*[24m, [4mstruct[24m [4mproc[24m [4m*[24m);

       [4mvoid[0m
       [1mvmspace_free[22m([4mstruct[24m [4mvmspace[24m [4m*[24m);

       [4mint[0m
       [1mvmspace_allocate[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mvm_offset_t[24m [4m*addr[24m, [4mvm_size_t[24m [4msize[24m,
           [4mint[24m [4mfindspace[24m);

       [4mvoid[0m
       [1mvmspace_delete[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mcaddr_t[24m [4mva[24m, [4munsigned[24m [4msz[24m);

       [4mint[0m
       [1mvmspace_mmap[22m([4mstruct[24m  [4mvmspace[24m  [4m*vs[24m,  [4mvm_offset_t[24m  [4m*addr[24m, [4mvm_size_t[24m [4msize[24m,
           [4mvm_prot_t[24m [4mprot[24m, [4mint[24m [4mflags[24m, [4mcaddr_t[24m [4mhandle[24m, [4mvm_offset_t[24m [4mfoff[24m);

       [4mint[0m
       [1mvmspace_protect[22m([4mstruct[24m  [4mvmspace[24m   [4m*vs[24m,   [4mcaddr_t[24m   [4mva[24m,   [4munsigned[24m   [4msz[24m,
           [4mint[24m [4mset_max[24m, [4mvm_prot_t[24m [4mnew_prot[24m);

       [4mint[0m
       [1mvmspace_access[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mcaddr_t[24m [4mva[24m, [4munsigned[24m [4msz[24m, [4mint[24m [4mprot[24m);

       [4mvoid[0m
       [1mvmspace_pageable[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mcaddr_t[24m [4mva[24m, [4munsigned[24m [4msz[24m);

       [4mvoid[0m
       [1mvmspace_notpageable[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mcaddr_t[24m [4mva[24m, [4munsigned[24m [4msz[24m);

       [4mint[0m
       [1mvmspace_activate[22m([4mstruct[24m [4mvmspace[24m [4m*vs[24m, [4mcaddr_t[24m [4mva[24m, [4munsigned[24m [4msz[24m);

       [4mint[0m
       [1mvmspace_inherit[22m([4mstruct[24m   [4mvmspace[24m   [4m*vs[24m,   [4mcaddr_t[24m   [4mva[24m,   [4munsigned[24m  [4msz[24m,
           [4mvm_inherit_t[24m [4mnew_inheritance[24m);

[1mDESCRIPTION[0m
       Access to the facilities of the virtual memory system is made available
       via the "vmspace" program interface, which provides the methods to cre‚Äê
       ate new address spaces and allocate contents within them. In  addition,
       the  attributes  and contents of the allocated address space can be ad‚Äê
       justed as needed by the kernel to suite its needs. These functions  can
       be applied to both kernel and user program address spaces, however, the
       kernel program has its own special interfaces as well (see [4mkmem[24m(9) ).

       Each program has a small structure (struct vmspace) that is used to de‚Äê
       scribe the characteristics of a particular address space. Modifications
       to  an address space may be done from other process or thread contexts,
       however they currently may not be done from interrupt level as they may
       block for memory allocation or contention (a special exception is  made
       for kernel memory allocation ‚Äê‚Äê see [4mkmem[24m(9) ).

       The  [1mvmspace_fork[22m()  function  creates  a  user address space for a new
       process by replicating an existing processes user  address  space.  The
       [1mvmspace_free[22m() function reclaims a user address space and any resources
       consumed  by  it.  The [1mvmspace_allocate[22m() function reserves a region of
       address space of a requested [4msize[24m.  This region can either begin  at  a
       specific  desired location, or the caller can request that a search for
       an adjacent, allocatable region be performed in order to locate a  free
       portion  of  address space. The [1mvmspace_delete[22m() function deallocates a
       region of an address space, along with any  resources  consumed  within
       it.  The  [1mvmspace_mmap[22m() function provides an interface similar the the
       [4mmmap[24m(2) system call to associate a region of address space with  a  de‚Äê
       vice  driver or file, and adjust the attributes of the region of memory
       to suite the needs of a mapped object.

       The [1mvmspace_protect[22m() function adjusts the current and  maximum  memory
       protection  of  a region of an address space, to alter the level of ac‚Äê
       cess allowed by programs. Similarly, the function [1mvmspace_access[22m()  can
       be  used to check if a operation associated with a given memory protec‚Äê
       tion level can be performed over  a  specified  region  of  an  address
       space.

       The  [1mvmspace_notpageable[22m() function forces a region of an address space
       to be entirely resident and allocated (however, not actively mapped  ‚Äê‚Äê
       just insured to be resident).  The [1mvmspace_pageable[22m() function releases
       this  restriction, allowing the memory to become reclaimable again. The
       [1mvmspace_active[22m() function forces a region of address  space  to  become
       addressable  without  fault  at its maximum protection level (this will
       cause any copy‚Äêon‚Äêwrite portions of the region to have distinct  copies
       as  a  side‚Äêeffect), and can be used in concert with the resident state
       functions.

       The [1mvmspace_inherit[22m() function can be used to  assign  the  inheritance
       attribute  of  regions of address space to determine the disposition of
       any contents upon the next address space  replication  operation  (con‚Äê
       tents  stays  with  original, contents passes to the copy, contents are
       copied).

[1mRETURN VALUES[0m
       The [1mvmspace_fork[22m() function returns the address of the vmspace instance
       associated   with   the   new   user   address    space    copy.    The
       [1mvmspace_allocate[22m(),          [1mvmspace_mmap[22m(),         [1mvmspace_protect[22m(),
       [1mvmspace_access[22m(), and [1mvmspace_activate[22m() functions returns  the  status
       of  the requested operation attempt. The [1mvmspace_inherit[22m() function re‚Äê
       turns failure if an unimplemented inheritance type is requested.

[1mSEE ALSO[0m
       [4mkmem[24m(9), [4mmmap[24m(2), [4mfork[24m(2), [4mexit[24m(2)

386BSD 1                        August 29, 1994                     VMSPACE(9)
