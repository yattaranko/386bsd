UN(4)                       Kernel Interfaces Manual                     UN(4)

[1mNAME[0m
       un ‚Äî UNIX‚Äêdomain protocol family

[1mSYNOPSIS[0m
       [1m$(NONSTDINC) += $(INCDOMAIN)[0m
       [1m#include <sys/types.h>[0m
       [1m#include <un.h>[0m

[1mDESCRIPTION[0m
       The  UNIX‚Äêdomain protocol family is a collection of protocols that pro‚Äê
       vides local (on‚Äêmachine) interprocess communication through the  normal
       [4msocket[24m(2)  mechanisms.  The UNIX‚Äêdomain family supports the SOCK_STREAM
       and SOCK_DGRAM socket types and uses filesystem pathnames for  address‚Äê
       ing.

[1mADDRESSING[0m
       UNIX‚Äêdomain  addresses  are  variable‚Äêlength filesystem pathnames of at
       most 104 characters.  The include file ‚ü®[4mun.h[24m‚ü© defines this address:

             struct sockaddr_un {
             u_char  sun_len;
             u_char  sun_family;
             char    sun_path[104];
             };

       Binding a name to a UNIX‚Äêdomain socket with  [4mbind[24m(2)  causes  a  socket
       file  to  be  created in the filesystem.  This file is [4mnot[24m removed when
       the socket is closed‚Äî[4munlink[24m(2) must be used to remove the file.

       The UNIX‚Äêdomain protocol family does not support  broadcast  addressing
       or any form of ‚Äúwildcard‚Äù matching on incoming messages.  All addresses
       are absolute‚Äê or relative‚Äêpathnames of other UNIX‚Äêdomain sockets.  Nor‚Äê
       mal  filesystem  access‚Äêcontrol mechanisms are also applied when refer‚Äê
       encing pathnames; e.g., the destination of a  [4mconnect[24m(2)  or  [4msendto[24m(2)
       must be writable.

[1mPROTOCOLS[0m
       The UNIX‚Äêdomain protocol family is comprised of simple transport proto‚Äê
       cols   that   support  the  SOCK_STREAM  and  SOCK_DGRAM  abstractions.
       SOCK_STREAM sockets also support the communication  of  Unix  file  de‚Äê
       scriptors  through the use of the [4mmsg_control[24m field in the [4mmsg[24m argument
       to [4msendmsg[24m(2) and [4mrecvmsg[24m(2).

       Any valid descriptor may be sent in a message.  The file  descriptor(s)
       to  be  passed  are described using a [4mstruct[24m [4mcmsghdr[24m that is defined in
       the  include  file  ‚ü®[4msys/socket.h[24m‚ü©.   The  type  of  the   message   is
       SCM_RIGHTS,  and  the data portion of the messages is an array of inte‚Äê
       gers representing the file descriptors to be passed.  The number of de‚Äê
       scriptors being passed is defined by the length field of  the  message;
       the  length field is the sum of the size of the header plus the size of
       the array of file descriptors.

       The received descriptor is a [4mduplicate[24m of the sender‚Äôs  descriptor,  as
       if  it  were  created  with  a  call to [4mdup[24m(2).  Per‚Äêprocess descriptor
       flags, set with [4mfcntl[24m(2), are [4mnot[24m passed to  a  receiver.   Descriptors
       that are awaiting delivery, or that are purposely not received, are au‚Äê
       tomatically closed by the system when the destination socket is closed.

[1mSEE ALSO[0m
       [4msocket[24m(2), [4mintro[24m(4)

       ‚ÄúAn Introductory 4.3 BSD Interprocess Communication Tutorial‚Äù, [4mPS1[24m, 7.

       ‚ÄúAn Advanced 4.3 BSD Interprocess Communication Tutorial‚Äù, [4mPS1[24m, 8.

[1mHISTORY[0m
       The UNIX‚Äêdomain protocol manual currently under development.

FreeBSD 13.2                    March 28, 1991                           UN(4)
