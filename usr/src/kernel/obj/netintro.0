NETINTRO(4)                 Kernel Interfaces Manual               NETINTRO(4)

[1mNAME[0m
       networking ‚Äî introduction to networking facilities

[1mSYNOPSIS[0m
       [1m#include <sys/socket.h>[0m
       [1m#include <net/route.h>[0m
       [1m#include <net/if.h>[0m

[1mDESCRIPTION[0m
       This  section  is  a  general introduction to the networking facilities
       available in the system.  Documentation in this part of  section  4  is
       broken up into three areas: [4mprotocol[24m [4mfamilies[24m (domains), [4mprotocols[24m, and
       [4mnetwork[24m [4minterfaces[24m.

       All  network  protocols are associated with a specific [4mprotocol[24m [4mfamily[24m.
       A protocol family provides basic services to the  protocol  implementa‚Äê
       tion  to  allow  it  to function within a specific network environment.
       These services may include packet fragmentation and  reassembly,  rout‚Äê
       ing,  addressing,  and  basic transport.  A protocol family may support
       multiple methods of addressing, though the current protocol implementa‚Äê
       tions do not.  A protocol family is normally comprised of a  number  of
       protocols,  one per [4msocket[24m(2) type.  It is not required that a protocol
       family support all socket types.  A protocol family may contain  multi‚Äê
       ple protocols supporting the same socket abstraction.

       A  protocol  supports  one  of  the  socket  abstractions  detailed  in
       [4msocket[24m(2).  A specific protocol may be accessed either  by  creating  a
       socket  of  the  appropriate type and protocol family, or by requesting
       the protocol explicitly when creating a socket.  Protocols normally ac‚Äê
       cept only one type of address format, usually  determined  by  the  ad‚Äê
       dressing  structure  inherent in the design of the protocol family/net‚Äê
       work architecture.  Certain semantics of the basic socket  abstractions
       are protocol specific.  All protocols are expected to support the basic
       model  for  their particular socket type, but may, in addition, provide
       non‚Äêstandard facilities or extensions to a mechanism.  For  example,  a
       protocol supporting the SOCK_STREAM abstraction may allow more than one
       byte of out‚Äêof‚Äêband data to be transmitted per out‚Äêof‚Äêband message.

       A  network  interface is similar to a device interface.  Network inter‚Äê
       faces comprise the lowest layer of the networking subsystem,  interact‚Äê
       ing  with  the actual transport hardware.  An interface may support one
       or more protocol families and/or address formats.  The SYNOPSIS section
       of each network interface entry gives a sample specification of the re‚Äê
       lated drivers  for  use  in  providing  a  system  description  to  the
       [4mconfig[24m(8)  program.   The  DIAGNOSTICS section lists messages which may
       appear on the console and/or in the system error log, [4m/var/log/messages[0m
       (see [4msyslogd[24m(8)), due to errors in device operation.

[1mPROTOCOLS[0m
       The system currently supports the DARPA Internet protocols,  the  Xerox
       Network  Systems(tm) protocols, and some of the ISO OSI protocols.  Raw
       socket interfaces are provided to the IP protocol layer  of  the  DARPA
       Internet,  to the IMP link layer (1822), and to the IDP protocol of Xe‚Äê
       rox NS.  Consult the appropriate manual pages in this section for  more
       information regarding the support for each protocol family.

[1mADDRESSING[0m
       Associated with each protocol family is an address format.  All network
       address adhere to a general structure, called a sockaddr, described be‚Äê
       low.  However, each protocol imposes finer and more specific structure,
       generally renaming the variant, which is discussed in the protocol fam‚Äê
       ily manual page alluded to above.

                 struct sockaddr {
                     u_char  sa_len;
                     u_char  sa_family;
                     char    sa_data[14];
             };

       The field [4msa_len[24m contains the total length of  the  of  the  structure,
       which  may exceed 16 bytes.  The following address values for [4msa_family[0m
       are known to the system (and additional formats are defined for  possi‚Äê
       ble future implementation):

       #define    AF_UNIX      1    /* local to host (pipes, portals) */
       #define    AF_INET      2    /* internetwork: UDP, TCP, etc. */
       #define    AF_IMPLINK   3    /* arpanet imp addresses */
       #define    AF_NS        6    /* Xerox NS protocols */
       #define    AF_CCITT     10   /* CCITT protocols, X.25 etc */
       #define    AF_HYLINK    15   /* NSC Hyperchannel */
       #define    AF_ISO       18   /* ISO protocols */

[1mROUTING[0m
       UNIX  provides  some packet routing facilities.  The kernel maintains a
       routing information database, which is used in selecting the  appropri‚Äê
       ate network interface when transmitting packets.

       A  user process (or possibly multiple co‚Äêoperating processes) maintains
       this database by sending messages over a special kind of socket.   This
       supplants fixed size [4mioctl[24m(2) used in earlier releases.

       This facility is described in [4mroute[24m(4).

[1mINTERFACES[0m
       Each  network interface in a system corresponds to a path through which
       messages may be sent and received.  A network interface usually  has  a
       hardware  device  associated with it, though certain interfaces such as
       the loopback interface, [4mlo[24m(4), do not.

       The following [4mioctl[24m calls may be used to manipulate network interfaces.
       The [4mioctl[24m is made on a socket (typically of type SOCK_DGRAM) in the de‚Äê
       sired domain.  Most of the requests supported in earlier releases  take
       an [4mifreq[24m structure as its parameter.  This structure has the form

       struct  ifreq {
       #define    IFNAMSIZ    16
           char    ifr_name[IFNAMSIZE];        /* if name, e.g. "en0" */
           union {
               struct    sockaddr ifru_addr;
               struct    sockaddr ifru_dstaddr;
               struct    sockaddr ifru_broadaddr;
               short     ifru_flags;
               int       ifru_metric;
               caddr_t   ifru_data;
           } ifr_ifru;
       #define ifr_addr      ifr_ifru.ifru_addr    /* address */
       #define ifr_dstaddr   ifr_ifru.ifru_dstaddr /* other end of p‚Äêto‚Äêp link */
       #define ifr_broadaddr ifr_ifru.ifru_broadaddr /* broadcast address */
       #define ifr_flags     ifr_ifru.ifru_flags   /* flags */
       #define ifr_metric    ifr_ifru.ifru_metric  /* metric */
       #define ifr_data      ifr_ifru.ifru_data    /* for use by interface */
       };

       Calls which are now depricated are:

       SIOCSIFADDR     Set  interface  address for protocol family.  Following
                       the address assignment, the ‚Äò‚Äòinitialization‚Äô‚Äô  routine
                       for the interface is called.

       SIOCSIFDSTADDR  Set  point to point address for protocol family and in‚Äê
                       terface.

       SIOCSIFBRDADDR  Set broadcast address for protocol  family  and  inter‚Äê
                       face.

       [4mIoctl[24m  requests  to  obtain  addresses and requests both to set and re‚Äê
       treive other data are still fully supported and use  the  [4mifreq[24m  struc‚Äê
       ture:

       SIOCGIFADDR     Get interface address for protocol family.

       SIOCGIFDSTADDR  Get  point to point address for protocol family and in‚Äê
                       terface.

       SIOCGIFBRDADDR  Get broadcast address for protocol  family  and  inter‚Äê
                       face.

       SIOCSIFFLAGS    Set  interface flags field.  If the interface is marked
                       down, any processes currently routing  packets  through
                       the  interface are notified; some interfaces may be re‚Äê
                       set so that incoming packets are  no  longer  received.
                       When marked up again, the interface is reinitialized.

       SIOCGIFFLAGS    Get interface flags.

       SIOCSIFMETRIC   Set  interface routing metric.  The metric is used only
                       by user‚Äêlevel routers.

       SIOCGIFMETRIC   Get interface metric.

       There are two requests that make use of a new structure:

       SIOCAIFADDR     An interface may have more than one address  associated
                       with  it  in  some  protocols.  This request provides a
                       means to add additional addresses (or modify character‚Äê
                       istics of the primary address if  the  default  address
                       for the address family is specified).  Rather than mak‚Äê
                       ing  separate calls to set destination or broadcast ad‚Äê
                       dresses, or network masks (now an integral  feature  of
                       multiple  protocols)  a  separate  structure is used to
                       specify all three facets  simultaneously  (see  below).
                       One  would  use  a  slightly  tailored  version of this
                       struct specific to each family (replacing each sockaddr
                       by one of the family‚Äêspecific type).  Where  the  sock‚Äê
                       addr  itself is larger than the default size, one needs
                       to modify the [4mioctl[24m identifier itself  to  include  the
                       total size, as described in [4mioctl[24m.

       SIOCDIFADDR     This  requests  deletes  the specified address from the
                       list associated with an interface.  It  also  uses  the
                       [4mif_aliasreq[24m  structure  to allow for the possibility of
                       protocols allowing multiple masks  or  destination  ad‚Äê
                       dresses, and also adopts the convention that specifica‚Äê
                       tion  of  the default address means to delete the first
                       address for the interface belonging to the address fam‚Äê
                       ily in which the original socket was opened.

       SIOCGIFCONF     Get interface configuration list.  This  request  takes
                       an [4mifconf[24m structure (see below) as a value‚Äêresult para‚Äê
                       meter.   The  [4mifc_len[24m  field should be initially set to
                       the size of the buffer pointed to by [4mifc_buf[24m.   On  re‚Äê
                       turn  it will contain the length, in bytes, of the con‚Äê
                       figuration list.

       /*
       * Structure used in SIOCAIFCONF request.
       */
       struct ifaliasreq {
               char    ifra_name[IFNAMSIZ];   /* if name, e.g. "en0" */
               struct  sockaddr        ifra_addr;
               struct  sockaddr        ifra_broadaddr;
               struct  sockaddr        ifra_mask;
       };

       /*
       * Structure used in SIOCGIFCONF request.
       * Used to retrieve interface configuration
       * for machine (useful for programs which
       * must know all networks accessible).
       */
       struct ifconf {
           int   ifc_len;              /* size of associated buffer */
           union {
               caddr_t    ifcu_buf;
               struct     ifreq *ifcu_req;
           } ifc_ifcu;
       #define ifc_buf ifc_ifcu.ifcu_buf /* buffer address */
       #define ifc_req ifc_ifcu.ifcu_req /* array of structures returned */
       };

[1mSEE ALSO[0m
       [4msocket[24m(2), [4mioctl[24m(2), [4mintro[24m(4), [4mconfig[24m(8), [4mrouted[24m(8)

[1mHISTORY[0m
       The [1mnetintro [22mmanual appeared in 4.3BSD-Tahoe.

4.2 Berkeley Distribution       March 28, 1991                     NETINTRO(4)
