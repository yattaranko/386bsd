GETOPT(3)                   Library Functions Manual                 GETOPT(3)

[1mNAME[0m
       getopt ‚Äî get option letter from argv

[1mSYNOPSIS[0m
       [1m#include <stdlib.h>[0m

       [4mextern[24m [4mchar[24m [4m*optarg[0m
       [4mextern[24m [4mint[24m [4moptind[0m
       [4mextern[24m [4mint[24m [4mopterr[0m

       [4mint[0m
       [1mgetopt[22m([4mint[24m [4margc[24m, [4mchar[24m [4m*[24m [4mconst[24m [4m*argv[24m, [4mconst[24m [4mchar[24m [4m*optstring[24m);

[1mDESCRIPTION[0m
       The  [1mgetopt[22m()  function gets the next [4mknown[24m option character from [4margv[24m.
       An option character is [4mknown[24m if it has been specified in the string  of
       accepted option characters, [4moptstring[24m.

       The  option string [4moptstring[24m may contain the following characters; let‚Äê
       ters and letters followed by a colon to indicate an option argument  is
       to  follow.  It does not matter to [1mgetopt[22m() if a following argument has
       leading white space.

       On return from [1mgetopt[22m(), [4moptarg[24m points to an option argument, if it  is
       anticipated,  and  the  variable  [4moptind[24m contains the index to the next
       [4margv[24m argument for a subsequent call to [1mgetopt[22m().

       The variable [4mopterr[24m and [4moptind[24m are both initialized to 1.  In order  to
       use  [1mgetopt[22m()  to evaluate multiple sets of arguments, or to evaluate a
       single set of arguments multiple times, [4moptind[24m must be  initialized  to
       the number of argv entries to be skipped in each evaluation.

       The  [1mgetopt[22m()  function  returns  an  EOF when the argument list is ex‚Äê
       hausted, or a non‚Äêrecognized option is encountered.  The interpretation
       of options in the argument list may be cancelled  by  the  option  ‚Äò‚Äê‚Äê‚Äô
       (double  dash) which causes [1mgetopt[22m() to signal the end of argument pro‚Äê
       cessing and return an EOF.  When all options have been processed (i.e.,
       up to the first non‚Äêoption argument), [1mgetopt[22m() returns EOF.

[1mDIAGNOSTICS[0m
       If the [1mgetopt[22m() function encounters a character not found in the string
       [4moptarg[24m or detects a missing option argument it  writes  an  appropriate
       error  message on the [4mstderr[24m stream, and returns ‚Äò‚Äô?  as a option char‚Äê
       acter for the errant option.  Setting [4mopterr[24m to  a  zero  will  disable
       these error messages.

[1mEXAMPLE[0m
       extern char *optarg;
       extern int optind;
       int bflag, ch, fd;

       bflag = 0;
       while ((ch = getopt(argc, argv, "bf:")) != EOF)
               switch(ch) {
               case ‚Äôb‚Äô:
                       bflag = 1;
                       break;
               case ‚Äôf‚Äô:
                       if ((fd = open(optarg, O_RDONLY, 0)) < 0) {
                               (void)fprintf(stderr,
                                       "myname: unable to read file %s.\n", optarg);
                               exit(1) ;
                       }
                       break;
               case ‚Äô?‚Äô:
               default:
                       usage();
       }
       argc ‚Äê= optind;
       argv += optind;

[1mHISTORY[0m
       The [1mgetopt[22m() function appeared 4.3BSD.

[1mBUGS[0m
       Option  arguments are allowed to begin with ‚Äú[1m-[22m‚Äù; this is reasonable but
       reduces the amount of error checking possible.

       A single dash ‚Äú[1m‚Äê[22m‚Äù may be specified as an character in  [4moptstring[24m,  how‚Äê
       ever  it should [4mnever[24m have an argument associated with it.  This allows
       [1mgetopt[22m() to be used with programs that expect ‚Äú[1m‚Äê[22m‚Äù as  an  option  flag.
       This  practice is wrong, and should not be used in any current develop‚Äê
       ment.  It is provided for backward compatibility [4monly[24m.  By  default,  a
       single  dash  causes [1mgetopt[22m() to return EOF.  This is, we believe, com‚Äê
       patible with System V.

       It is also possible to handle digits as option  letters.   This  allows
       [1mgetopt[22m() to be used with programs that expect a number (‚Äú[1m‚Äê3[22m‚Äù) as an op‚Äê
       tion.   This  practice  is wrong, and should not be used in any current
       development.  It is provided for backward compatibility [4monly[24m.  The fol‚Äê
       lowing code fragment works fairly well.

             int length;
             char *p;

             while ((c = getopt(argc, argv, "0123456789")) != EOF)
                     switch (c) {
                     case ‚Äô0‚Äô: case ‚Äô1‚Äô: case ‚Äô2‚Äô: case ‚Äô3‚Äô: case ‚Äô4‚Äô:
                     case ‚Äô5‚Äô: case ‚Äô6‚Äô: case ‚Äô7‚Äô: case ‚Äô8‚Äô: case ‚Äô9‚Äô:
                             p = argv[optind ‚Äê 1];
                             if (p[0] == ‚Äô‚Äê‚Äô && p[1] == ch && !p[2])
                                     length = atoi(++p);
                             else
                                     length = atoi(argv[optind] + 1);
                             break;
                     }
             }

4.3 Berkeley Distribution       April 19, 1991                       GETOPT(3)
