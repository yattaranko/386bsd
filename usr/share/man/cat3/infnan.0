INFNAN(3)                   Library Functions Manual                 INFNAN(3)

[1mNAME[0m
       infnan ‚Äî signals invalid floating-point operations on a VAX (temporary)

[1mSYNOPSIS[0m
       [1m#include <math.h>[0m

       [4mdouble[0m
       [1minfnan[22m([4mint[24m [4miarg[24m);

[1mDESCRIPTION[0m
       At  some  time  in the future, some of the useful properties of the In‚Äê
       finities and [4mNaN[24ms in the IEEE standard 754  for  Binary  Floating-Point
       Arithmetic  will  be  simulated in UNIX on the DEC VAX by using its Re‚Äê
       served Operands.  Meanwhile, the Invalid, Overflow  and  Divide-by-Zero
       exceptions  of  the  IEEE  standard  are being approximated on a VAX by
       calls to a procedure [1minfnan[22m() in appropriate places in  [4mlibm[24m(3).   When
       better  exception-handling  is implemented in UNIX, only [1minfnan[22m() among
       the codes in [4mlibm[24m will have to be changed.  And users of [4mlibm[24m  can  de‚Äê
       sign their own [1minfnan[22m() now to insulate themselves from future changes.

       Whenever an elementary function code in [4mlibm[24m has to simulate one of the
       aforementioned IEEE exceptions, it calls [1minfnan[22m([4miarg[24m) with an appropri‚Äê
       ate  value  of  [4miarg[24m.  Then a reserved operand fault stops computation.
       But [1minfnan[22m() could be replaced by a function with the  same  name  that
       returns  some plausible value, assigns an apt value to the global vari‚Äê
       able [4merrno[24m, and allows computation to resume.  Alternatively,  the  Re‚Äê
       served  Operand  Fault Handler could be changed to respond by returning
       that plausible value, etc.  instead of aborting.

       In the table below, the first two columns show various exceptions  sig‚Äê
       naled  by the IEEE standard, and the default result it prescribes.  The
       third column shows what value is given to [4miarg[24m  by  functions  in  [4mlibm[0m
       when  they  invoke [1minfnan[22m([4miarg[24m) under analogous circumstances on a VAX.
       Currently [1minfnan[22m() stops computation  under  all  those  circumstances.
       The  last  two columns offer an alternative; they suggest a setting for
       [4merrno[24m and a value for a revised [1minfnan[22m() to return.  And a C program to
       implement that suggestion follows.


             IEEE                                               Signal    IEEE
                                                                            Default    [4miarg[24m        [4merrno[24m               [1minfnan[22m()
             Invalid        [4mNaN[24m             EDOM        EDOM                0
             Overflow       ¬±‚àû              ERANGE      ERANGE              HUGE
             Div-by-0       ¬±Infinity       ¬±ERANGE     ERANGE              or
                                                                            EDOM      ¬±HUGE
                            (HUGE = 1.7e38 ... nearly  2.0**127)

       ALTERNATIVE [1minfnan[22m():

             #include        <math.h>
             #include        <errno.h>
             extern int      errno ;
             double  infnan(iarg)
             int     iarg ;
             {
                     switch(iarg) {
                     case     ERANGE:        errno = ERANGE; return(HUGE);
                     case    -ERANGE:        errno = EDOM;   return(-HUGE);
                     default:                errno = EDOM;   return(0);
                     }
             }

[1mSEE ALSO[0m
       [4mmath[24m(3), [4mintro[24m(2), [4msignal[24m(3).

       ERANGE and EDOM are defined in ‚ü®[4merrno.h[24m‚ü©.  (See [4mintro[24m(2)  for  explana‚Äê
       tion of EDOM and ERANGE.)

[1mHISTORY[0m
       The [1minfnan[22m() function appeared in 4.3BSD.

4.3 Berkeley Distribution       April 19, 1991                       INFNAN(3)
