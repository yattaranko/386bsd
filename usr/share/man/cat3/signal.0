SIGNAL(3)                   Library Functions Manual                 SIGNAL(3)

[1mNAME[0m
       signal ‚Äî simplified software signal facilities

[1mSYNOPSIS[0m
       [1m#include <signal.h>[0m

       [4mvoid[0m
       [1m*signal[22m([4msig[24m, [4mfunc[24m);()

       [4mvoid[0m
       (*func)()

[1mDESCRIPTION[0m
       This  [1msignal[22m()  facility  is a simplified interface to the more general
       [4msigaction[24m(2) facility.

       Signals allow the manipulation of a process from outside its domain  as
       well  as  allowing the process to manipulate itself or copies of itself
       (children). There are two general types of signals:  those  that  cause
       termination  of  a  process and those that do not.  Signals which cause
       termination of a program might result from an  irrecoverable  error  or
       might  be  the  result  of  a user at a terminal typing the ‚Äòinterrupt‚Äô
       character.  Signals are used when  a  process  is  stopped  because  it
       wishes  to  access  its  control  terminal while in the background (see
       [4mtty[24m(4)).  Signals are optionally generated when a process resumes after
       being stopped, when the status of child processes changes, or when  in‚Äê
       put  is ready at the control terminal.  Most signals result in the ter‚Äê
       mination of the process receiving them if no action is taken; some sig‚Äê
       nals instead cause the process receiving them to  be  stopped,  or  are
       simply  discarded  if  the process has not requested otherwise.  Except
       for the SIGKILL and SIGSTOP signals, the [1msignal[22m() function allows for a
       signal to be caught, to be ignored, or to generate an interupt.   These
       signals are defined in the file ‚ü®[4msignal.h[24m‚ü©:

         [1mName            Default Action                      Description[0m
       SIGHUP          terminate process       terminal line hangup
       SIGINT          terminate process       interrupt program
       SIGQUIT         create core image       quit program
       SIGILL          create core image       illegal instruction
       SIGTRAP         create core image       trace trap
       SIGABRT         create core image       [4mabort[24m(2) call (formerly SIGIOT)
       SIGEMT          create core image       emulate instruction executed
       SIGFPE          create core image       floating‚Äêpoint exception
       SIGKILL         terminate process       kill program
       SIGBUS          create core image       bus error
       SIGSEGV         create core image       segmentation violation
       SIGSYS           create  core  image        system  call  given invalid
                                               argument
       SIGPIPE         terminate process       write on a pipe with no reader
       SIGALRM         terminate process       real‚Äêtime timer expired
       SIGTERM         terminate process       software termination signal
       SIGURG          discard signal           urgent  condition  present  on
                                               socket
       SIGSTOP          stop  process             stop  (cannot  be  caught or
                                               ignored)
       SIGTSTP         stop  process             stop  signal  generated  from
                                               keyboard
       SIGCONT         discard signal          continue after stop
       SIGCHLD         discard signal          child status has changed
       SIGTTIN          stop process            background read attempted from
                                               control terminal
       SIGTTOU         stop process            background write  attempted  to
                                               control terminal
       SIGIO           discard signal          I/O is possible on a descriptor
                                               (see [4mfcntl[24m(2))
       SIGXCPU          terminate  process        cpu time limit exceeded (see
                                               [4msetrlimit[24m(2))
       SIGXFSZ         terminate process       file size limit  exceeded  (see
                                               [4msetrlimit[24m(2))
       SIGVTALRM         terminate   process        virtual  time  alarm  (see
                                               [4msetitimer[24m(2))
       SIGPROF         terminate  process        profiling  timer  alarm  (see
                                               [4msetitimer[24m(2))
       SIGWINCH        discard signal          Window size change
       SIGINFO         discard signal          status request from keyboard
       SIGUSR1         terminate process       User defined signal 1
       SIGUSR2         terminate process       User defined signal 2

       The [4mfunc[24m procedure allows a user to choose the action upon receipt of a
       signal.   To  set  the  default action of the signal to occur as listed
       above, [4mfunc[24m should be SIG_DFL.  A SIG_DFL resets  the  default  action.
       To  ignore  the  signal [4mfunc[24m should be SIG_IGN.  This will cause subse‚Äê
       quent instances of the signal to be ignored and pending instances to be
       discarded. If SIG_IGN is not used, further occurrences  of  the  signal
       are automatically blocked and [4mfunc[24m is called.

       The  handled  signal  is  unblocked  with  the function returns and the
       process continues from where it left off when the signal occured.   [1mUn‚Äê[0m
       [1mlike  previous  signal facilities, the handler func() remains installed[0m
       [1mafter a signal has been delivered.[0m

       For some system calls, if a signal is caught while the call is  execut‚Äê
       ing  and  the call is permaturely terminated, the call is automatically
       restarted.  (The handler is installed using the  SA_RESTART  flag  with
       [4msigaction[24m(2).)   The  affected  system calls include [4mread[24m(2), [4mwrite[24m(2),
       [4msendto[24m(2), [4mrecvfrom[24m(2), [4msendmsg[24m(2) and [4mrecvmsg[24m(2) on  a  communications
       channel  or  a low speed device and during a [4mioctl[24m(2) or [4mwait[24m(2).  How‚Äê
       ever, calls that have already committed are not restarted, but  instead
       return a partial success (for example, a short read count).

       When  a  process  which  has installed signal handlers forks, the child
       process inherits the signals.  All caught signals may be reset to their
       default action by a call to the [4mexecve[24m(2) function; ignored signals re‚Äê
       main ignored.

[1mRETURN VALUES[0m
       The previous action is returned on a successful call.  Otherwise, -1 is
       returned and  the global variable [4merrno[24m is set to indicate the error.

[1mERRORS[0m
       [4mSignal[24m will fail and no action will take place if one of the  following
       occur:

       [EINVAL]  [4mSig[24m is not a valid signal number.

       [EINVAL]  An  attempt is made to ignore or supply a handler for SIGKILL
                 or SIGSTOP.

[1mSEE ALSO[0m
       [4mkill[24m(1),    [4mptrace[24m(2),    [4mkill[24m(2),    [4msigaction[24m(2),     [4msigprocmask[24m(2),
       [4msigsuspend[24m(2), [4msigstack[24m(2), [4msetjmp[24m(3), [4mtty[24m(4)

[1mHISTORY[0m
       This [1msignal [22mfacility appeared in 4.0BSD.

4th Berkeley Distribution        July 31, 1991                       SIGNAL(3)
