[4mMATH[24m(3M)                                                              [4mMATH[24m(3M)

[1mNAME[0m
       math - introduction to mathematical library functions

[1mDESCRIPTION[0m
       These  functions  constitute the C math library, [4mlibm.[24m  The link editor
       searches this library under the ‚Äú-lm‚Äù option.  Declarations  for  these
       functions  may be obtained from the include file <[4mmath.h[24m>.  The Fortran
       math library is described in ‚Äò‚Äòman 3f intro‚Äô‚Äô.

[1mLIST OF FUNCTIONS[0m
       [4mName[24m      [4mAppears[24m [4mon[24m [4mPage[24m    [4mDescription[24m               [4mError[24m [4mBound[24m [4m(ULPs)[0m
       acos        sin.3m       inverse trigonometric function      3
       acosh       asinh.3m     inverse hyperbolic function         3
       asin        sin.3m       inverse trigonometric function      3
       asinh       asinh.3m     inverse hyperbolic function         3
       atan        sin.3m       inverse trigonometric function      1
       atanh       asinh.3m     inverse hyperbolic function         3
       atan2       sin.3m       inverse trigonometric function      2
       cabs        hypot.3m     complex absolute value              1
       cbrt        sqrt.3m      cube root                           1
       ceil        floor.3m     integer no less than                0
       copysign    ieee.3m      copy sign bit                       0
       cos         sin.3m       trigonometric function              1
       cosh        sinh.3m      hyperbolic function                 3
       drem        ieee.3m      remainder                           0
       erf         erf.3m       error function                     ???
       erfc        erf.3m       complementary error function       ???
       exp         exp.3m       exponential                         1
       expm1       exp.3m       exp(x)-1                            1
       fabs        floor.3m     absolute value                      0
       floor       floor.3m     integer no greater than             0
       hypot       hypot.3m     Euclidean distance                  1
       infnan      infnan.3m    signals exceptions
       j0          j0.3m        bessel function                    ???
       j1          j0.3m        bessel function                    ???
       jn          j0.3m        bessel function                    ???
       lgamma      lgamma.3m    log gamma function; (formerly gamma.3m)
       log         exp.3m       natural logarithm                   1
       logb        ieee.3m      exponent extraction                 0
       log10       exp.3m       logarithm to base 10                3
       log1p       exp.3m       log(1+x)                            1
       pow         exp.3m       exponential x**y                 60-500
       rint        floor.3m     round to nearest integer            0
       scalb       ieee.3m      exponent adjustment                 0
       sin         sin.3m       trigonometric function              1
       sinh        sinh.3m      hyperbolic function                 3
       sqrt        sqrt.3m      square root                         1
       tan         sin.3m       trigonometric function              3
       tanh        sinh.3m      hyperbolic function                 3
       y0          j0.3m        bessel function                    ???
       y1          j0.3m        bessel function                    ???
       yn          j0.3m        bessel function                    ???

[1mNOTES[0m
       In 4.3 BSD, distributed from the University of California in late 1985,
       most of the foregoing functions come in two versions, one for the  dou‚Äê
       ble-precision "D" format in the DEC VAX-11 family of computers, another
       for double-precision arithmetic conforming to the IEEE Standard 754 for
       Binary  Floating-Point  Arithmetic.  The two versions behave very simi‚Äê
       larly, as should be expected from programs  more  accurate  and  robust
       than  was  the norm when UNIX was born.  For instance, the programs are
       accurate to within the numbers of [4mulp[24ms tabulated above; an [4mulp[24m  is  one
       [4mU[24mnit  in the [4mL[24mast [4mP[24mlace.  And the programs have been cured of anomalies
       that afflicted the older math library [4mlibm[24m in which incidents like  the
       following had been reported:
              sqrt(-1.0) = 0.0 and log(-1.0) = -1.7e38.
              cos(1.0e-11) > cos(0.0) > 1.0.
              pow(x,1.0) != x when x = 2.0, 3.0, 4.0, ..., 9.0.
              pow(-1.0,1.0e10) trapped on Integer Overflow.
              sqrt(1.0e30) and sqrt(1.0e-30) were very slow.
       However  the  two versions do differ in ways that have to be explained,
       to which end the following notes are provided.

       [1mDEC VAX-11 D_floating-point:[0m

       This is the format for which the original math library [4mlibm[24m was  devel‚Äê
       oped,  and  to which this manual is still principally dedicated.  It is
       [4mthe[24m double-precision format for the PDP-11 and the earlier  VAX-11  ma‚Äê
       chines;  VAX-11s  after  1983 were provided with an optional "G" format
       closer to the IEEE double-precision format.  The earlier DEC  MicroVAXs
       have no D format, only G double-precision. (Why?  Why not?)

       Properties of D_floating-point:
              Wordsize: 64 bits, 8 bytes.  Radix: Binary.
              Precision: 56 sig.  bits, roughly like 17 sig.  decimals.
                     If  x  and  x‚Äô  are consecutive positive D_floating-point
                     numbers (they differ by 1 [4mulp[24m), then
                     1.3e-17 < 0.5**56 < (x‚Äô-x)/x ‚â§ 0.5**55 < 2.8e-17.
              Range: Overflow threshold  = 2.0**127 = 1.7e38.
                     Underflow threshold = 0.5**128 = 2.9e-39.
                     NOTE:  THIS RANGE IS COMPARATIVELY NARROW.
                     Overflow customarily stops computation.
                     Underflow is customarily flushed quietly to zero.
                     CAUTION:
                            It is possible to have x != y and yet x-y = 0  be‚Äê
                            cause  of  underflow.   Similarly x > y > 0 cannot
                            prevent either x‚àóy = 0 or  y/x = 0 from  happening
                            without warning.
              Zero is represented ambiguously.
                     Although  2**55 different representations of zero are ac‚Äê
                     cepted by the hardware, only the  obvious  representation
                     is ever produced.  There is no -0 on a VAX.
              Infinity is not part of the VAX architecture.
              Reserved operands:
                     of  the  2**55  that the hardware recognizes, only one of
                     them is ever produced.  Any floating-point operation upon
                     a reserved operand, even  a  MOVF  or  MOVD,  customarily
                     stops computation, so they are not much used.
              Exceptions:
                     Divisions  by  zero  and operations that overflow are in‚Äê
                     valid operations that customarily stop computation or, in
                     earlier machines, produce  reserved  operands  that  will
                     stop computation.
              Rounding:
                     Every  rational operation  (+, -, ‚àó, /) on a VAX (but not
                     necessarily on a PDP-11), if not  an  over/underflow  nor
                     division  by  zero, is rounded to within half an [4mulp[24m, and
                     when the rounding error  is  exactly  half  an  [4mulp[24m  then
                     rounding is away from 0.

       Except for its narrow range, D_floating-point is one of the better com‚Äê
       puter arithmetics designed in the 1960‚Äôs.  Its properties are reflected
       fairly  faithfully in the elementary functions for a VAX distributed in
       4.3 BSD.  They over/underflow only if their results have to lie out  of
       range  or  very  nearly  so,  and then they behave much as any rational
       arithmetic operation that over/underflowed  would  behave.   Similarly,
       expressions  like log(0) and atanh(1) behave like 1/0; and sqrt(-3) and
       acos(3) behave like 0/0; they all produce reserved operands and/or stop
       computation!  The situation is  described  in  more  detail  in  manual
       pages.
              [4mThis[24m [4mresponse[24m [4mseems[24m [4mexcessively[24m [4mpunitive,[24m [4mso[24m [4mit[24m [4mis[24m [4mdestined[0m
              [4mto[24m  [4mbe[24m [4mreplaced[24m [4mat[24m [4msome[24m [4mtime[24m [4min[24m [4mthe[24m [4mforeseeable[24m [4mfuture[24m [4mby[24m [4ma[0m
              [4mmore[24m [4mflexible[24m [4mbut[24m [4mstill[24m [4muniform[24m [4mscheme[24m [4mbeing[24m  [4mdeveloped[24m  [4mto[0m
              [4mhandle[24m  [4mall[24m  [4mfloating-point[24m  [4marithmetic[24m  [4mexceptions[24m [4mneatly.[0m
              [4mSee[24m [4minfnan(3M)[24m [4mfor[24m [4mthe[24m [4mpresent[24m [4mstate[24m [4mof[24m [4maffairs.[0m

       How do the functions in 4.3 BSD‚Äôs new [4mlibm[24m for UNIX compare with  their
       counterparts in DEC‚Äôs VAX/VMS library?  Some of the VMS functions are a
       little faster, some are a little more accurate, some are more puritani‚Äê
       cal  about  exceptions (like pow(0.0,0.0) and atan2(0.0,0.0)), and most
       occupy much more memory than their counterparts in [4mlibm[24m.  The VMS codes
       interpolate in large table to achieve  speed  and  accuracy;  the  [4mlibm[0m
       codes  use tricky formulas compact enough that all of them may some day
       fit into a ROM.

       More important, DEC regards the VMS codes  as  proprietary  and  guards
       them zealously against unauthorized use.  But the [4mlibm[24m codes in 4.3 BSD
       are  intended for the public domain; they may be copied freely provided
       their provenance is always acknowledged, and provided users assist  the
       authors  in  their  researches  by reporting experience with the codes.
       Therefore no user of UNIX on a machine whose arithmetic  resembles  VAX
       D_floating-point need use anything worse than the new [4mlibm[24m.

       [1mIEEE STANDARD 754 Floating-Point Arithmetic:[0m

       This  standard  is  on its way to becoming more widely adopted than any
       other design for computer arithmetic.  VLSI chips that conform to  some
       version of that standard have been produced by a host of manufacturers,
       among them ...
            Intel i8087, i80287      National Semiconductor  32081
            Motorola 68881           Weitek WTL‚Äê1032, ... , ‚Äê1165
            Zilog Z8070              Western Electric (AT&T) WE32106.
       Other implementations range from software, done thoroughly in the Apple
       Macintosh,  through  VLSI  in  the  Hewlett-Packard 9000 series, to the
       ELXSI 6400 running ECL at 3 Megaflops.  Several  other  companies  have
       adopted  the  formats  of IEEE 754 without, alas, adhering to the stan‚Äê
       dard‚Äôs way of handling rounding  and  exceptions  like  over/underflow.
       The  DEC  VAX  G_floating-point  format is very similar to the IEEE 754
       Double format, so similar that the C programs for the IEEE versions  of
       most of the elementary functions listed above could easily be converted
       to run on a MicroVAX, though nobody has volunteered to do that yet.

       The  codes  in 4.3 BSD‚Äôs [4mlibm[24m for machines that conform to IEEE 754 are
       intended primarily for the National Semi. 32081 and  WTL  1164/65.   To
       use these codes with the Intel or Zilog chips, or with the Apple Macin‚Äê
       tosh or ELXSI 6400, is to forego the use of better codes provided (per‚Äê
       haps  freely) by those companies and designed by some of the authors of
       the codes above.  Except for [4matan[24m, [4mcabs[24m, [4mcbrt[24m, [4merf[24m, [4merfc[24m, [4mhypot[24m, [4mj0-jn[24m,
       [4mlgamma[24m, [4mpow[24m and [4my0-yn[24m, the Motorola 68881 has all the functions in [4mlibm[0m
       on chip, and faster and more accurate; it, Apple, the i8087, Z8070  and
       WE32106 all use 64 sig.  bits.  The main virtue of 4.3 BSD‚Äôs [4mlibm[24m codes
       is  that  they  are  intended for the public domain; they may be copied
       freely provided their provenance is always acknowledged,  and  provided
       users  assist  the  authors in their researches by reporting experience
       with the codes.  Therefore no user of UNIX on a machine  that  conforms
       to IEEE 754 need use anything worse than the new [4mlibm[24m.

       Properties of IEEE 754 Double-Precision:
              Wordsize: 64 bits, 8 bytes.  Radix: Binary.
              Precision: 53 sig.  bits, roughly like 16 sig.  decimals.
                     If  x  and  x‚Äô  are consecutive positive Double-Precision
                     numbers (they differ by 1 [4mulp[24m), then
                     1.1e-16 < 0.5**53 < (x‚Äô-x)/x ‚â§ 0.5**52 < 2.3e-16.
              Range: Overflow threshold  = 2.0**1024 = 1.8e308
                     Underflow threshold = 0.5**1022 = 2.2e-308
                     Overflow goes by default to a signed Infinity.
                     Underflow is [4mGradual,[24m rounding  to  the  nearest  integer
                     multiple of 0.5**1074 = 4.9e-324.
              Zero is represented ambiguously as +0 or -0.
                     Its  sign  transforms correctly through multiplication or
                     division, and is preserved by addition of zeros with like
                     signs; but x-x yields +0 for every finite  x.   The  only
                     operations  that  reveal zero‚Äôs sign are division by zero
                     and copysign(x,¬±0).  In particular, comparison (x > y,  x
                     ‚â•  y,  etc.)  cannot be affected by the sign of zero; but
                     if finite x = y then Infinity =  1/(x-y)  !=  -1/(y-x)  =
                     -Infinity.
              Infinity is signed.
                     it persists when added to itself or to any finite number.
                     Its  sign transforms correctly through multiplication and
                     division, and (finite)/¬±Infinity = ¬±0 (nonzero)/0 =  ¬±In‚Äê
                     finity.   But  Infinity-Infinity,  Infinity‚àó0  and Infin‚Äê
                     ity/Infinity are, like 0/0 and sqrt(-3),  invalid  opera‚Äê
                     tions that produce [4mNaN[24m. ...
              Reserved operands:
                     there are 2**53-2 of them, all called [4mNaN[24m ([4mN[24mot [4ma[24m [4mN[24mumber).
                     Some,  called Signaling [4mNaN[24ms, trap any floating-point op‚Äê
                     eration performed upon them; they are used to mark  miss‚Äê
                     ing  or  uninitialized values, or nonexistent elements of
                     arrays.  The rest are Quiet [4mNaN[24ms; they  are  the  default
                     results of Invalid Operations, and propagate through sub‚Äê
                     sequent  arithmetic operations.  If x != x then x is [4mNaN[24m;
                     every other predicate (x > y, x = y, x < y, ...) is FALSE
                     if [4mNaN[24m is involved.
                     NOTE: Trichotomy is violated by [4mNaN[24m.
                            Besides being FALSE, predicates  that  entail  or‚Äê
                            dered  comparison,  rather than mere (in)equality,
                            signal Invalid Operation when [4mNaN[24m is involved.
              Rounding:
                     Every algebraic operation (+, -, ‚àó, /, sqrt)  is  rounded
                     by  default  to within half an [4mulp[24m, and when the rounding
                     error is exactly half an [4mulp[24m  then  the  rounded  value‚Äôs
                     least  significant bit is zero.  This kind of rounding is
                     usually the best kind, sometimes  provably  so;  for  in‚Äê
                     stance,  for  every x = 1.0, 2.0, 3.0, 4.0, ..., 2.0**52,
                     we find (x/3.0)‚àó3.0 == x and (x/10.0)‚àó10.0 == x  and  ...
                     despite  that  both  the  quotients and the products have
                     been rounded.  Only rounding like IEEE 754 can  do  that.
                     But  no  single  kind  of rounding can be proved best for
                     every circumstance, so IEEE 754 provides rounding towards
                     zero or towards +Infinity or  towards  -Infinity  at  the
                     programmer‚Äôs  option.  And the same kinds of rounding are
                     specified for Binary-Decimal Conversions,  at  least  for
                     magnitudes between roughly 1.0e-10 and 1.0e37.
              Exceptions:
                     IEEE  754  recognizes five kinds of floating-point excep‚Äê
                     tions, listed below in declining order of probable impor‚Äê
                     tance.
                            Exception              Default Result
                            __________________________________________
                            Invalid Operation      [4mNaN[24m, or FALSE
                            Overflow               ¬±Infinity
                            Divide by Zero         ¬±Infinity
                            Underflow              Gradual Underflow
                            Inexact                Rounded value
                     NOTE:  An Exception is not an Error unless handled badly.
                     What makes a class of exceptions exceptional is  that  no
                     single  default response can be satisfactory in every in‚Äê
                     stance.  On the other hand, if a  default  response  will
                     serve  most  instances satisfactorily, the unsatisfactory
                     instances cannot justify aborting computation every  time
                     the exception occurs.

              For  each  kind of floating-point exception, IEEE 754 provides a
              Flag that is raised each time its  exception  is  signaled,  and
              stays  raised  until  the  program resets it.  Programs may also
              test, save and restore a flag.  Thus, IEEE  754  provides  three
              ways  by  which  programs may cope with exceptions for which the
              default result might be unsatisfactory:

              1)  Test for a condition that might cause  an  exception  later,
                  and branch to avoid the exception.

              2)  Test  a  flag to see whether an exception has occurred since
                  the program last reset its flag.

              3)  Test a result to see whether it is a value that only an  ex‚Äê
                  ception could have produced.
                  CAUTION:  The  only reliable ways to discover whether Under‚Äê
                  flow has occurred are to test whether products or  quotients
                  lie  closer to zero than the underflow threshold, or to test
                  the Underflow flag.  (Sums and differences cannot  underflow
                  in IEEE 754; if x != y then x-y is correct to full precision
                  and  certainly  nonzero  regardless  of how tiny it may be.)
                  Products and quotients that underflow gradually can lose ac‚Äê
                  curacy gradually without vanishing, so comparing  them  with
                  zero (as one might on a VAX) will not reveal the loss.  For‚Äê
                  tunately, if a gradually underflowed value is destined to be
                  added  to  something bigger than the underflow threshold, as
                  is almost always the case, digits lost to gradual  underflow
                  will  not be missed because they would have been rounded off
                  anyway.  So gradual underflows are usually  [4mprovably[24m  ignor‚Äê
                  able.  The same cannot be said of underflows flushed to 0.

              At  the  option  of an implementor conforming to IEEE 754, other
              ways to cope with exceptions may be provided:

              4)  ABORT.  This mechanism classifies an exception in advance as
                  an incident to be handled by means traditionally  associated
                  with  error-handling  statements  like "ON ERROR GO TO ...".
                  Different languages offer different forms of this statement,
                  but most share the following characteristics:

              ‚Äî   No means is provided to substitute a value for the offending
                  operation‚Äôs result and resume computation from what  may  be
                  the middle of an expression.  An exceptional result is aban‚Äê
                  doned.

              ‚Äî   In  a  subprogram that lacks an error-handling statement, an
                  exception causes the subprogram  to  abort  within  whatever
                  program  called  it,  and so on back up the chain of calling
                  subprograms until an error-handling statement is encountered
                  or the whole task is aborted and memory is dumped.

              5)  STOP.  This mechanism, requiring  an  interactive  debugging
                  environment,  is  more  for the programmer than the program.
                  It classifies an exception in advance as a symptom of a pro‚Äê
                  grammer‚Äôs error; the exception suspends execution as near as
                  it can to the offending operation so that the programmer can
                  look around to see how it happened.  Quite often  the  first
                  several  exceptions turn out to be quite unexceptionable, so
                  the programmer ought ideally to be able to resume  execution
                  after each one as if execution had not been stopped.

              6)  ... Other ways lie beyond the scope of this document.

       The crucial problem for exception handling is the problem of Scope, and
       the  problem‚Äôs  solution  is  understood,  but  not enough manpower was
       available to implement it fully in time to be distributed in 4.3  BSD‚Äôs
       [4mlibm[24m.  Ideally, each elementary function should act as if it were indi‚Äê
       visible, or atomic, in the sense that ...

       i)    No  exception should be signaled that is not deserved by the data
             supplied to that function.

       ii)   Any exception signaled should be identified  with  that  function
             rather than with one of its subroutines.

       iii)  The  internal  behavior  of an atomic function should not be dis‚Äê
             rupted when a calling program changes from one to another of  the
             five or so ways of handling exceptions listed above, although the
             definition  of  the function may be correlated intentionally with
             exception handling.

       Ideally, every programmer should be able [4mconveniently[24m  to  turn  a  de‚Äê
       bugged subprogram into one that appears atomic to its users.  But simu‚Äê
       lating  all  three characteristics of an atomic function is still a te‚Äê
       dious affair, entailing hosts of tests and saves-restores; work is  un‚Äê
       der way to ameliorate the inconvenience.

       Meanwhile,  the  functions in [4mlibm[24m are only approximately atomic.  They
       signal no inappropriate exception except possibly ...
              Over/Underflow
                     when a result, if  properly  computed,  might  have  lain
                     barely within range, and
              Inexact in [4mcabs[24m, [4mcbrt[24m, [4mhypot[24m, [4mlog10[24m and [4mpow[0m
                     when it happens to be exact, thanks to fortuitous cancel‚Äê
                     lation of errors.
       Otherwise, ...
              Invalid Operation is signaled only when
                     any result but [4mNaN[24m would probably be misleading.
              Overflow is signaled only when
                     the  exact result would be finite but beyond the overflow
                     threshold.
              Divide-by-Zero is signaled only when
                     a  function  takes  exactly  infinite  values  at  finite
                     operands.
              Underflow is signaled only when
                     the exact result would be nonzero but tinier than the un‚Äê
                     derflow threshold.
              Inexact is signaled only when
                     greater  range  or precision would be needed to represent
                     the exact result.

[1mBUGS[0m
       When signals are appropriate, they are emitted  by  certain  operations
       within  the  codes, so a subroutine-trace may be needed to identify the
       function with its signal in case method 5) above is in  use.   And  the
       codes all take the IEEE 754 defaults for granted; this means that a de‚Äê
       cision  to  trap  all divisions by zero could disrupt a code that would
       otherwise get correct results despite division by zero.

[1mSEE ALSO[0m
       An explanation of IEEE 754 and its proposed  extension  p854  was  pub‚Äê
       lished  in  the  IEEE  magazine MICRO in August 1984 under the title "A
       Proposed Radix- and Word-length-independent Standard for Floating-point
       Arithmetic" by W. J. Cody et al.  The manuals for Pascal, C  and  BASIC
       on  the  Apple Macintosh document the features of IEEE 754 pretty well.
       Articles in the IEEE magazine COMPUTER vol. 14 no. 3 (Mar.  1981),  and
       in the ACM SIGNUM Newsletter Special Issue of Oct. 1979, may be helpful
       although they pertain to superseded drafts of the standard.

4th Berkeley Distribution         May 6, 1991                         [4mMATH[24m(3M)
