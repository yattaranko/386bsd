[4mBTREE[24m(3)                   Library Functions Manual                   [4mBTREE[24m(3)

[1mNAME[0m
       btree - btree database access method

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <db.h>[0m

[1mDESCRIPTION[0m
       The  routine [4mdbopen[24m is the library interface to database files.  One of
       the supported file formats is btree files.  The general description  of
       the database access methods is in [4mdbopen[24m(3), this manual page describes
       only the btree specific information.

       The  btree  data structure is a sorted, balanced tree structure storing
       associated key/data pairs.

       The btree access method specific data structure provided to  [4mdbopen[24m  is
       defined in the <db.h> include file as follows:

       typedef struct {
              u_long flags;
              u_int cachesize;
              index_t psize;
              int lorder;
              int minkeypage;
              int (*compare)(const DBT *key1, const DBT *key2);
              int (*prefix)(const DBT *key1, const DBT *key2);
       } BTREEINFO;

       The elements of this structure are as follows:

       flags  The  flag value is specified by [4mor[24m‚Äôing any of the following val‚Äê
              ues:

              R_DUP  Permit duplicate keys in the tree, i.e. permit  insertion
                     if  the  key  to  be inserted already exists in the tree.
                     The default behavior, as described in  [4mdbopen[24m(3),  is  to
                     overwrite  a  matching key when inserting a new key or to
                     fail if the R_NOOVERWRITE flag is specified.   The  R_DUP
                     flag  is overridden by the R_NOOVERWRITE flag, and if the
                     R_NOOVERWRITE flag is specified, attempts to  insert  du‚Äê
                     plicate keys into the tree will fail.

                     If the database contains duplicate keys, the order of re‚Äê
                     trieval of key/data pairs is undefined if the [4mget[24m routine
                     is  used,  however,  [4mseq[24m  routine calls with the R_CURSOR
                     flag set will always return the logical ‚Äò‚Äòfirst‚Äô‚Äô of  any
                     group of duplicate keys.

       cachesize
              A  suggested  maximum size (in bytes) of the memory cache.  This
              value is [1monly [22madvisory, and the access method will allocate more
              memory rather than fail.  Since every search examines  the  root
              page  of the tree, caching the most recently used pages substan‚Äê
              tially improves access time.  In addition, physical  writes  are
              delayed  as long as possible, so a moderate cache can reduce the
              number of I/O  operations  significantly.   Obviously,  using  a
              cache  increases  (but only increases) the likelihood of corrup‚Äê
              tion or lost data if the system crashes while a  tree  is  being
              modified.   If  [4mcachesize[24m  is 0 (no size is specified) a default
              cache is used.

       psize  Page size is the size (in bytes) of the pages used for nodes  in
              the  tree.   The  minimum page size is 512 bytes and the maximum
              page size is 64K.  If [4mpsize[24m is 0 (no page size is  specified)  a
              page  size  is  chosen  based  on the underlying file system I/O
              block size.

       lorder The byte order for integers in  the  stored  database  metadata.
              The  number  should represent the order as an integer; for exam‚Äê
              ple, big endian order would be the number 4,321.  If [4mlorder[24m is 0
              (no order is specified) the current host order is used.

       minkeypage
              The minimum number of keys which will be stored  on  any  single
              page.  This value is used to determine which keys will be stored
              on overflow pages, i.e. if a key or data item is longer than the
              pagesize  divided  by the minkeypage value, it will be stored on
              overflow pages instead of in the page itself.  If [4mminkeypage[24m  is
              0 (no minimum number of keys is specified) a value of 2 is used.

       compare
              Compare is the key comparison function.  It must return an inte‚Äê
              ger  less  than, equal to, or greater than zero if the first key
              argument is considered to be respectively less than,  equal  to,
              or  greater  than  the second key argument.  The same comparison
              function must be used on a given tree every time it  is  opened.
              If  [4mcompare[24m  is  NULL (no comparison function is specified), the
              keys are compared lexically, with shorter keys  considered  less
              than longer keys.

       prefix Prefix  is  the  prefix comparison function.  If specified, this
              routine must return the number of bytes of the second key  argu‚Äê
              ment  which  are  necessary to determine that it is greater than
              the first key argument.  If the keys are equal, the  key  length
              should  be  returned.   Note,  the usefulness of this routine is
              very data dependent, but, in some data sets can produce signifi‚Äê
              cantly reduced tree sizes and search times.  If [4mprefix[24m  is  NULL
              (no prefix function is specified), [1mand [22mno comparison function is
              specified,  a  default  lexical  comparison routine is used.  If
              [4mprefix[24m is NULL and a comparison routine is specified, no  prefix
              comparison is done.

       If the file already exists (and the O_TRUNC flag is not specified), the
       values specified for the parameters flags, lorder and psize are ignored
       in favor of the values used when the tree was created.

       Forward sequential scans of a tree are from the least key to the great‚Äê
       est.

       Space  freed  up  by deleting key/data pairs from the tree is never re‚Äê
       claimed, although it is normally made available for reuse.  This  means
       that  the btree storage structure is grow‚Äêonly.  The only solutions are
       to avoid excessive deletions, or to create a  fresh  tree  periodically
       from a scan of an existing one.

       Searches,  insertions,  and deletions in a btree will all complete in O
       lg base N where base is the average fill factor.  Often, inserting  or‚Äê
       dered  data into btrees results in a low fill factor.  This implementa‚Äê
       tion has been modified to make ordered insertion the best case, result‚Äê
       ing in a much better than normal page fill factor.

[1mSEE ALSO[0m
       [4mdbopen[24m(3), [4mhash[24m(3), [4mmpool[24m(3), [4mrecno[24m(3)

       [4mThe[24m [4mUbiquitous[24m [4mB‚Äêtree[24m, Douglas Comer, ACM Comput.  Surv.  11,  2  (June
       1979), 121‚Äê138.

       [4mPrefix[24m  [4mB‚Äêtrees[24m, Bayer and Unterauer, ACM Transactions on Database Sys‚Äê
       tems, Vol. 2, 1 (March 1977), 11‚Äê26.

       [4mThe[24m [4mArt[24m [4mof[24m [4mComputer[24m [4mProgramming[24m [4mVol.[24m [4m3:[24m  [4mSorting[24m  [4mand[24m  [4mSearching[24m,  D.E.
       Knuth, 1968, pp 471‚Äê480.

[1mBUGS[0m
       Only big and little endian byte order is supported.

                                                                      [4mBTREE[24m(3)
