REGEXP(3)                   Library Functions Manual                 REGEXP(3)

[1mNAME[0m
       regcomp, regexec, regsub, regerror — regular expression handlers

[1mSYNOPSIS[0m
       [1m#include <regexp.h>[0m

       [4mregexp[24m [4m*[0m
       [1mregcomp[22m([4mconst[24m [4mchar[24m [4m*exp[24m);

       [4mint[0m
       [1mregexec[22m([4mconst[24m [4mregexp[24m [4m*prog[24m, [4mconst[24m [4mchar[24m [4m*string[24m);

       [4mvoid[0m
       [1mregsub[22m([4mconst[24m [4mregexp[24m [4m*prog[24m, [4mconst[24m [4mchar[24m [4m*source[24m, [4mchar[24m [4m*dest[24m);

[1mDESCRIPTION[0m
       The  [1mregcomp[22m(), [1mregexec[22m(), [1mregsub[22m(), and [1mregerror[22m() functions implement
       [4megrep[24m(1)‐style regular expressions and supporting facilities.

       The [1mregcomp[22m() function compiles a regular expression into  a  structure
       of  type [4mregexp[24m, and returns a pointer to it.  The space has been allo‐
       cated using [4mmalloc[24m(3) and may be released by [4mfree[24m.

       The [1mregexec[22m() function matches a NUL‐terminated [4mstring[24m against the com‐
       piled regular expression in [4mprog[24m.  It returns 1 for success and  0  for
       failure, and adjusts the contents of [4mprog[24m’s [4mstartp[24m and [4mendp[24m (see below)
       accordingly.

       The  members  of a [4mregexp[24m structure include at least the following (not
       necessarily in order):

             char *startp[NSUBEXP];
             char *endp[NSUBEXP];

       where NSUBEXP is defined (as 10) in the header file.  Once a successful
       [1mregexec[22m() has been done using the [1mregexp[22m(), each [4mstartp[24m‐ [4mendp[24m pair  de‐
       scribes  one  substring  within the [4mstring[24m, with the [4mstartp[24m pointing to
       the first character of the substring and the [4mendp[24m pointing to the first
       character following the substring.  The 0th substring is the  substring
       of  [4mstring[24m  that  matched the whole regular expression.  The others are
       those substrings that matched parenthesized expressions within the reg‐
       ular expression, with parenthesized expressions  numbered  in  left‐to‐
       right order of their opening parentheses.

       The  [1mregsub[22m()  function copies [4msource[24m to [4mdest[24m, making substitutions ac‐
       cording to the most recent [1mregexec[22m() performed using  [4mprog[24m.   Each  in‐
       stance  of  ‘&’  in  [4msource[24m  is  replaced by the substring indicated by
       [4mstartp[24m[] and [4mendp[24m[].  Each instance of ‘\[4mn[24m’, where [4mn[24m is a digit, is re‐
       placed by the substring indicated by [4mstartp[24m[[4mn[24m] and [4mendp[24m[[4mn[24m].  To  get  a
       literal ‘&’ or ‘\[4mn[24m’ into [4mdest[24m, prefix it with ‘\’; to get a literal ‘\’
       preceding ‘&’ or ‘\[4mn[24m’, prefix it with another ‘\’.

       The  [1mregerror[22m()  function  is  called  whenever an error is detected in
       [1mregcomp[22m(), [1mregexec[22m(), or [1mregsub[22m().  The default [1mregerror[22m()  writes  the
       string  [4mmsg[24m, with a suitable indicator of origin, on the standard error
       output and invokes [4mexit[24m(2).  The [1mregerror[22m() function can be replaced by
       the user if other actions are desirable.

[1mREGULAR EXPRESSION SYNTAX[0m
       A regular expression is zero or more [4mbranches[24m, separated  by  ‘|’.   It
       matches anything that matches one of the branches.

       A  branch is zero or more [4mpieces[24m, concatenated.  It matches a match for
       the first, followed by a match for the second, etc.

       A piece is an [4matom[24m possibly followed by ‘*’, ‘+’, or ‘?’.  An atom fol‐
       lowed by ‘*’ matches a sequence of 0 or more matches of the  atom.   An
       atom  followed  by  ‘+’  matches a sequence of 1 or more matches of the
       atom.  An atom followed by ‘?’ matches a match of the atom, or the null
       string.

       An atom is a regular expression in parentheses (matching  a  match  for
       the regular expression), a [4mrange[24m (see below), ‘.’  (matching any single
       character), ‘ˆ’ (matching the null string at the beginning of the input
       string), ‘$’ (matching the null string at the end of the input string),
       a  ‘\’  followed  by a single character (matching that character), or a
       single character with no other significance (matching that character).

       A [4mrange[24m is a sequence of characters  enclosed  in  ‘[]’.   It  normally
       matches any single character from the sequence.  If the sequence begins
       with  ‘ˆ’, it matches any single character [4mnot[24m from the rest of the se‐
       quence.  If two characters in the sequence are separated by  ‘-’,  this
       is  shorthand  for the full list of ASCII characters between them (e.g.
       ‘[0‐9]’ matches any decimal digit).  To include a literal  ‘]’  in  the
       sequence,  make  it the first character (following a possible ‘ˆ’).  To
       include a literal ‘-’, make it the first or last character.

[1mAMBIGUITY[0m
       If a regular expression could match two different parts  of  the  input
       string,  it will match the one which begins earliest.  If both begin in
       the same place but match different lengths, or match the same length in
       different ways, life gets messier, as follows.

       In general, the possibilities in a list of branches are  considered  in
       left‐to‐right  order,  the possibilities for ‘*’, ‘+’, and ‘?’ are con‐
       sidered longest‐first, nested constructs are considered from the outer‐
       most in, and concatenated  constructs  are  considered  leftmost‐first.
       The  match that will be chosen is the one that uses the earliest possi‐
       bility in the first choice that has to be made.  If there is more  than
       one  choice,  the next will be made in the same manner (earliest possi‐
       bility) subject to the decision on the first choice.  And so forth.

       For example, ‘[1m(ab|a)b*c[22m’ could match ‘abc’ in one  of  two  ways.   The
       first  choice  is between ‘ab’ and ‘a’; since ‘ab’ is earlier, and does
       lead to a successful overall match, it is chosen.  Since the ‘b’ is al‐
       ready spoken for, the ‘b*’ must match its  last  possibility—the  empty
       string—since it must respect the earlier choice.

       In  the particular case where no ‘|’s are present and there is only one
       ‘*’, ‘+’, or ‘?’, the net effect is that  the  longest  possible  match
       will  be  chosen.   So  ‘[1mab*[22m’,  presented  with  ‘xabbbby’,  will match
       ‘abbbb’.  Note that if ‘[1mab*[22m’, is tried  against  ‘xabyabbbz’,  it  will
       match  ‘ab’  just  after ‘x’, due to the begins‐earliest rule.  (In ef‐
       fect, the decision on where to start the match is the first  choice  to
       be  made,  hence  subsequent choices must respect it even if this leads
       them to less‐preferred alternatives.)

[1mRETURN VALUES[0m
       The [1mregcomp[22m() function returns NULL for a failure  ([1mregerror[22m()  permit‐
       ting),  where failures are syntax errors, exceeding implementation lim‐
       its, or applying ‘+’ or ‘*’ to a possibly‐null operand.

[1mSEE ALSO[0m
       [4med[24m(1), [4mex[24m(1), [4mexpr[24m(1), [4megrep[24m(1), [4mfgrep[24m(1), [4mgrep[24m(1), [4mregex[24m(3)

[1mHISTORY[0m
       Both code and manual  page  for  [1mregcomp[22m(),  [1mregexec[22m(),  [1mregsub[22m(),  and
       [1mregerror[22m()  were  written  at the University of Toronto and appeared in
       4.3BSD-Tahoe.  They are intended to be  compatible  with  the  Bell  V8
       [4mregexp[24m(3), but are not derived from Bell code.

[1mBUGS[0m
       Empty branches and empty regular expressions are not portable to V8.

       The  restriction against applying ‘*’ or ‘+’ to a possibly‐null operand
       is an artifact of the simplistic implementation.

       Does not support [4megrep[24m’s newline‐separated branches; neither  does  the
       V8 [4mregexp[24m(3), though.

       Due  to  emphasis  on  compactness  and simplicity, it’s not strikingly
       fast.  It does give special attention to handling simple cases quickly.

FreeBSD 13.2                    April 19, 1991                       REGEXP(3)
