FTS(3)                      Library Functions Manual                    FTS(3)

[1mNAME[0m
       fts ‚Äî traverse a file hierarchy

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/stat.h>[0m
       [1m#include <fts.h>[0m

       [4mFTS[24m [4m*[0m
       [1mfts_open[22m([4mchar[24m      [4m*[24m      [4mconst[24m      [4m*path_argv[24m,      [4mint[24m      [4moptions[24m,
           [4mint[24m [4m*compar(const[24m [4mFTSENT[24m [4m**,[24m [4mconst[24m [4mFTSENT[24m [4m**)[24m);

       [4mFTSENT[24m [4m*[0m
       [1mfts_read[22m([4mFTS[24m [4m*ftsp[24m);

       [4mFTSENT[24m [4m*[0m
       [1mfts_children[22m([4mFTS[24m [4m*ftsp[24m, [4mint[24m [4moptions[24m);

       [4mint[0m
       [1mfts_set[22m([4mFTS[24m [4mftsp[24m, [4mFTSENT[24m [4m*f[24m, [4mint[24m [4moptions[24m);

       [4mint[0m
       [1mfts_close[22m([4mFTS[24m [4m*ftsp[24m);

[1mDESCRIPTION[0m
       The [1mfts [22mfunctions are provided for traversing UNIX file hierarchies.  A
       simple overview is that the [1mfts_open[22m() function returns a ‚Äò‚Äòhandle‚Äô‚Äô on
       a file hierarchy, which is then supplied to the  other  [1mfts  [22mfunctions.
       The function [1mfts_read[22m() returns a pointer to a structure describing one
       of  the  files  in the file hierarchy.  The function [1mfts_children[22m() re‚Äê
       turns a pointer to a linked list of structures, each of which describes
       one of the files contained in a directory in the  hierarchy.   In  gen‚Äê
       eral,  directories  are visited two distinguishable times; in pre‚Äêorder
       (before any of their descendants are visited) and in post‚Äêorder  (after
       all  of  their descendants have been visited).  Files are visited once.
       It is possible to walk the hierarchy ‚Äò‚Äòlogically‚Äô‚Äô  (ignoring  symbolic
       links)  or  physically (visiting symbolic links), order the walk of the
       hierarchy or prune and/or re‚Äêvisit portions of the hierarchy.

       Two structures are defined (and typedef‚Äôd) in the include file ‚ü®[4mfts.h[24m‚ü©.
       The first is [4mFTS[24m, the structure that represents the file hierarchy  it‚Äê
       self.   The  second  is [4mFTSENT[24m, the structure that represents a file in
       the file hierarchy.  Normally, an  [4mFTSENT[24m  structure  is  returned  for
       every  file  in  the file hierarchy.  In this manual page, ‚Äò‚Äòfile‚Äô‚Äô and
       ‚Äú[4mFTSENT[24m structure‚Äù are generally interchangeable.  The [4mFTSENT[24m structure
       contains at least the following fields, which are described in  greater
       detail below:

       typedef struct _ftsent {
               u_short fts_info;               /* flags for FTSENT structure */
               char *fts_accpath;              /* access path */
               char *fts_path;                 /* root path */
               short fts_pathlen;              /* strlen(fts_path) */
               char *fts_name;                 /* file name */
               short fts_namelen;              /* strlen(fts_name) */
               short fts_level;                /* depth (-1 to N) */
               int fts_error;                  /* file errno */
               long fts_number;                /* local numeric value */
               void *fts_pointer;              /* local address value */
               struct ftsent *fts_parent;      /* parent directory */
               struct ftsent *fts_link;        /* next file structure */
               struct ftsent *fts_cycle;       /* cycle structure */
               struct stat *fts_statp;         /* stat(2) information */
       } FTSENT;

       These fields are defined as follows:

       [4mfts_info[24m     One  of the following flags describing the returned [4mFTSENT[0m
                    structure and the file it represents.  With the  exception
                    of  directories  without  errors (FTS_D), all of these en‚Äê
                    tries are terminal, that is, they will not  be  revisited,
                    nor will any of their descendants be visited.

                    FTS_D        A directory being visited in pre‚Äêorder.

                    FTS_DC       A  directory that causes a cycle in the tree.
                                 (The [4mfts_cycle[24m field of the [4mFTSENT[24m  structure
                                 will be filled in as well.)

                    FTS_DEFAULT  Any  [4mFTSENT[24m  structure that represents a file
                                 type not explicitly described by one  of  the
                                 other [4mfts_info[24m values.

                    FTS_DNR      A directory which cannot be read.  This is an
                                 error return, and the [4mfts_errno[24m field will be
                                 set to indicate what caused the error.

                    FTS_DOT      A file named ‚Äò.‚Äô or ‚Äò..‚Äô which was not speci‚Äê
                                 fied  as  a  file  name  to  [1mfts_open[22m()  (see
                                 FTS_SEEDOT).

                    FTS_DP       A directory being visited in post‚Äêorder.  The
                                 contents of the [4mFTSENT[24m structure will be  un‚Äê
                                 changed  from when it was returned in pre‚Äêor‚Äê
                                 der, i.e. with  the  [4mfts_info[24m  field  set  to
                                 FTS_D.

                    FTS_ERR      This  is  an  error return, and the [4mfts_errno[0m
                                 field will be set to indicate what caused the
                                 error.

                    FTS_F        A regular file.

                    FTS_NS       A file for which no [4mstat[24m(2)  information  was
                                 available.   The  contents  of  the [4mfts_statp[0m
                                 field are undefined.  This is  an  error  re‚Äê
                                 turn,  and the [4mfts_errno[24m field will be set to
                                 indicate what caused the error.

                    FTS_NSOK     A file for which no [4mstat[24m(2)  information  was
                                 requested.   The  contents  of  the [4mfts_statp[0m
                                 field are undefined.

                    FTS_SL       A symbolic link.

                    FTS_SLNONE   A symbolic link with a  non‚Äêexistent  target.
                                 The contents of the [4mfts_statp[24m field reference
                                 the  file  characteristic information for the
                                 symbolic link itself.

       [4mfts_accpath[24m  A path for accessing the file from the current directory.

       [4mfts_path[24m     The path for the file relative to the root of the  traver‚Äê
                    sal.   This path contains the path specified to [1mfts_open[22m()
                    as a prefix.

       [4mfts_pathlen[24m  The length of the string referenced by [4mfts_path[24m.

       [4mfts_name[24m     The name of the file.

       [4mfts_namelen[24m  The length of the string referenced by [4mfts_name[24m.

       [4mfts_level[24m    The depth of the traversal, numbered from -1 to  N,  where
                    this  file  was  found.  The [4mFTSENT[24m structure representing
                    the parent of the starting point (or root) of the  traver‚Äê
                    sal  is numbered -1, and the [4mFTSENT[24m structure for the root
                    itself is numbered 0.

       [4mfts_errno[24m    Upon return of a [4mFTSENT[24m structure from the  [1mfts_children[22m()
                    or  [1mfts_read[22m()  functions,  with its [4mfts_info[24m field set to
                    FTS_DNR, FTS_ERR or FTS_NS, the [4mfts_errno[24m  field  contains
                    the  value  of  the external variable [4merrno[24m specifying the
                    cause of  the  error.   Otherwise,  the  contents  of  the
                    [4mfts_errno[24m field are undefined.

       [4mfts_number[24m   This field is provided for the use of the application pro‚Äê
                    gram and is not modified by the [1mfts [22mfunctions.  It is ini‚Äê
                    tialized to 0.

       [4mfts_pointer[24m  This field is provided for the use of the application pro‚Äê
                    gram and is not modified by the [1mfts [22mfunctions.  It is ini‚Äê
                    tialized to NULL.

       [4mfts_parent[24m   A  pointer to the [4mFTSENT[24m structure referencing the file in
                    the hierarchy immediately above the current file, i.e. the
                    directory of which this file is a member.  A parent struc‚Äê
                    ture for the initial entry point is provided as well, how‚Äê
                    ever,  only  the  [4mfts_level[24m,  [4mfts_number[24m  and  [4mfts_pointer[0m
                    fields are guaranteed to be initialized.

       [4mfts_link[24m     Upon return from the [1mfts_children[22m() function, the [4mfts_link[0m
                    field  points to the next structure in the NULL‚Äêterminated
                    linked list of directory members.  Otherwise, the contents
                    of the [4mfts_link[24m field are undefined.

       [4mfts_cycle[24m    If a directory  causes  a  cycle  in  the  hierarchy  (see
                    FTS_DC),  either because of a hard link between two direc‚Äê
                    tories, or a symbolic link pointing to  a  directory,  the
                    [4mfts_cycle[24m  field of the structure will point to the [4mFTSENT[0m
                    structure in the hierarchy that references the  same  file
                    as  the current [4mFTSENT[24m structure.  Otherwise, the contents
                    of the [4mfts_cycle[24m field are undefined.

       [4mfts_statp[24m    A pointer to [4mstat[24m(2) information for the file.

       A single buffer is used for all of the paths of all of the files in the
       file hierarchy.  Therefore, the [4mfts_path[24m  and  [4mfts_accpath[24m  fields  are
       guaranteed  to  be  NULL‚Äêterminated [4monly[24m for the file most recently re‚Äê
       turned by [1mfts_read[22m().  To use these fields to reference any files  rep‚Äê
       resented  by  other [4mFTSENT[24m structures will require that the path buffer
       be modified using the information contained in that [4mFTSENT[24m  structure‚Äôs
       [4mfts_pathlen[24m field.  Any such modifications should be undone before fur‚Äê
       ther  calls  to [1mfts_read[22m() are attempted.  The [4mfts_name[24m field is always
       NULL‚Äêterminated.

[1mFTS_OPEN[0m
       The [1mfts_open[22m() function takes a pointer to an array of character point‚Äê
       ers naming one or more paths which make up a logical file hierarchy  to
       be traversed.  The array must be terminated by a NULL pointer.

       There  are  a  number  of  options,  at  least  one  of  which  (either
       FTS_LOGICAL or FTS_PHYSICAL) must be specified.  The  options  are  se‚Äê
       lected by [4mor[24m‚Äôing the following values:

       FTS_COMFOLLOW
                     This  option causes any symbolic link specified as a root
                     path  to  be  followed   immediately   whether   or   not
                     FTS_LOGICAL is also specified.

       FTS_LOGICAL   This  option  causes  the  [1mfts  [22mroutines to return [4mFTSENT[0m
                     structures for the targets of symbolic links  instead  of
                     the  symbolic  links  themselves.  If this option is set,
                     the only symbolic links for which [4mFTSENT[24m  structures  are
                     returned to the application are those referencing non‚Äêex‚Äê
                     istent files.  Either FTS_LOGICAL or FTS_PHYSICAL [4mmust[24m be
                     provided to the [1mfts_open[22m() function.

       FTS_NOCHDIR   As  a  performance optimization, the [1mfts [22mfunctions change
                     directories as they walk the file  hierarchy.   This  has
                     the  side‚Äêeffect that an application cannot rely on being
                     in any particular directory during  the  traversal.   The
                     FTS_NOCHDIR  option  turns off this optimization, and the
                     [1mfts [22mfunctions will  not  change  the  current  directory.
                     Note that applications should not themselves change their
                     current   directory   and  try  to  access  files  unless
                     FTS_NOCHDIR is specified and absolute pathnames were pro‚Äê
                     vided as arguments to [1mfts_open[22m().

       FTS_NOSTAT    By default, returned  [4mFTSENT[24m  structures  reference  file
                     characteristic  information  (the  [4mstatp[24m  field) for each
                     file visited.  This option relaxes that requirement as  a
                     performance  optimization,  allowing the [1mfts [22mfunctions to
                     set the [4mfts_info[24m field to FTS_NSOK and leave the contents
                     of the [4mstatp[24m field undefined.

       FTS_PHYSICAL  This option causes the  [1mfts  [22mroutines  to  return  [4mFTSENT[0m
                     structures  for  symbolic links themselves instead of the
                     target files they point  to.   If  this  option  is  set,
                     [4mFTSENT[24m structures for all symbolic links in the hierarchy
                     are  returned  to the application.  Either FTS_LOGICAL or
                     FTS_PHYSICAL [4mmust[24m be provided to the [1mfts_open[22m() function.

       FTS_SEEDOT    By default, unless they are specified as  path  arguments
                     to [1mfts_open[22m(), any files named ‚Äò.‚Äô or ‚Äò..‚Äô encountered in
                     the  file  hierarchy are ignored.  This option causes the
                     [1mfts [22mroutines to return [4mFTSENT[24m structures for them.

       FTS_XDEV      This option prevents [1mfts [22mfrom descending into directories
                     that have a different device number than  the  file  from
                     which the descent began.

       The  argument  [1mcompar[22m()  specifies a user‚Äêdefined function which may be
       used to order the traversal of the hierarchy.  It takes two pointers to
       pointers to [4mFTSENT[24m structures as arguments and should return a negative
       value, zero, or a positive value to indicate if the file referenced  by
       its  first  argument comes before, in any order with respect to, or af‚Äê
       ter, the file referenced by  its  second  argument.   The  [4mfts_accpath[24m,
       [4mfts_path[24m  and  [4mfts_pathlen[24m fields of the [4mFTSENT[24m structures may [4mnever[24m be
       used in this comparison.  If the [4mfts_info[24m field is  set  to  FTS_NS  or
       FTS_NSOK, the [4mfts_statp[24m field may not either.  If the [1mcompar[22m() argument
       is  NULL,  the  directory  traversal  order  is  in the order listed in
       [4mpath_argv[24m for the root paths, and in the order listed in the  directory
       for everything else.

[1mFTS_READ[0m
       The  [1mfts_read[22m()  function  returns a pointer to an [4mFTSENT[24m structure de‚Äê
       scribing a file in the hierarchy.  Directories (that are  readable  and
       do  not cause cycles) are visited at least twice, once in pre‚Äêorder and
       once in post‚Äêorder.  All other files are visited at least once.   (Hard
       links between directories that do not cause cycles or symbolic links to
       symbolic  links may cause files to be visited more than once, or direc‚Äê
       tories more than twice.)

       If all the members of the hierarchy have been returned, [1mfts_read[22m()  re‚Äê
       turns  NULL and sets the external variable [4merrno[24m to 0.  If an error un‚Äê
       related to a file in the hierarchy occurs, [1mfts_read[22m() returns NULL  and
       sets  [4merrno[24m  appropriately.  If an error related to a returned file oc‚Äê
       curs, a pointer to an [4mFTSENT[24m structure is returned, and  [4merrno[24m  may  or
       may not have been set (see [4mfts_info[24m).

       The [4mFTSENT[24m structures returned by [1mfts_read[22m() may be overwritten after a
       call to [1mfts_close[22m() on the same file hierarchy stream, or, after a call
       to [1mfts_read[22m() on the same file hierarchy stream unless they represent a
       file  of type directory, in which case they will not be overwritten un‚Äê
       til after a call to [1mfts_read[22m() after the [4mFTSENT[24m structure has been  re‚Äê
       turned by the function [1mfts_read[22m() in post‚Äêorder.

[1mFTS_CHILDREN[0m
       The  [1mfts_children[22m()  function  returns a pointer to an [4mFTSENT[24m structure
       describing the first entry in a  NULL‚Äêterminated  linked  list  of  the
       files  in  the  directory  represented by the [4mFTSENT[24m structure most re‚Äê
       cently returned by [1mfts_read[22m().  The list is linked through the [4mfts_link[0m
       field of the [4mFTSENT[24m structure, and is  ordered  by  the  user‚Äêspecified
       comparison  function,  if  any.   Repeated calls to [1mfts_children[22m() will
       recreate this linked list.

       As a special case, if [1mfts_read[22m() has not yet been called for a  hierar‚Äê
       chy,  [1mfts_children[22m()  will return a pointer to the files in the logical
       directory specified to [1mfts_open[22m(),  i.e.  the  arguments  specified  to
       [1mfts_open[22m().   Otherwise, if the [4mFTSENT[24m structure most recently returned
       by [1mfts_read[22m() is not a directory being visited in pre‚Äêorder, or the di‚Äê
       rectory does not contain any files,  [1mfts_children[22m()  returns  NULL  and
       sets  [4merrno[24m  to  zero.  If an error occurs, [1mfts_children[22m() returns NULL
       and sets [4merrno[24m appropriately.

       The [4mFTSENT[24m structures returned by [1mfts_children[22m() may be overwritten af‚Äê
       ter a call to [1mfts_children[22m(), [1mfts_close[22m() or  [1mfts_read[22m()  on  the  same
       file hierarchy stream.

       [4mOption[24m may be set to the following value:

       FTS_NAMEONLY  Only  the names of the files are needed.  The contents of
                     all the fields in the returned linked list of  structures
                     are  undefined  with  the  exception  of the [4mfts_name[24m and
                     [4mfts_namelen[24m fields.

[1mFTS_SET[0m
       The function [1mfts_set[22m() allows the user application to determine further
       processing for the file [4mf[24m of the stream [4mftsp[24m.  The  [1mfts_set[22m()  function
       returns 0 on success, and -1 if an error occurs.  [4mOption[24m must be set to
       one of the following values:

       FTS_AGAIN     Re‚Äêvisit  the file; any file type may be re‚Äêvisited.  The
                     next call to [1mfts_read[22m() will return the referenced  file.
                     The [4mfts_stat[24m and [4mfts_info[24m fields of the structure will be
                     reinitialized at that time, but no other fields will have
                     been  changed.   This  option  is meaningful only for the
                     most recently returned file from [1mfts_read[22m().  Normal  use
                     is  for  post‚Äêorder directory visits, where it causes the
                     directory to be re‚Äêvisited (in both pre  and  post‚Äêorder)
                     as well as all of its descendants.

       FTS_FOLLOW    The referenced file must be a symbolic link.  If the ref‚Äê
                     erenced  file  is  the  one  most  recently  returned  by
                     [1mfts_read[22m(), the next call to [1mfts_read[22m() returns the  file
                     with  the  [4mfts_info[24m and [4mfts_statp[24m fields reinitialized to
                     reflect the target of the symbolic link  instead  of  the
                     symbolic  link  itself.  If the file is one of those most
                     recently returned by  [1mfts_children[22m(),  the  [4mfts_info[24m  and
                     [4mfts_statp[24m  fields  of  the  structure,  when  returned by
                     [1mfts_read[22m(), will reflect the target of the symbolic  link
                     instead  of the symbolic link itself.  In either case, if
                     the target of the symbolic link does not exist the fields
                     of the returned  structure  will  be  unchanged  and  the
                     [4mfts_info[24m field will be set to FTS_SLNONE.

                     If  the  target of the link is a directory, the pre‚Äêorder
                     return, followed by the return of all of its descendants,
                     followed by a post‚Äêorder return, is done.

       FTS_SKIP      No descendants of this file are visited.  The file may be
                     one  of  those   most   recently   returned   by   either
                     [1mfts_children[22m() or [1mfts_read[22m().

[1mFTS_CLOSE[0m
       The  [1mfts_close[22m()  function  closes a file hierarchy stream [4mftsp[24m and re‚Äê
       stores the current directory to the directory from which [1mfts_open[22m() was
       called to open [4mftsp[24m.  The [1mfts_close[22m() function returns  0  on  success,
       and -1 if an error occurs.

[1mERRORS[0m
       The  function  [1mfts_open[22m()  may fail and set [4merrno[24m for any of the errors
       specified for the library functions [4mopen[24m(2) and [4mmalloc[24m(3).

       The function [1mfts_close[22m() may fail and set [4merrno[24m for any of  the  errors
       specified for the library functions [4mchdir[24m(2) and [4mclose[24m(2).

       The  functions [1mfts_read[22m() and [1mfts_children[22m() may fail and set [4merrno[24m for
       any of  the  errors  specified  for  the  library  functions  [4mchdir[24m(2),
       [4mmalloc[24m(3), [4mopendir[24m(3), [4mreaddir[24m(3) and [4mstat[24m(2).

       In  addition, [1mfts_children[22m(), [1mfts_open[22m() and [1mfts_set[22m() may fail and set
       [4merrno[24m as follows:

       [EINVAL]           The options were invalid.

[1mSEE ALSO[0m
       [4mfind[24m(1), [4mchdir[24m(2), [4mstat[24m(2), [4mqsort[24m(3)

[1mSTANDARDS[0m
       The [1mfts  [22mutility  is  expected  to  be  a  superset  of  the  IEEE  Std
       1003.1‚Äê1988 (‚ÄúPOSIX.1‚Äù) specification.

FreeBSD 13.2                     March 5, 1992                          FTS(3)
