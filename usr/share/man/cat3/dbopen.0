[4mDBOPEN[24m(3)                  Library Functions Manual                  [4mDBOPEN[24m(3)

[1mNAME[0m
       dbopen - database access methods

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <limits.h>[0m
       [1m#include <db.h>[0m

       [1mDB *[0m
       [1mdbopen(const char *file, int flags, int mode, DBTYPE type,[0m
            [1mconst void *openinfo);[0m

[1mDESCRIPTION[0m
       [4mDbopen[24m  is the library interface to database files.  The supported file
       formats are btree, hashed and UNIX file oriented.  The btree format  is
       a representation of a sorted, balanced tree structure.  The hashed for‚Äê
       mat  is an extensible, dynamic hashing scheme.  The flat‚Äêfile format is
       a byte stream file with fixed or variable length records.  The  formats
       and  file  format specific information are described in detail in their
       respective manual pages [4mbtree[24m(3), [4mhash[24m(3) and [4mrecno[24m(3).

       Dbopen opens [4mfile[24m for reading and/or writing.  Files never intended  to
       be  preserved  on  disk may be created by setting the file parameter to
       NULL.

       The [4mflags[24m and [4mmode[24m [4marguments[24m are as specified to the  [4mopen[24m(2)  routine,
       however, only the O_CREAT, O_EXCL, O_EXLOCK, O_RDONLY, O_RDWR, O_SHLOCK
       and  O_TRUNC  flags  are  meaningful.   (Note,  opening a database file
       O_WRONLY is not possible.)

       The [4mtype[24m argument is of type DBTYPE (as defined in the  <db.h>  include
       file) and may be set to DB_BTREE, DB_HASH or DB_RECNO.

       The  [4mopeninfo[24m argument is a pointer to an access method specific struc‚Äê
       ture described in the access method‚Äôs  manual  page.   If  [4mopeninfo[24m  is
       NULL,  each  access method will use defaults appropriate for the system
       and the access method.

       [4mDbopen[24m returns a pointer to a DB structure on success and NULL  on  er‚Äê
       ror.   The DB structure is defined in the <db.h> include file, and con‚Äê
       tains at least the following fields:

       typedef struct {
              DBTYPE type;
              int (*close)(const DB *db);
              int (*del)(const DB *db, const DBT *key, u_int flags);
              int (*fd)(const DB *db);
              int (*get)(const DB *db, DBT *key, DBT *data, u_int flags);
              int (*put)(const DB *db, DBT *key, const DBT *data,
                   u_int flags);
              int (*sync)(const DB *db, u_int flags);
              int (*seq)(const DB *db, DBT *key, DBT *data, u_int flags);
       } DB;

       These elements describe a database type and a set of functions perform‚Äê
       ing various actions.  These functions take a pointer to a structure  as
       returned  by  [4mdbopen[24m,  and  sometimes  one or more pointers to key/data
       structures and a flag value.

       type   The type of the underlying access method (and file format).

       close  A pointer to a routine to flush any cached information to  disk,
              free  any allocated resources, and close the underlying file(s).
              Since key/data pairs may be cached in memory,  failing  to  sync
              the  file  with a [4mclose[24m or [4msync[24m function may result in inconsis‚Äê
              tent or lost information.  [4mClose[24m routines  return  ‚Äê1  on  error
              (setting [4merrno[24m) and 0 on success.

       del    A  pointer  to a routine to remove key/data pairs from the data‚Äê
              base.

              The parameter [4mflag[24m may be set to the following value:

              R_CURSOR
                     Delete the record referenced by the cursor.   The  cursor
                     must have previously been initialized.

              [4mDelete[24m  routines  return  ‚Äê1 on error (setting [4merrno[24m), 0 on suc‚Äê
              cess, and 1 if the specified [4mkey[24m was not in the file.

       fd     A pointer to a routine which returns a file descriptor represen‚Äê
              tative of the underlying database.  A file descriptor  referenc‚Äê
              ing  the  same file will be returned to all processes which call
              [4mdbopen[24m with the same [4mfile[24m name.  This  file  descriptor  may  be
              safely  used  as a argument to the [4mfcntl[24m(2) and [4mflock[24m(2) locking
              functions.  The file descriptor is  not  necessarily  associated
              with  any of the underlying files used by the access method.  No
              file descriptor is available for in memory databases.   [4mFd[24m  rou‚Äê
              tines  return ‚Äê1 on error (setting [4merrno[24m), and the file descrip‚Äê
              tor on success.

       get    A pointer to a routine which is  the  interface  for  keyed  re‚Äê
              trieval  from  the database.  The address and length of the data
              associated with the specified [4mkey[24m are returned in the  structure
              referenced  by  [4mdata[24m.   [4mGet[24m routines return ‚Äê1 on error (setting
              [4merrno[24m), 0 on success, and 1 if the [4mkey[24m was not in the file.

       put    A pointer to a routine to store key/data pairs in the database.

              The parameter [4mflag[24m may be set to one of the following values:

              R_CURSOR
                     Replace the key/data pair referenced by the cursor.   The
                     cursor must have previously been initialized.

              R_IAFTER
                     Append  the data immediately after the data referenced by
                     [4mkey[24m, creating a new key/data pair.  The record number  of
                     the  appended key/data pair is returned in the [4mkey[24m struc‚Äê
                     ture.  (Applicable only to the DB_RECNO access method.)

              R_IBEFORE
                     Insert the data immediately before the data referenced by
                     [4mkey[24m, creating a new key/data pair.  The record number  of
                     the  inserted key/data pair is returned in the [4mkey[24m struc‚Äê
                     ture.  (Applicable only to the DB_RECNO access method.)

              R_NOOVERWRITE
                     Enter the new key/data pair only if the key does not pre‚Äê
                     viously exist.

              R_SETCURSOR
                     Store the key/data pair, setting or initializing the  po‚Äê
                     sition  of  the cursor to reference it.  (Applicable only
                     to the DB_BTREE and DB_RECNO access methods.)

              R_SETCURSOR is available only for the DB_BTREE and DB_RECNO  ac‚Äê
              cess  methods  because it implies that the keys have an inherent
              order which does not change.

              R_IAFTER and R_IBEFORE are available only for the  DB_RECNO  ac‚Äê
              cess  method  because  they each imply that the access method is
              able to create new keys.  This is only true if the keys are  or‚Äê
              dered and independent, record numbers for example.

              The  default  behavior  of  the [4mput[24m routines is to enter the new
              key/data pair, replacing any previously existing key.

              [4mPut[24m routines return ‚Äê1 on error (setting [4merrno[24m), 0  on  success,
              and  1 if the R_NOOVERWRITE [4mflag[24m was set and the key already ex‚Äê
              ists in the file.

       seq    A pointer to a routine which is the interface for sequential re‚Äê
              trieval from the database.  The address and length  of  the  key
              are returned in the structure referenced by [4mkey[24m, and the address
              and  length of the data are returned in the structure referenced
              by [4mdata[24m.

              Sequential key/data pair retrieval may begin at  any  time,  and
              the  position  of the ‚Äò‚Äòcursor‚Äô‚Äô is not affected by calls to the
              [4mdel[24m, [4mget[24m, [4mput[24m, or [4msync[24m routines.  Modifications to the  database
              during  a  sequential  scan  will be reflected in the scan, i.e.
              records inserted behind the cursor will not  be  returned  while
              records inserted in front of the cursor will be returned.

              The flag value [1mmust [22mbe set to one of the following values:

              R_CURSOR
                     The  data  associated with the specified key is returned.
                     This differs from the [4mget[24m routines in  that  it  sets  or
                     initializes  the  cursor  to  the  location of the key as
                     well.  (Note, for the DB_BTREE  access  method,  the  re‚Äê
                     turned  key  is  not  necessarily  an exact match for the
                     specified key.  The returned  key  is  the  smallest  key
                     greater  than  or  equal to the specified key, permitting
                     partial key matches and range searches.)

              R_FIRST
                     The first key/data pair of the database is returned,  and
                     the cursor is set or initialized to reference it.

              R_LAST The  last  key/data pair of the database is returned, and
                     the cursor is set or initialized to reference  it.   (Ap‚Äê
                     plicable  only  to the DB_BTREE and DB_RECNO access meth‚Äê
                     ods.)

              R_NEXT Retrieve the key/data pair immediately after the  cursor.
                     If  the  cursor  is  not yet set, this is the same as the
                     R_FIRST flag.

              R_PREV Retrieve the key/data pair immediately before the cursor.
                     If the cursor is not yet set, this is  the  same  as  the
                     R_LAST  flag.   (Applicable  only  to  the  DB_BTREE  and
                     DB_RECNO access methods.)

              R_LAST and R_PREV  are  available  only  for  the  DB_BTREE  and
              DB_RECNO  access  methods  because they each imply that the keys
              have an inherent order which does not change.

              [4mSeq[24m routines return ‚Äê1 on error (setting [4merrno[24m),  0  on  success
              and  1  if there are no key/data pairs less than or greater than
              the specified or current key.  If the DB_RECNO access method  is
              being used, and if the database file is a character special file
              and  no complete key/data pairs are currently available, the [4mseq[0m
              routines return 2.

       sync   A pointer to a routine to flush any cached information to  disk.
              If  the  database is in memory only, the [4msync[24m routine has no ef‚Äê
              fect and will always succeed.

              The flag value may be set to the following value:

              R_RECNOSYNC
                     If the DB_RECNO access method is being  used,  this  flag
                     causes  the sync routine to apply to the btree file which
                     underlies the recno file,  not  the  recno  file  itself.
                     (See  the  [4mbfname[24m  field  of the [4mrecno[24m(3) manual page for
                     more information.)

              [4mSync[24m routines return ‚Äê1 on error (setting [4merrno[24m) and 0  on  suc‚Äê
              cess.

[1mKEY/DATA PAIRS[0m
       Access  to  all  file  types is based on key/data pairs.  Both keys and
       data are represented by the following data structure:

       typedef struct {
              void *data;
              size_t size;
       } DBT;

       The elements of the DBT structure are defined as follows:

       data   A pointer to a byte string.

       size   The length of the byte string.

       Key and data byte strings may reference strings of  essentially  unlim‚Äê
       ited  length although any two of them must fit into available memory at
       the same time.  It should be noted that the access methods  provide  no
       guarantees about byte string alignment.

[1mERRORS[0m
       The  [4mdbopen[24m routine may fail and set [4merrno[24m for any of the errors speci‚Äê
       fied for the library routines [4mopen[24m(2) and [4mmalloc[24m(3) or the following:

       [EFTYPE]
              A file is incorrectly formatted.

       [EINVAL]
              A parameter has been specified (hash function,  pad  byte  etc.)
              that  is  incompatible  with  the  current file specification or
              which is not meaningful for the function (for  example,  use  of
              the  cursor without prior initialization) or there is a mismatch
              between the version number of file and the software.

       The [4mclose[24m routines may fail and set [4merrno[24m for any of the errors  speci‚Äê
       fied  for the library routines [4mclose[24m(2), [4mread[24m(2), [4mwrite[24m(2), [4mfree[24m(3), or
       [4mfsync[24m(2).

       The [4mdel[24m, [4mget[24m, [4mput[24m and [4mseq[24m routines may fail and set [4merrno[24m  for  any  of
       the  errors  specified  for  the  library  routines  [4mread[24m(2), [4mwrite[24m(2),
       [4mfree[24m(3) or [4mmalloc[24m(3).

       The [4mfd[24m routines will fail and set [4merrno[24m to ENOENT for in  memory  data‚Äê
       bases.

       The  [4msync[24m  routines may fail and set [4merrno[24m for any of the errors speci‚Äê
       fied for the library routine [4mfsync[24m(2).

[1mSEE ALSO[0m
       [4mbtree[24m(3), [4mhash[24m(3), [4mmpool[24m(3), [4mrecno[24m(3)

[1mBUGS[0m
       The typedef DBT is a mnemonic for ‚Äò‚Äòdata base thang‚Äô‚Äô, and was used be‚Äê
       cause noone could think of a reasonable name that wasn‚Äôt already used.

       The file descriptor interface is a kluge and will be deleted in  a  fu‚Äê
       ture version of the interface.

       None of the access methods provide any form of concurrent access, lock‚Äê
       ing, or transactions.

4.4 Berkeley Distribution        May 24, 1993                        [4mDBOPEN[24m(3)
