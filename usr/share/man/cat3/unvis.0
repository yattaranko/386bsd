UNVIS(3)                    Library Functions Manual                  UNVIS(3)

[1mNAME[0m
       unvis, strunvis ‚Äî decode a visual representation of characters

[1mSYNOPSIS[0m
       [1m#include <vis.h>[0m

       [4mint[0m
       [1munvis[22m([4mu_char[24m [4m*cp[24m, [4mu_char[24m [4mc[24m, [4mint[24m [4m*astate[24m, [4mint[24m [4mflag[24m);

       [4mint[0m
       [1mstrunvis[22m([4mchar[24m [4m*dst[24m, [4mchar[24m [4m*src[24m);

[1mDESCRIPTION[0m
       The [1munvis[22m() and [1mstrunvis[22m() functions are used to decode a visual repre‚Äê
       sentation  of characters, as produced by the [4mvis[24m(3) function, back into
       the original form.  Unvis is called with successive characters in [4mc[24m un‚Äê
       til a valid sequence is recognized, at which time the decoded character
       is available at the character pointed to by [4mcp[24m.  Strunvis  decodes  the
       characters pointed to by [4msrc[24m into the buffer pointed to by [4mdst[24m.

       The  [1mstrunvis[22m()  function simply copies [4msrc[24m to [4mdst[24m, decoding any escape
       sequences along the way, and returns the number  of  characters  placed
       into  [4mdst[24m,  or -1 if an invalid escape sequence was detected.  The size
       of [4mdst[24m should be equal to the size of [4msrc[24m (that is, no expansion  takes
       place during decoding).

       The [1munvis[22m() function implements a state machine that can be used to de‚Äê
       code an arbitrary stream of bytes.  All state associated with the bytes
       being  decoded  is  stored  outside  the  [1munvis[22m()  function (that is, a
       pointer to the state is passed in), so calls decoding different streams
       can be freely intermixed.  To start decoding a stream of  bytes,  first
       initialize an integer to zero.  Call [1munvis[22m() with each successive byte,
       along  with  a pointer to this integer, and a pointer to an destination
       character.  The [4munvis[24m function has several return codes  that  must  be
       handled properly.  They are:

       [1m0 (zero)         [22mAnother  character is necessary; nothing has been rec‚Äê
                        ognized yet.

       UNVIS_VALID      A valid character has been recognized and is available
                        at the location pointed to by cp.

       UNVIS_VALIDPUSH  A valid character has been recognized and is available
                        at the location pointed to by cp; however, the charac‚Äê
                        ter currently passed in should be passed in again.

       UNVIS_NOCHAR     A valid sequence was detected, but  no  character  was
                        produced.  This return code is necessary to indicate a
                        logical break between characters.

       UNVIS_SYNBAD     An  invalid  esacpe  sequence was detected, or the de‚Äê
                        coder is in an unknown state.  The decoder  is  placed
                        into the starting state.

       When all bytes in the stream have been processed, call [1munvis[22m() one more
       time with flag set to UNVIS_END to extract any remaining character (the
       character passed in is ignored).

       The following code fragment illustrates a proper use of [1munvis[22m().

             int state = 0;
             char out;

             while ((ch = getchar()) != EOF) {
             again:
                     switch(unvis(&out, ch, &state, 0)) {
                     case 0:
                     case UNVIS_NOCHAR:
                             break;
                     case UNVIS_VALID:
                             (void) putchar(out);
                             break;
                     case UNVIS_VALIDPUSH:
                             (void) putchar(out);
                             goto again;
                     case UNVIS_SYNBAD:
                             (void)fprintf(stderr, "bad sequence!0);
                     exit(1);
                     }
             }
             if (unvis(&out, (char)0, &state, UNVIS_END) == UNVIS_VALID)
                     (void) putchar(out);

[1mSEE ALSO[0m
       [4mvis[24m(1)

[1mHISTORY[0m
       The [1munvis[22m() function is currently under development.

FreeBSD 13.2                    April 19, 1991                        UNVIS(3)
