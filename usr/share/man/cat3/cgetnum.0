GETCAP(3)                   Library Functions Manual                 GETCAP(3)

[1mNAME[0m
       cgetent,  cgetset,  cgetmatch,  cgetcap,  cgetnum,  cgetstr,  cgetustr,
       cgetfirst, cgetnext, cgetclose — capability database access routines

[1mSYNOPSIS[0m
       [1m#include <stdlib.h>[0m

       [4mint[0m
       [1mcgetent[22m([4mchar[24m [4m**buf[24m, [4mchar[24m [4m**db_array[24m, [4mchar[24m [4m*name[24m);

       [4mint[0m
       [1mcgetset[22m([4mchar[24m [4m*ent[24m);

       [4mint[0m
       [1mcgetmatch[22m([4mchar[24m [4m*buf[24m, [4mchar[24m [4m*name[24m);

       [4mchar[24m [4m*[0m
       [1mcgetcap[22m([4mchar[24m [4m*buf[24m, [4mchar[24m [4m*cap[24m, [4mchar[24m [4mtype[24m);

       [4mint[0m
       [1mcgetnum[22m([4mchar[24m [4m*buf[24m, [4mchar[24m [4m*cap[24m, [4mlong[24m [4m*num[24m);

       [4mint[0m
       [1mcgetstr[22m([4mchar[24m [4m*buf[24m, [4mchar[24m [4m*cap[24m, [4mchar[24m [4m**str[24m);

       [4mint[0m
       [1mcgetustr[22m([4mchar[24m [4m*buf[24m, [4mchar[24m [4m*cap[24m, [4mchar[24m [4m**str[24m);

       [4mint[0m
       [1mcgetfirst[22m([4mchar[24m [4m**buf[24m, [4mchar[24m [4m**db_array[24m);

       [4mint[0m
       [1mcgetnext[22m([4mchar[24m [4m**buf[24m, [4mchar[24m [4m**db_array[24m);

       [4mint[0m
       [1mcgetclose[22m([4mvoid[24m);

[1mDESCRIPTION[0m
       [1mCgetent[22m() extracts the capability rec [4mname[24m from the database  specified
       by  the  NULL terminated file array [4mdb_array[24m and returns a pointer to a
       [4mmalloc[24m’d copy of it in [4mbuf[24m.  [1mCgetent [22mwill first look for  files  ending
       in  [1m.db [22m(see [4mcap_mkdb[24m(1)) before accessing the ASCII file.  [4mBuf[24m must be
       retained  through  all  subsequent  calls  to  [1mcgetmatch[22m(),  [1mcgetcap[22m(),
       [1mcgetnum[22m(),  [1mcgetstr[22m(),  and [1mcgetustr[22m(), but may then be [4mfree[24m’d. On suc‐
       cess 0 is returned, 1 if the returned record contains an unresolved  [1mtc[0m
       expansion, -1 if the requested record couldn’t be found, -2 if a system
       error  was  encountered  (couldn’t open/read a file, etc.) also setting
       [4merrno[24m, and -3 if a potential reference loop is detected (see  [1mtc=  [22mcom‐
       ments below).

       [1mCgetset  [22menables the addition of a character buffer containing a single
       capability record entry to the capability database.  Conceptually,  the
       entry  is added as the first ‘‘file’’ in the database, and is therefore
       searched first on the call to [1mcgetent[22m.  The entry is passed in [4ment[24m.  If
       [4ment[24m is NULL, the current entry is removed from the  database.   [1mCgetset[0m
       must  precede  the  database  traversal.   It must be called before the
       [1mcgetent [22mcall. If a sequential access is being performed (see below), it
       must be called before the first sequential access call (  [1mcgetfirst  [22mor
       [1mcgetnext  [22m), or be directly preceded by a [1mcgetclose [22mcall.  On success 0
       is returned and -1 on failure.

       [1mCgetmatch [22mwill return 0 if [4mname[24m is one of the names of  the  capability
       record [4mbuf[24m, -1 if not.

       [1mCgetcap  [22msearches the capability record [4mbuf[24m for the capability [4mcap[24m with
       type [4mtype[24m.  A [4mtype[24m is specified using any single character.  If a colon
       (‘:’) is used, an untyped capability will be searched  for  (see  below
       for explanation of types).  A pointer to the value of [4mcap[24m in [4mbuf[24m is re‐
       turned  on success, NULL if the requested capability couldn’t be found.
       The end of the capability value is signaled by a ‘:’ or ASCII NUL  (see
       below for capability database syntax).

       [1mCgetnum  [22mretrieves the value of the numeric capability [4mcap[24m from the ca‐
       pability record pointed to by [4mbuf[24m.  The numeric value  is  returned  in
       the  [4mlong[24m  pointed  to by [4mnum[24m.  0 is returned on success, -1 if the re‐
       quested numeric capability couldn’t be found.

       [1mCgetstr [22mretrieves the value of the string capability [4mcap[24m from the capa‐
       bility record pointed to by [4mbuf[24m.  A pointer to a  decoded,  NUL  termi‐
       nated, [4mmalloc[24m’d copy of the string is returned in the [4mchar[24m [4m*[24m pointed to
       by  [4mstr[24m.   The number of characters in the decoded string not including
       the trailing NUL is returned on success, -1 if the requested string ca‐
       pability couldn’t be found, -2 if a system error was encountered (stor‐
       age allocation failure).

       [1mCgetustr [22mis identical to [1mcgetstr [22mexcept that it does not expand special
       characters, but rather returns each character of the capability  string
       literally.

       [1mCgetfirst[22m,  [1mcgetnext[22m,  comprise  a function group that provides for se‐
       quential access of the NULL pointer terminated  array  of  file  names,
       [4mdb_array[24m.   [1mCgetfirst  [22mreturns the first record in the database and re‐
       sets the access to the first record.  [1mCgetnext [22mreturns the next  record
       in  the  database  with  respect to the record returned by the previous
       [1mcgetfirst [22mor [1mcgetnext [22mcall.  If there is no  such  previous  call,  the
       first record in the database is returned.  Each record is returned in a
       [4mmalloc[24m’d  copy  pointed  to by [4mbuf[24m.  [1mTc [22mexpansion is done (see [1mtc= [22mcom‐
       ments below).  Upon completion of the database 0 is returned,  1 is re‐
       turned upon successful return of record with  possibly  more  remaining
       (we  haven’t reached the end of the database yet), 2 is returned if the
       record contains an unresolved [1mtc [22mexpansion, -1 is returned if an system
       error occured, and -2 is returned if a potential reference loop is  de‐
       tected  (see  [1mtc=  [22mcomments below).  Upon completion of database (0 re‐
       turn) the database is closed.

       [1mCgetclose [22mcloses the sequential access and frees any  memory  and  file
       descriptors  being used.  Note that it does not erase the buffer pushed
       by a call to [1mcgetset[22m.

[1mCAPABILITY DATABASE SYNTAX[0m
       Capability databases are normally ASCII and may be edited with standard
       text editors.  Blank lines and lines beginning with a ‘#’ are  comments
       and  are  ignored.  Lines ending with a ‘\’ indicate that the next line
       is a continuation of the current line; the ‘\’  and  following  newline
       are  ignored.   Long  lines are usually continued onto several physical
       lines by ending each line except the last with a ‘\’.

       Capability databases consist of a series of records,  one  per  logical
       line.   Each  record contains a variable number of ‘:’‐separated fields
       (capabilities).  Empty fields consisting entirely of white space  char‐
       acters (spaces and tabs) are ignored.

       The  first  capability of each record specifies its names, separated by
       ‘|’ characters.  These names are used to reference records in the data‐
       base.  By convention, the last name is usually a comment and is not in‐
       tended as a lookup tag.  For example, the [4mvt100[24m record from the [1mtermcap[0m
       database begins:

             [1md0|vt100|vt100‐am|vt100am|dec vt100:[0m

       giving four names that can be used to access the record.

       The remaining non‐empty capabilities describe a set  of  (name,  value)
       bindings, consisting of a names optionally followed by a typed values:

       name          typeless [boolean] capability [4mname[24m is present [true]
       name[4mT[24mvalue    capability ([4mname[24m, [4mT[24m) has value [4mvalue[0m
       name@         no capability [4mname[24m exists
       name[4mT[24m@        capability ([4mname[24m, [4mT[24m) does not exist

       Names consist of one or more characters.  Names may contain any charac‐
       ter except ‘:’, but it’s usually best to restrict them to the printable
       characters  and  avoid  use  of  graphics like ‘#’, ‘=’, ‘%’, ‘@’, etc.
       Types are single characters used  to  separate  capability  names  from
       their  associated  typed  values.   Types may be any character except a
       ‘:’.  Typically, graphics like ‘#’, ‘=’, ‘%’, etc.  are  used.   Values
       may  be  any  number of characters and may contain any character except
       ‘:’.

[1mCAPABILITY DATABASE SEMANTICS[0m
       Capability records describe a set of (name, value) bindings.  Names may
       have multiple values bound to them.  Different values for  a  name  are
       distinguished by their [4mtypes[24m.  [1mCgetcap [22mwill return a pointer to a value
       of a name given the capability name and the type of the value.

       The  types  ‘#’  and  ‘=’ are conventionally used to denote numeric and
       string typed values, but no restriction on  those  types  is  enforced.
       The  functions  [1mcgetnum [22mand [1mcgetstr [22mcan be used to implement the tradi‐
       tional syntax and semantics of ‘#’ and ‘=’.  Typeless capabilities  are
       typically used to denote boolean objects with presence or absence indi‐
       cating  truth  and  false  values respectively.  This interpretation is
       conveniently represented by:

             [1m(getcap(buf, name, ’:’) != NULL)[0m

       A special capability, [1mtc= name[22m, is used to  indicate  that  the  record
       specified  by [4mname[24m should be substituted for the [1mtc [22mcapability.  [1mTc [22mca‐
       pabilities may interpolate records which also contain  [1mtc  [22mcapabilities
       and  more  than one [1mtc [22mcapability may be used in a record.  A [1mtc [22mexpan‐
       sion scope (i.e., where the argument is searched for) contains the file
       in which the [1mtc [22mis declared and all subsequent files in the file array.

       When a database is searched for a capability record, the first matching
       record in the search is returned.  When an record is scanned for a  ca‐
       pability,  the  first  matching  capability is returned; the capability
       [1m:nameT@: [22mwill hide any following definition of a value of  type  [4mT[24m  for
       [4mname[24m;  and  the capability [1m:name@: [22mwill prevent any following values of
       [4mname[24m from being seen.

       These features combined with [1mtc [22mcapabilities can be  used  to  generate
       variations of other databases and records by either adding new capabil‐
       ities, overriding definitions with new definitions, or hiding following
       definitions via ‘@’ capabilities.

[1mEXAMPLES[0m
             example|an example of binding multiple values to names:\
                  :foo%bar:fooˆblah:foo@:\
                  :abc%xyz:abcˆfrap:abc$@:\
                  :tc=more:

       The capability foo has two values bound to it (bar of type ‘%’ and blah
       of  type  ‘ˆ’) and any other value bindings are hidden.  The capability
       abc also has two values bound but only a value of type ‘$’ is prevented
       from being defined in the capability record more.

             file1:
                  new|new_record|a modification of "old":\
                       :fript=bar:who‐cares@:tc=old:blah:tc=extensions:
             file2:
                  old|old_record|an old database record:\
                       :fript=foo:who‐cares:glork#200:

       The records are extracted  by  calling  [1mcgetent  [22mwith  file1  preceding
       file2.   In the capability record new in file1, fript=bar overrides the
       definition of fript=foo interpolated from the capability record old  in
       file2,  who‐cares@ prevents the definition of any who‐cares definitions
       in old from being seen, glork#200 is inherited from old, and  blah  and
       anything defined by the record extensions is added to those definitions
       in old.  Note that the position of the fript=bar and who‐cares@ defini‐
       tions before tc=old is important here.  If they were after, the defini‐
       tions in old would take precedence.

[1mCGETNUM AND CGETSTR SYNTAX AND SEMANTICS[0m
       Two types are predefined by [1mcgetnum [22mand [1mcgetstr[22m:

       [4mname[24m#[4mnumber[24m    numericcapability [4mname[24mhas value [4mnumber[0m
       [4mname[24m=[4mstring[24m    string capability[4mname[24mhas value [4mstring[0m
       [4mname[24m#@         the numeric capability[4mname[24mdoes not exist
       [4mname[24m=@         the string capability[4mname[24mdoes not exist

       Numeric  capability  values may be given in one of three numeric bases.
       If the number starts with either ‘0x’or  ‘0X’it  is  interpreted  as  a
       hexadecimal number (both upper and lower case a‐f may be used to denote
       the extended hexadecimal digits).  Otherwise, if the number starts with
       a ‘0’it is interpreted as an octal number.  Otherwise the number is in‐
       terpreted as a decimal number.

       String  capability  values  may  contain  any character.  Non‐printable
       ASCIIcodes, new lines, and colons may be  conveniently  represented  by
       the use of escape sequences:

       ˆX        (’[4mX[24m’ & 037)          control‐[4mX[0m
       \b, \B    (ASCII 010)          backspace
       \t, \T    (ASCII 011)          tab
       \n, \N    (ASCII 012)          line feed (newline)
       \f, \F    (ASCII 014)          form feed
       \r, \R    (ASCII 015)          carriage return
       \e, \E    (ASCII 027)          escape
       \c, \C    (:)                  colon
       \\        (\)                  back slash
       \ˆ        (ˆ)                  caret
       \[4mnnn[24m      (ASCII octal [4mnnn[24m)

       A  ‘\’  may  be followed by up to three octal digits directly specifies
       the numeric code for a character.  The use  of  ASCIINULs,while  easily
       encoded,  causes all sorts of problems and must be used with care since
       NULsare typically used to denote the end of strings; many  applications
       use ‘\200’ to represent a NUL.

[1mDIAGNOSTICS[0m
       [1mCgetent[22m,[1mcgetset[22m,[1mcgetmatch[22m,[1mcgetnum[22m,[1mcgetstr[22m,[1mcgetustr[22m,[1mcgetfirst[22m,and
       [1mcgetnext[22mreturn  a  a  value greater than or equal to 0 on success and a
       value less than 0 on failure.  [1mCgetcap[22mreturns a  character  pointer  on
       success and a NULLon failure.

       [1mCgetent[22m,and  [1mcgetseq[22mmay  fail and set [4merrno[24mfor any of the errors speci‐
       fied  for   the   library   functions:   [4mfopen[24m(2),[4mfclose[24m(2),[4mopen[24m(2),and
       [4mclose[24m(2).

       [1mCgetent[22m,[1mcgetset[22m,[1mcgetstr[22m,and [1mcgetustr[22mmay fail and set [4merrno[24mas follows:

       [ENOMEM]           No memory to allocate.

[1mSEEALSO[0m
       [4mcap_mkdb[24m(1),[4mmalloc[24m(3)

[1mBUGS[0m
       Colons (‘:’) can’t be used in names, types, or values.

       There are no checks for [1mtc=name[22mloops in [1mcgetent[22m.

       The  buffer  added to the database by a call to [1mcgetset[22mis not unique to
       the database but is rather prepended to any database used.

FreeBSD 13.2                    August 11, 1992                      GETCAP(3)
