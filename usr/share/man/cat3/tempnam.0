TMPFILE(3)                  Library Functions Manual                TMPFILE(3)

[1mNAME[0m
       tempnam, tmpfile, tmpnam ‚Äî temporary file routines

[1mSYNOPSIS[0m
       [1m#include <stdio.h>[0m

       [4mFILE[24m [4m*[0m
       [1mtmpfile[22m([4mvoid[24m);

       [4mchar[24m [4m*[0m
       [1mtmpnam[22m([4mchar[24m [4m*str[24m);

       [4mchar[24m [4m*[0m
       [1mtempnam[22m([4mconst[24m [4mchar[24m [4m*tmpdir[24m, [4mconst[24m [4mchar[24m [4m*prefix[24m);

[1mDESCRIPTION[0m
       The  [1mtmpfile[22m() function returns a pointer to a stream associated with a
       file descriptor returned by the routine [4mmkstemp[24m(3).  The  created  file
       is  unlinked before [1mtmpfile[22m() returns, causing the file to be automati‚Äê
       cally deleted when the last reference to it is  closed.   The  file  is
       opened with the access value ‚Äòw+‚Äô.

       The [1mtmpnam[22m() function returns a pointer to a file name, in the P_tmpdir
       directory,  which did not reference an existing file at some indetermi‚Äê
       nate point in the past.   P_tmpdir  is  defined  in  the  include  file
       ‚ü®[4mstdio.h[24m‚ü©.   If  the argument [4ms[24m is non‚ÄêNULL, the file name is copied to
       the buffer it references.  Otherwise, the file name is copied to a sta‚Äê
       tic buffer.  In either case, [1mtmpnam[22m() returns a  pointer  to  the  file
       name.

       The buffer referenced by [4ms[24m is expected to be at least L_tmpnam bytes in
       length.  L_tmpnam is defined in the include file ‚ü®[4mstdio.h[24m‚ü©.

       The [1mtempnam[22m() function is similar to [1mtmpnam[22m(), but provides the ability
       to  specify the directory which will contain the temporary file and the
       file name prefix.

       The  environment  variable  TMPDIR  (if  set),  the  argument  [4mdir[24m  (if
       non‚ÄêNULL), the directory P_tmpdir, and the directory [4m/tmp[24m are tried, in
       the listed order, as directories in which to store the temporary file.

       The  argument  [4mprefix[24m, if non‚ÄêNULL, is used to specify a file name pre‚Äê
       fix, which will be the first part of the created file name.   [1mTempnam[22m()
       allocates  memory in which to store the file name; the returned pointer
       may be used as a subsequent argument to [4mfree[24m(3).

[1mRETURN VALUES[0m
       The [1mtmpfile[22m() function returns a pointer to an open file stream on suc‚Äê
       cess, and a NULL pointer on error.

       The [1mtmpnam[22m() and [1mtempfile[22m() functions return a pointer to a  file  name
       on success, and a NULL pointer on error.

[1mERRORS[0m
       The  [1mtmpfile[22m()  function may fail and set the global variable [4merrno[24m for
       any of the errors specified for  the  library  functions  [4mfdopen[24m(3)  or
       [4mmkstemp[24m(3).

       The  [1mtmpnam[22m()  function  may  fail  and set [4merrno[24m for any of the errors
       specified for the library function [4mmktemp[24m(3).

       The [1mtempnam[22m() function may fail and set [4merrno[24m for  any  of  the  errors
       specified for the library functions [4mmalloc[24m(3) or [4mmktemp[24m(3).

[1mSEE ALSO[0m
       [4mmkstemp[24m(3), [4mmktemp[24m(3)

[1mSTANDARDS[0m
       The  [1mtmpfile[22m()  and  [1mtmpnam[22m()  functions  conform  to  ANSI X3.159‚Äê1989
       (‚ÄúANSI C89‚Äù).

[1mBUGS[0m
       These interfaces are provided for System V and ANSI compatibility only.
       The [4mmkstemp[24m(3) interface is strongly preferred.

       There are four important problems with these  interfaces  (as  well  as
       with  the  historic  [4mmktemp[24m(3)  interface).  First, there is an obvious
       race between file name selection and file creation and deletion.   Sec‚Äê
       ond,  most  historic  implementations  provide only a limited number of
       possible temporary file names (usually 26) before file names will start
       being recycled.  Third, the System V implementations of these functions
       (and of [4mmktemp[24m) use the [4maccess[24m(2) function to determine whether or  not
       the  temporary file may be created.  This has obvious ramifications for
       setuid or setgid programs, complicating the portable use of  these  in‚Äê
       terfaces  in  such programs.  Finally, there is no specification of the
       permissions with which the temporary files are created.

       This implementation does not have these flaws,  but  portable  software
       cannot  depend  on that.  In particular, the [1mtmpfile[22m() interface should
       not be used in software expected to be used on other systems  if  there
       is any possibility that the user does not wish the temporary file to be
       publicly readable and writable.

FreeBSD 13.2                     June 29, 1991                      TMPFILE(3)
