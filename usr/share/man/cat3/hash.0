[4mHASH[24m(3)                    Library Functions Manual                    [4mHASH[24m(3)

[1mNAME[0m
       hash - hash database access method

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <db.h>[0m

[1mDESCRIPTION[0m
       The  routine [4mdbopen[24m is the library interface to database files.  One of
       the supported file formats is hash files.  The general  description  of
       the database access methods is in [4mdbopen[24m(3), this manual page describes
       only the hash specific information.

       The hash data structure is an extensible, dynamic hashing scheme.

       The access method specific data structure provided to [4mdbopen[24m is defined
       in the <db.h> include file as follows:

       typedef struct {
              int bsize;
              int cachesize;
              int ffactor;
              u_long (*hash)(const void *, size_t);
              int lorder;
              int nelem;
       } HASHINFO;

       The elements of this structure are as follows:

       bsize  [4mBsize[24m  defines  the  hash table bucket size, and is, by default,
              256 bytes.  It may be preferable to increase the page  size  for
              disk‚Äêresident tables and tables with large data items.

       cachesize
              A  suggested  maximum size, in bytes, of the memory cache.  This
              value is [1monly [22madvisory, and the access method will allocate more
              memory rather than fail.

       ffactor
              [4mFfactor[24m indicates a desired density within the hash  table.   It
              is  an approximation of the number of keys allowed to accumulate
              in any one bucket, determining when  the  hash  table  grows  or
              shrinks.  The default value is 8.

       hash   [4mHash[24m  is  a  user defined hash function.  Since no hash function
              performs equally well on all possible data, the  user  may  find
              that the built‚Äêin hash function does poorly on a particular data
              set.   User  specified hash functions must take two arguments (a
              pointer to a byte string and a length) and return an  u_long  to
              be used as the hash value.

       lorder The  byte  order  for  integers in the stored database metadata.
              The number should represent the order as an integer;  for  exam‚Äê
              ple, big endian order would be the number 4,321.  If [4mlorder[24m is 0
              (no  order is specified) the current host order is used.  If the
              file already exists, the specified  value  is  ignored  and  the
              value specified when the tree was created is used.

       nelem  [4mNelem[24m  is  an  estimate of the final size of the hash table.  If
              not set or set too low, hash tables will  expand  gracefully  as
              keys  are entered, although a slight performance degradation may
              be noticed.  The default value is 1.

       If the file already exists (and the O_TRUNC flag is not specified), the
       values specified for the parameters bsize, ffactor,  lorder  and  nelem
       are  ignored  and  the  values  specified when the tree was created are
       used.

       If a hash function is specified, [4mhash_open[24m will attempt to determine if
       the hash function specified is the same as the one with which the data‚Äê
       base was created, and will fail if it is not.

       Backward compatible interfaces to the routines described in [4mdbm[24m(3), and
       [4mndbm[24m(3) are provided, however, these interfaces are not compatible with
       previous file formats.

[1mSEE ALSO[0m
       [4mbtree[24m(3), [4mdbopen[24m(3), [4mmpool[24m(3), [4mrecno[24m(3)
       [4mDynamic[24m [4mHash[24m [4mTables[24m, Per‚ÄêAke Larson, Communications of the  ACM,  April
       1988.
       [4mA[24m  [4mNew[24m [4mHash[24m [4mPackage[24m [4mfor[24m [4mUNIX[24m, Margo Seltzer, USENIX Proceedings, Winter
       1991.

[1mBUGS[0m
       Only big and little endian byte order is supported.

4.4 Berkeley Distribution        June 6, 1993                          [4mHASH[24m(3)
