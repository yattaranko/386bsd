RANDOM(3)                   Library Functions Manual                 RANDOM(3)

[1mNAME[0m
       random,  srandom, initstate, setstate ‚Äî better random number generator;
       routines for changing generators

[1mSYNOPSIS[0m
       [1m#include <stdlib>[0m

       [4mlong[0m
       [1mrandom[22m([4mvoid[24m);

       [4mvoid[0m
       [1msrandom[22m([4munsigned[24m [4mseed[24m);

       [4mchar[24m [4m*[0m
       [1minitstate[22m([4munsigned[24m [4mseed[24m, [4mchar[24m [4m*state[24m, [4mint[24m [4mn[24m);

       [4mchar[24m [4m*[0m
       [1msetstate[22m([4mchar[24m [4m*state[24m);

[1mDESCRIPTION[0m
       The [1mrandom[22m() function uses a non‚Äêlinear additive feedback random number
       generator employing a default table of size 31 long integers to  return
       successive pseudo‚Äêrandom numbers in the range from 0 to (2**31)‚àí1.  The
       period  of  this  random  number generator is very large, approximately
       16*((2**31)‚àí1).

       The [1mrandom[22m()/ [1msrandom[22m() have (almost) the  same  calling  sequence  and
       initialization properties as [4mrand[24m(3)/ [4msrand[24m(3).  The difference is that
       [4mrand[24m produces a much less random sequence ‚Äî in fact, the low dozen bits
       generated  by rand go through a cyclic pattern.  All the bits generated
       by [1mrandom[22m() are usable.  For example, ‚Äò[1mrandom()&01[22m‚Äô will produce a ran‚Äê
       dom binary value.

       Unlike [4msrand[24m, [1msrandom[22m() does not return the old seed;  the  reason  for
       this  is  that the amount of state information used is much more than a
       single word.  (Two other routines are provided to  deal  with  restart‚Äê
       ing/changing   random   number  generators).   Like  [4mrand[24m(3),  however,
       [1mrandom[22m() will by default produce a sequence of numbers that can be  du‚Äê
       plicated by calling [1msrandom[22m() with ‚Äò1‚Äô as the seed.

       The [1minitstate[22m() routine allows a state array, passed in as an argument,
       to  be  initialized  for  future  use.  The size of the state array (in
       bytes) is used by [1minitstate[22m() to decide how sophisticated a random num‚Äê
       ber generator it should use ‚Äî the more state,  the  better  the  random
       numbers will be.  (Current "optimal" values for the amount of state in‚Äê
       formation  are  8,  32,  64,  128, and 256 bytes; other amounts will be
       rounded down to the nearest known amount.  Using less than 8 bytes will
       cause an error.)  The seed for the initialization  (which  specifies  a
       starting  point  for  the  random  number  sequence,  and  provides for
       restarting at the same point) is also  an  argument.   The  [1minitstate[22m()
       function returns a pointer to the previous state information array.

       Once  a state has been initialized, the [1msetstate[22m() routine provides for
       rapid switching between states.   The  [1msetstate[22m()  function  returns  a
       pointer  to  the previous state array; its argument state array is used
       for further random number generation until the next call to [1minitstate[22m()
       or [1msetstate[22m().

       Once a state array has been initialized, it may be restarted at a  dif‚Äê
       ferent  point either by calling [1minitstate[22m() (with the desired seed, the
       state array, and its size) or by  calling  both  [1msetstate[22m()  (with  the
       state  array)  and [1msrandom[22m() (with the desired seed).  The advantage of
       calling both [1msetstate[22m() and [1msrandom[22m() is that the size of the state ar‚Äê
       ray does not have to be remembered after it is initialized.

       With 256 bytes of state information, the period of  the  random  number
       generator  is  greater  than  2**69 which should be sufficient for most
       purposes.

[1mAUTHOR[0m
       Earl T. Cohen

[1mDIAGNOSTICS[0m
       If [1minitstate[22m() is called with less than 8 bytes of  state  information,
       or  if  [1msetstate[22m() detects that the state information has been garbled,
       error messages are printed on the standard error output.

[1mSEE ALSO[0m
       [4mrand[24m(3)

[1mHISTORY[0m
       These functions appeared in 4.2BSD.

[1mBUGS[0m
       About 2/3 the speed of [4mrand[24m(3).

4.2 Berkeley Distribution       April 19, 1991                       RANDOM(3)
