VIS(3)                      Library Functions Manual                    VIS(3)

[1mNAME[0m
       vis — visually encode characters

[1mSYNOPSIS[0m
       [1m#include <vis.h>[0m

       [4mchar[24m [4m*[0m
       [1mvis[22m([4mchar[24m [4m*dst[24m, [4mchar[24m [4mc[24m, [4mint[24m [4mflag[24m, [4mchar[24m [4mnextc[24m);

       [4mint[0m
       [1mstrvis[22m([4mchar[24m [4m*dst[24m, [4mchar[24m [4m*src[24m, [4mint[24m [4mflag[24m);

       [4mint[0m
       [1mstrvisx[22m([4mchar[24m [4m*dst[24m, [4mchar[24m [4m*src[24m, [4mint[24m [4mlen[24m, [4mint[24m [4mflag[24m);

[1mDESCRIPTION[0m
       The  [1mvis[22m() function copies into [4mdst[24m a string which represents the char‐
       acter [4mc[24m.  If [4mc[24m needs no encoding,  it  is  copied  in  unaltered.   The
       string  is  null  terminated, and a pointer to the end of the string is
       returned.  The maximum length of any encoding is four  characters  (not
       including  the  trailing NULL); thus, when encoding a set of characters
       into a buffer, the size of the buffer should be four times  the  number
       of  characters encoded, plus one for the trailing NULL.  The flag para‐
       meter is used for altering the default range of  characters  considered
       for  encoding  and  for  altering the visual representation.  The addi‐
       tional character, [4mnextc[24m, is only used when selecting the VIS_CSTYLE en‐
       coding format (explained below).

       The [1mstrvis[22m() and [1mstrvisx[22m() functions copy into [4mdst[24m a visual representa‐
       tion of the string [4msrc[24m.  The [1mstrvis[22m() function encodes characters  from
       [4msrc[24m  up  to the first NULL.  The [1mstrvisx[22m() function encodes exactly [4mlen[0m
       characters from [4msrc[24m (this is useful for encoding a block of  data  that
       may  contain  NULL’s).  Both forms NULL terminate [4mdst[24m.  The size of [4mdst[0m
       must be four times the number of characters encoded from [4msrc[24m (plus  one
       for  the NULL).  Both forms return the number of characters in dst (not
       including the trailing NULL).

       The encoding is a unique, invertible representation comprised  entirely
       of  graphic  characters;  it can be decoded back into the original form
       using the [4munvis[24m(3) or [4mstrunvis[24m(3) functions.

       There are two parameters that can be controlled: the range  of  charac‐
       ters  that  are  encoded,  and the type of representation used.  By de‐
       fault, all non‐graphic characters.  except space, tab, and newline  are
       encoded.  (See [4misgraph[24m(3).)  The following flags alter this:

       VIS_SP      Also encode space.

       VIS_TAB
                   Also encode tab.

       VIS_NL      Also encode newline.

       VIS_WHITE   Synonym for VIS_SP | VIS_TAB | VIS_NL.

       VIS_SAFE    Only  encode  "unsafe"  characters.   Unsafe  means control
                   characters which may cause common terminals to perform  un‐
                   expected functions.  Currently this form allows space, tab,
                   newline,  backspace,  bell, and return ‐ in addition to all
                   graphic characters ‐ unencoded.

       There are three forms of encoding.  All forms use the backslash charac‐
       ter ‘\’ to introduce a special sequence; two backslashes  are  used  to
       represent a real backslash.  These are the visual formats:

       (default)   Use  an  ‘M’  to represent meta characters (characters with
                   the 8th bit set), and use carat ‘ˆ’  to  represent  control
                   characters  see  ([4miscntrl[24m(3)).   The  following formats are
                   used:

                   \ˆC    Represents the control character ‘C’.  Spans charac‐
                          ters ‘\000’ through ‘\037’, and ‘\177’ (as ‘\ˆ?’).

                   \M‐C   Represents character  ‘C’  with  the  8th  bit  set.
                          Spans characters ‘\241’ through ‘\376’.

                   \MˆC   Represents  control  character  ‘C’ with the 8th bit
                          set.  Spans characters ‘\200’  through  ‘\237’,  and
                          ‘\377’ (as ‘\Mˆ?’).

                   \040   Represents ASCII space.

                   \240   Represents Meta‐space.

       VIS_CSTYLE  Use  C‐style backslash sequences to represent standard non‐
                   printable characters.  The following sequences are used  to
                   represent the indicated characters:

                         [1m\a [22m‐ BEL (007)
                         [1m\b [22m‐ BS (010)
                         [1m\f [22m‐ NP (014)
                         [1m\n [22m‐ NL (012)
                         [1m\r [22m‐ CR (015)
                         [1m\t [22m‐ HT (011)
                         [1m\v [22m‐ VT (013)
                         [1m\0 [22m‐ NUL (000)

                   When using this format, the nextc parameter is looked at to
                   determine  if  a  NULL character can be encoded as ‘\0’ in‐
                   stead of ‘\000’.  If [4mnextc[24m is an octal  digit,  the  latter
                   representation is used to avoid ambiguity.

       VIS_OCTAL   Use a three digit octal sequence.  The form is ‘\ddd’ where
                   [4md[24m represents an octal digit.

       There  is one additional flag, VIS_NOSLASH, which inhibits the doubling
       of backslashes and the backslash before the default  format  (that  is,
       control  characters  are  represented  by  ‘ˆC’  and meta characters as
       ‘M‐C’).  With this flag set, the encoding is ambiguous and  non‐invert‐
       ible.

[1mSEE ALSO[0m
       [4munvis[24m(1), [4munvis[24m(3) [4mstrunvis[24m(3)

[1mHISTORY[0m
       These functions are currently under development.

FreeBSD 13.2                    April 19, 1991                          VIS(3)
