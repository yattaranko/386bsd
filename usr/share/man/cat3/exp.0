EXP(3)                      Library Functions Manual                    EXP(3)

[1mNAME[0m
       exp,  expm1,  log,  log10,  log1p,  pow ‚Äî exponential, logarithm, power
       functions

[1mSYNOPSIS[0m
       [1m#include <math.h>[0m

       [4mdouble[0m
       [1mexp[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mexpm1[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mlog[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mlog10[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mlog1p[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mpow[22m([4mdouble[24m [4mx[24m, [4mdouble[24m [4my[24m);

[1mDESCRIPTION[0m
       The [1mexp[22m() function computes the exponential value of the given argument
       [4mx[24m.

       The [1mexpm1[22m() function computes the value exp(x)-1  accurately  even  for
       tiny argument [4mx[24m.

       The  [1mlog[22m() function computes the value for the natural logarithm of the
       argument x.

       The [1mlog10[22m() function computes the value for the logarithm of argument [4mx[0m
       to base 10.

       The [1mlog1p[22m() function computes the value of log(1+x) accurately even for
       tiny argument [4mx[24m.

       The [1mpow[22m() computes the value of [4mx[24m to the exponent [4my[24m.

[1mERROR (due to Roundoff etc.)[0m
       exp(x), log(x), expm1(x) and log1p(x) are accurate to within an [4mup[24m, and
       log10(x) to within about 2 [4mups[24m; an [4mup[24m is one [4mUnit[24m in  the  [4mLast[24m  [4mPlace[24m.
       The  error in [1mpow[22m([4mx[24m, [4my[24m) is below about 2 [4mups[24m when its magnitude is mod‚Äê
       erate, but increases as [1mpow[22m([4mx[24m, [4my[24m) approaches the over/underflow thresh‚Äê
       olds until almost as many bits could be lost as  are  occupied  by  the
       floating-point format‚Äôs exponent field; that is 8 bits for VAX D and 11
       bits  for  IEEE  754  Double.  No such drastic loss has been exposed by
       testing; the worst errors observed have been below 20 [4mups[24m  for  VAX  D,
       300  [4mups[24m  for  IEEE  754 Double.  Moderate values of [1mpow[22m() are accurate
       enough that [1mpow[22m([4minteger[24m, [4minteger[24m) is exact  until  it  is  bigger  than
       2**56 on a VAX, 2**53 for IEEE 754.

[1mRETURN VALUES[0m
       These  functions will return the approprate computation unless an error
       occurs or an argument is out of range.  The  functions  [1mexp[22m(),  [1mexpm1[22m()
       and  [1mpow[22m()  detect  if the computed value will overflow, set the global
       variable [4merrno[24m [4mto[24m RANGE and cause a reserved operand fault on a VAX  or
       Tahoe.   The  function [1mpow[22m([4mx[24m, [4my[24m) checks to see if [4mx[24m < 0 and [4my[24m is not an
       integer, in the event this is true, the global variable [4merrno[24m is set to
       EDOM and on the VAX and Tahoe generate a reserved operand fault.  On  a
       VAX  and  Tahoe,  [4merrno[24m  is set to EDOM and the reserved operand is re‚Äê
       turned by log unless [4mx[24m > 0, by [1mlog1p[22m() unless [4mx[24m > -1.

[1mNOTES[0m
       The functions exp(x)-1 and log(1+x) are called expm1 and logp1 in BASIC
       on the Hewlett-Packard HP-71B and APPLE Macintosh, EXP1 and LN1 in Pas‚Äê
       cal, exp1 and log1 in C on APPLE Macintoshes, where they have been pro‚Äê
       vided to make sure financial  calculations  of  ((1+x)**n-1)/x,  namely
       expm1(n‚àólog1p(x))/x,  will  be accurate when x is tiny.  They also pro‚Äê
       vide accurate inverse hyperbolic functions.

       The function [1mpow[22m([4mx[24m, [4m0[24m) returns x**0 = 1 for all x including x = 0,  In‚Äê
       finity  (not  found on a VAX), and [4mNaN[24m (the reserved operand on a VAX).
       Previous implementations of pow may have defined x**0 to  be  undefined
       in some or all of these cases.  Here are reasons for returning x**0 = 1
       always:

       1.      Any  program  that already tests whether x is zero (or infinite
               or [4mNaN[24m) before computing x**0 cannot care whether 0**0 =  1  or
               not.  Any program that depends upon 0**0 to be invalid is dubi‚Äê
               ous anyway since that expression‚Äôs meaning and, if invalid, its
               consequences vary from one computer system to another.

       2.      Some Algebra texts (e.g. Sigler‚Äôs) define x**0 = 1 for  all  x,
               including  x  = 0.  This is compatible with the convention that
               accepts a[0] as the value of polynomial

                     p(x) = a[0]‚àóx**0 + a[1]‚àóx**1 + a[2]‚àóx**2 +...+ a[n]‚àóx**n

               at x = 0 rather than reject a[0]‚àó0**0 as invalid.

       3.      Analysts will accept 0**0 = 1 despite that  x**y  can  approach
               anything  or  nothing as x and y approach 0 independently.  The
               reason for setting 0**0 = 1 anyway is this:

                     If x(z) and y(z) are [4many[24m functions  analytic  (expandable
                     in  power  series) in z around z = 0, and if there x(0) =
                     y(0) = 0, then x(z)**y(z) ‚Üí 1 as z ‚Üí 0.

       4.      If 0**0 = 1, then infinity**0 = 1/0**0 = 1 too; and then [4mNaN[24m**0
               = 1 too because x**0 = 1 for all finite and infinite  x,  i.e.,
               independently of x.

[1mSEE ALSO[0m
       [4mmath[24m(3), [4minfnan[24m(3)

[1mHISTORY[0m
       A  [1mexp[22m(),  [1mlog[22m() and [1mpow[22m() function appeared in Version 6 AT&T UNIX.  A
       [1mlog10[22m() function appeared in Version 7  AT&T  UNIX.   The  [1mlog1p[22m()  and
       [1mexpm1[22m() functions appeared in 4.3BSD.

4th Berkeley Distribution        July 31, 1991                          EXP(3)
