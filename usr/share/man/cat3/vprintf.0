PRINTF(3)                   Library Functions Manual                 PRINTF(3)

[1mNAME[0m
       printf,   fprintf,  sprintf,  snprintf,  vprintf,  vfprintf,  vsprintf,
       vsnprintf ‚Äî formatted output conversion

[1mSYNOPSIS[0m
       [1m#include <stdio.h>[0m

       [4mint[0m
       [1mprintf[22m([4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [4mint[0m
       [1mfprintf[22m([4mFILE[24m [4m*stream[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [4mint[0m
       [1msprintf[22m([4mchar[24m [4m*str[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [4mint[0m
       [1msnprintf[22m([4mchar[24m [4m*str[24m, [4msize_t[24m [4msize[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [1m#include <stdarg.h>[0m

       [4mint[0m
       [1mvprintf[22m([4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

       [4mint[0m
       [1mvfprintf[22m([4mFILE[24m [4m*stream[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

       [4mint[0m
       [1mvsprintf[22m([4mchar[24m [4m*str[24m, [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

       [4mint[0m
       [1mvsnprintf[22m([4mchar[24m [4m*str[24m, [4msize_t[24m [4msize[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

[1mDESCRIPTION[0m
       The [1mprintf[22m() family of functions produces output according to a  [4mformat[0m
       as described below.  [1mPrintf[22m() and [1mvprintf[22m() write output to [4mstdout,[24m the
       standard  output  stream;  [1mfprintf[22m() and [1mvfprintf[22m() write output to the
       given output [4mstream[24m; [1msprintf[22m(), [1msnprintf[22m(), [1mvsprintf[22m(), and [1mvsnprintf[22m()
       write to the character string [4mstr[24m.  These functions  write  the  output
       under  the control of a [4mformat[24m string that specifies how subsequent ar‚Äê
       guments (or arguments accessed via the variable‚Äêlength argument facili‚Äê
       ties of [4mstdarg[24m(3)) are converted for output.   These  functions  return
       the  number of characters printed (not including the trailing ‚Äò\0‚Äô used
       to end output to strings).  [1mSnprintf[22m() and [1mvsnprintf[22m()  will  write  at
       most  [4msize[24m-1  of  the  characters  printed  into the output string (the
       [4msize[24m‚Äôth character then gets the terminating ‚Äò\0‚Äô); if the return  value
       is greater than or equal to the [4msize[24m argument, the string was too short
       and  some  of  the  printed  characters  were discarded.  [1mSprintf[22m() and
       [1mvsprintf[22m() effectively assume an infinte [4msize[24m.

       The format string is composed of  zero  or  more  directives:  ordinary
       characters  (not  [1m%[22m),  which are copied unchanged to the output stream;
       and conversion specifications, each of which results in  fetching  zero
       or  more subsequent arguments.  Each conversion specification is intro‚Äê
       duced by the character [1m%[22m.  The arguments must correspond properly  (af‚Äê
       ter  type  promotion)  with the conversion specifier.  After the [1m%[22m, the
       following appear in sequence:

       [1m‚Ä¢   [22mZero or more of the following flags:

                 [1m-   [22ma [1m# [22mcharacter specifying that the value  should  be  con‚Äê
                     verted  to  an ‚Äò‚Äòalternate form‚Äô‚Äô.  For [1mc[22m, [1md[22m, [1mi[22m, [1mn[22m, [1mp[22m, [1ms[22m,
                     and [1mu[22m, conversions, this option has  no  effect.   For  [1mo[0m
                     conversions,  the precision of the number is increased to
                     force the first character of the output string to a  zero
                     (except  if a zero value is printed with an explicit pre‚Äê
                     cision of zero).  For [1mx [22mand [1mX [22mconversions, a non‚Äêzero re‚Äê
                     sult has the string ‚Äò0x‚Äô  (or  ‚Äò0X‚Äô  for  [1mX  [22mconversions)
                     prepended to it.  For [1me[22m, [1mE[22m, [1mf[22m, [1mg[22m, and [1mG[22m, conversions, the
                     result  will  always  contain a decimal point, even if no
                     digits follow it (normally, a decimal  point  appears  in
                     the  results  of  those  conversions only if a digit fol‚Äê
                     lows).  For [1mg [22mand [1mG [22mconversions, trailing zeros  are  not
                     removed from the result as they would otherwise be.

                 [1m-   [22mA  zero  ‚Äò[1m0[22m‚Äô  character specifying zero padding.  For all
                     conversions except [1mn[22m, the converted value  is  padded  on
                     the  left  with zeros rather than blanks.  If a precision
                     is given with a numeric conversion (Mc d, [1mi[22m, [1mo[22m, [1mu[22m, [1mi[22m,  [1mx[22m,
                     and [1mX[22m), the ‚Äò[1m0[22m‚Äô flag is ignored.

                 [1m-   [22mA  negative  field width flag ‚Äò[1m-[22m‚Äô indicates the converted
                     value is to be left adjusted on the field boundary.   Ex‚Äê
                     cept  for [1mn [22mconversions, the converted value is padded on
                     the right with blanks,  rather  than  on  the  left  with
                     blanks  or  zeros.   A  ‚Äò[1m-[22m‚Äô  overrides  a ‚Äò[1m0[22m‚Äô if both are
                     given.

                 [1m-   [22mA space, specifying that a blank should be left before  a
                     positive number produced by a signed conversion ([1md[22m, [1me[22m, [1mE[22m,
                     [1mf[22m, [1mg[22m, [1mG[22m, or [1mi[22m).

                 [1m-   [22ma  ‚Äò[1m+[22m‚Äô  character specifying that a sign always be placed
                     before a number produced by a signed conversion.   A  ‚Äò[1m+[22m‚Äô
                     overrides a space if both are used.

       [1m‚Ä¢   [22mAn  optional decimal digit string specifying a minimum field width.
           If the converted value has fewer characters than the  field  width,
           it  will  be padded with spaces on the left (or right, if the left‚Äê
           adjustment flag has been given) to fill out the field width.

       [1m‚Ä¢   [22mAn optional precision, in the form of a period ‚Äò[1m.[22m‚Äô followed  by  an
           optional  digit string.  If the digit string is omitted, the preci‚Äê
           sion is taken as zero.  This gives the minimum number of digits  to
           appear  for  [1md[22m, [1mi[22m, [1mo[22m, [1mu[22m, [1mx[22m, and [1mX [22mconversions, the number of digits
           to appear after the decimal‚Äêpoint for [1me[22m, [1mE[22m, and [1mf [22mconversions,  the
           maximum  number  of  significant digits for [1mg [22mand [1mG [22mconversions, or
           the maximum number of characters to be printed from a string for  [1ms[0m
           conversions.

       [1m‚Ä¢   [22mThe  optional  character [1mh[22m, specifying that a following [1md[22m, [1mi[22m, [1mo[22m, [1mu[22m,
           [1mx[22m, or [1mX [22mconversion corresponds to a [4mshort[24m [4mint[24m or [4munsigned[24m [4mshort[24m [4mint[0m
           argument, or that a following [1mn [22mconversion corresponds to a pointer
           to a [4mshort[24m [4mint[24m argument.

       [1m‚Ä¢   [22mThe optional character [1ml [22m(ell) specifying that a following [1md[22m, [1mi[22m, [1mo[22m,
           [1mu[22m, [1mx[22m, or [1mX [22mconversion applies  to  a  pointer  to  a  [4mlong[24m  [4mint[24m  or
           [4munsigned[24m [4mlong[24m [4mint[24m argument, or that a following [1mn [22mconversion corre‚Äê
           sponds to a pointer to a [4mlong[24m [4mint[24m argument.

       [1m‚Ä¢   [22mThe  character  [1mL [22mspecifying that a following [1me[22m, [1mE[22m, [1mf[22m, [1mg[22m, or [1mG [22mcon‚Äê
           version corresponds to a [4mlong[24m [4mdouble[24m argument (but note  that  long
           double values are not currently supported by the VAX and Tahoe com‚Äê
           pilers).

       [1m‚Ä¢   [22mA character that specifies the type of conversion to be applied.

       A  field  width  or precision, or both, may be indicated by an asterisk
       ‚Äò*‚Äô instead of a digit string.  In this case, an [4mint[24m argument  supplies
       the  field  width or precision.  A negative field width is treated as a
       left adjustment flag followed by a positive  field  width;  a  negative
       precision is treated as though it were missing.

       The conversion specifiers and their meanings are:

       [1mdiouxX  [22mThe  [4mint[24m  (or  appropriate  variant)  argument  is converted to
               signed decimal ([1md [22mand [1mi[22m), unsigned octal ([1mo[22m), unsigned  decimal
               ([1mu[22m),  or  unsigned hexadecimal ([1mx [22mand [1mX[22m) notation.  The letters
               [1mabcdef [22mare used for [1mx [22mconversions; the letters [1mABCDEF [22mare  used
               for conversions.  The precision, if any, gives the minimum num‚Äê
               ber of digits that must appear; if the converted value requires
               fewer digits, it is padded on the left with zeros.

       [1mDOU     [22mThe  [4mlong[24m [4mint[24m argument is converted to signed decimal, unsigned
               octal, or unsigned decimal, as if the format had been  [1mld[22m,  [1mlo[22m,
               or  [1mlu  [22mrespectively.   These  conversion characters are depre‚Äê
               cated, and will eventually disappear.

       [1meE      [22mThe [4mdouble[24m argument is  rounded  and  converted  in  the  style
               [-]d[1m.[22mddd[1me[22m¬±dd  where there is one digit before the decimal‚Äêpoint
               character and the number of digits after it  is  equal  to  the
               precision;  if  the  precision is missing, it is taken as 6; if
               the precision is zero, no decimal‚Äêpoint character appears.   An
               [1mE [22mconversion uses the letter [1mE [22m(rather than [1me[22m) to introduce the
               exponent.  The exponent always contains at least two digits; if
               the value is zero, the exponent is 00.

       [1mf       [22mThe  [4mdouble[24m  argument is rounded and converted to decimal nota‚Äê
               tion in the style [‚Äê]ddd[1m.[22mddd, where the number of digits  after
               the  decimal‚Äêpoint character is equal to the precision specifi‚Äê
               cation.  If the precision is missing, it is taken as 6; if  the
               precision  is  explicitly  zero, no decimal‚Äêpoint character ap‚Äê
               pears.  If a decimal point appears, at least one digit  appears
               before it.

       [1mg       [22mThe  [4mdouble[24m  argument  is converted in style [1mf [22mor [1me [22m(or [1mE [22mfor [1mG[0m
               conversions).  The precision specifies the number  of  signifi‚Äê
               cant  digits.  If the precision is missing, 6 digits are given;
               if the precision is zero, it is treated as 1.  Style [1me [22mis  used
               if  the exponent from its conversion is less than ‚Äê4 or greater
               than or equal to the precision.   Trailing  zeros  are  removed
               from the fractional part of the result; a decimal point appears
               only if it is followed by at least one digit.

       [1mc       [22mThe  [4mint[24m argument is converted to an [4munsigned[24m [4mchar[24m, and the re‚Äê
               sulting character is written.

       [1ms       [22mThe ‚Äú[4mchar[24m [4m*[24m‚Äù argument is expected to be a pointer to  an  array
               of  character  type (pointer to a string).  Characters from the
               array are written up to (but not including) a  terminating  NUL
               character; if a precision is specified, no more than the number
               specified  are written.  If a precision is given, no null char‚Äê
               acter need be present; if the precision is not specified, or is
               greater than the size of the array, the array  must  contain  a
               terminating NUL character.

       [1mp       [22mThe  ‚Äú[4mvoid[24m [4m*[24m‚Äù pointer argument is printed in hexadecimal (as if
               by ‚Äò%#x‚Äô or ‚Äò%#lx‚Äô).

       [1mn       [22mThe number of characters written so far is stored into the  in‚Äê
               teger  indicated  by the ‚Äú[4mint[24m [4m*[24m‚Äù (or variant) pointer argument.
               No argument is converted.

       [1m%       [22mA ‚Äò%‚Äô is written. No argument is converted. The  complete  con‚Äê
               version specification is ‚Äò%%‚Äô.

       In no case does a non‚Äêexistent or small field width cause truncation of
       a  field;  if the result of a conversion is wider than the field width,
       the field is expanded to contain the conversion result.

[1mEXAMPLES[0m
       To print a date and time in the form ‚ÄòSunday,  July  3,  10:02‚Äô,  where
       [4mweekday[24m and [4mmonth[24m are pointers to strings:

             #include <stdio.h>
             fprintf(stdout, "%s, %s %d, %.2d:%.2d\n",
                     weekday, month, day, hour, min);

       To print œÄ to five decimal places:

             #include <math.h>
             #include <stdio.h>
             fprintf(stdout, "pi = %.5f\n", 4 * atan(1.0));

       To allocate a 128 byte string and print into it:

             #include <stdio.h>
             #include <stdlib.h>
             #include <stdarg.h>
             char *newfmt(const char *fmt, ...)
             {
                             char *p;
                             va_list ap;
                             if ((p = malloc(128)) == NULL)
                                     return (NULL);
                             va_start(ap, fmt);
                             (void) vsnprintf(p, 128, fmt, ap);
                             va_end(ap);
                             return (p);
             }

[1mSEE ALSO[0m
       [4mprintf[24m(1), [4mscanf[24m(3)

[1mSTANDARDS[0m
       The   [1mfprintf[22m(),   [1mprintf[22m(),   [1msprintf[22m(),  [1mvprintf[22m(),  [1mvfprintf[22m(),  and
       [1mvsprintf[22m() functions conform to ANSI X3.159‚Äê1989 (‚ÄúANSI C89‚Äù).

[1mHISTORY[0m
       The functions [1msnprintf[22m() and [1mvsnprintf[22m() are new to this release.

[1mBUGS[0m
       The conversion formats [1m%D[22m, [1m%O[22m, and are not standard  and  are  provided
       only for backward compatibility.  The effect of padding the format with
       zeros  (either  by  the ‚Äò[1m0[22m‚Äô flag or by specifying a precision), and the
       benign effect (i.e., none) of the ‚Äò[1m#[22m‚Äô flag on [1m%n [22mand [1m%p [22mconversions, as
       well as other nonsensical combinations such as [1m%Ld[22m, are  not  standard;
       such combinations should be avoided.

       Because  [1msprintf[22m()  and  [1mvsprintf[22m()  assume  an infinitely long string,
       callers must be careful not to overflow the actual space; this is often
       impossible  to  assure.   For  safety,  programmers  should   use   the
       [1msnprintf[22m()  interface  instead.   Unfortunately,  this interface is not
       portable.

FreeBSD 13.2                     July 30, 1991                       PRINTF(3)
