SCANF(3)                    Library Functions Manual                  SCANF(3)

[1mNAME[0m
       scanf,  fscanf, sscanf, vscanf, vsscanf, vfscanf ‚Äî input format conver‚Äê
       sion

[1mSYNOPSIS[0m
       [1m#include <stdio.h>[0m

       [4mint[0m
       [1mscanf[22m([4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [4mint[0m
       [1mfscanf[22m([4mFILE[24m [4m*stream[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [4mint[0m
       [1msscanf[22m([4mconst[24m [4mchar[24m [4m*str[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4m...[24m);

       [1m#include <stdarg.h>[0m

       [4mint[0m
       [1mvscanf[22m([4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

       [4mint[0m
       [1mvsscanf[22m([4mconst[24m [4mchar[24m [4m*str[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

       [4mint[0m
       [1mvfscanf[22m([4mFILE[24m [4m*stream[24m, [4mconst[24m [4mchar[24m [4m*format[24m, [4mva_list[24m [4map[24m);

[1mDESCRIPTION[0m
       The [1mscanf[22m() family of functions scans input according to  a  [4mformat[24m  as
       described  below.   This  format may contain [4mconversion[24m [4mspecifiers[24m; the
       results from such conversions, if any, are stored through  the  [4mpointer[0m
       arguments.   The  [1mscanf[22m()  function reads input from the standard input
       stream [4mstdin[24m, [1mfscanf[22m() reads input from the stream pointer [4mstream[24m,  and
       [1msscanf[22m()  reads  its input from the character string pointed to by [4mstr[24m.
       The [1mvfscanf[22m() function is analogous to [4mvfprintf[24m(3) and reads input from
       the stream pointer [4mstream[24m using a variable argument  list  of  pointers
       (see  [4mstdarg[24m(3)).  The [1mvscanf[22m() function scans a variable argument list
       from the standard input and the [1mvsscanf[22m()  function  scans  it  from  a
       string;  these  are analogous to the [1mvprintf[22m() and [1mvsprintf[22m() functions
       respectively.  Each successive [4mpointer[24m argument must  correspond  prop‚Äê
       erly  with  each successive conversion specifier (but see ‚Äòsuppression‚Äô
       below).  All conversions are introduced by the [1m% [22m(percent sign) charac‚Äê
       ter.  The [4mformat[24m string may also contain other characters.  White space
       (such as blanks, tabs, or newlines) in  the  [4mformat[24m  string  match  any
       amount  of  white space, including none, in the input.  Everything else
       matches only itself.  Scanning stops when an input character  does  not
       match  such a format character.  Scanning also stops when an input con‚Äê
       version cannot be made (see below).

[1mCONVERSIONS[0m
       Following the [1m% [22mcharacter introducing a conversion there may be a  num‚Äê
       ber of [4mflag[24m characters, as follows:

       [1m*       [22mSuppresses  assignment.   The conversion that follows occurs as
               usual, but no pointer is used; the result of the conversion  is
               simply discarded.

       [1mh       [22mIndicates that the conversion will be one of [1mdioux [22mor [1mn [22mand the
               next pointer is a pointer to a [4mshort[24m [4mint[24m (rather than [4mint[24m).

       [1ml       [22mIndicates  either that the conversion will be one of [1mdioux [22mor [1mn[0m
               and the next pointer is a pointer to a [4mlong[24m  [4mint[24m  (rather  than
               [4mint[24m),  or  that  the conversion will be one of [1mefg [22mand the next
               pointer is a pointer to [4mdouble[24m (rather than [4mfloat[24m).

       [1mL       [22mIndicates that the conversion will be [1mefg [22mand the next  pointer
               is  a  pointer  to [4mlong[24m [4mdouble[24m.  (This type is not implemented;
               the [1mL [22mflag is currently ignored.)

       In addition to these flags, there may  be  an  optional  maximum  field
       width,  expressed  as  a decimal integer, between the [1m% [22mand the conver‚Äê
       sion.  If no width is given, a default of ‚Äòinfinity‚Äô is used (with  one
       exception,  below);  otherwise at most this many characters are scanned
       in processing the conversion.  Before conversion begins,  most  conver‚Äê
       sions  skip  white  space;  this white space is not counted against the
       field width.

       The following conversions are available:

       [1m%     [22mMatches a literal ‚Äò%‚Äô.   That  is,  ‚Äò%%‚Äô  in  the  format  string
             matches a single input ‚Äò%‚Äô character.  No conversion is done, and
             assignment does not occur.

       [1md     [22mMatches  an  optionally  signed decimal integer; the next pointer
             must be a pointer to [4mint[24m.

       [1mD     [22mEquivalent to [4mld[24m; this exists only for backwards compatibility.

       [1mi     [22mMatches an optionally signed integer; the next pointer must be  a
             pointer to [4mint[24m.  The integer is read in base 16 if it begins with
             ‚Äò0x‚Äô  or  ‚Äò0X‚Äô,  in  base 8 if it begins with ‚Äò0‚Äô, and in base 10
             otherwise.  Only characters that correspond to the base are used.

       [1mo     [22mMatches an octal integer; the next pointer must be a  pointer  to
             [4munsigned[24m [4mint[24m.

       [1mO     [22mEquivalent to [4mlo[24m; this exists for backwards compatibility.

       [1mu     [22mMatches  an  optionally  signed decimal integer; the next pointer
             must be a pointer to [4munsigned[24m [4mint[24m.

       [1mx     [22mMatches an optionally a  signed  hexadecimal  integer;  the  next
             pointer must be a pointer to [4munsigned[24m [4mint[24m.

       [1mX     [22mEquivalent   to   [1mlx[22m;   this   violates   the   ANSI  X3.159‚Äê1989
             (‚ÄúANSI C89‚Äù), but is backwards compatible with previous Unix sys‚Äê
             tems.

       [1mf     [22mMatches an optionally  signed  floating‚Äêpoint  number;  the  next
             pointer must be a pointer to [4mfloat[24m.

       [1me     [22mEquivalent to [1mf[22m.

       [1mg     [22mEquivalent to [1mf[22m.

       [1mE     [22mEquivalent   to   [1mlf[22m;   this   violates   the   ANSI  X3.159‚Äê1989
             (‚ÄúANSI C89‚Äù), but is backwards compatible with previous Unix sys‚Äê
             tems.

       [1mF     [22mEquivalent to [1mlf[22m; this exists only for backwards compatibility.

       [1ms     [22mMatches  a  sequence  of  non‚Äêwhite‚Äêspace  characters;  the  next
             pointer  must  be  a pointer to [4mchar[24m, and the array must be large
             enough to accept all the sequence and the terminating NUL charac‚Äê
             ter.  The input string stops at white space  or  at  the  maximum
             field width, whichever occurs first.

       [1mc     [22mMatches  a  sequence  of  [4mwidth[24m count characters (default 1); the
             next pointer must be a pointer to [4mchar[24m, and there must be  enough
             room  for  all the characters (no terminating NUL is added).  The
             usual skip of leading white space is suppressed.  To  skip  white
             space first, use an explicit space in the format.

       [1m[     [22mMatches  a nonempty sequence of characters from the specified set
             of accepted characters; the next pointer must  be  a  pointer  to
             [4mchar[24m, and there must be enough room for all the characters in the
             string,  plus  a  terminating  NUL  character.  The usual skip of
             leading white space is suppressed.  The string is to be  made  up
             of characters in (or not in) a particular set; the set is defined
             by  the  characters  between  the  open bracket [ character and a
             close bracket ] character.  The set [4mexcludes[24m those characters  if
             the first character after the open bracket is a circumflex [1mÀÜ[22m.  To
             include  a  close bracket in the set, make it the first character
             after the open bracket or the circumflex; any other position will
             end the set.  The hyphen character [1m‚Äê [22mis also special; when placed
             between two other characters, it adds all intervening  characters
             to  the set.  To include a hyphen, make it the last character be‚Äê
             fore the final close bracket.  For instance, ‚Äò[ÀÜ]0‚Äê9‚Äê]‚Äô means the
             set ‚Äòeverything except close bracket, zero through nine, and  hy‚Äê
             phen‚Äô.  The string ends with the appearance of a character not in
             the  (or, with a circumflex, in) set or when the field width runs
             out.

       [1mp     [22mMatches a pointer value (as printed by ‚Äò%p‚Äô  in  [4mprintf[24m(3));  the
             next pointer must be a pointer to [4mvoid[24m.

       [1mn     [22mNothing  is  expected; instead, the number of characters consumed
             thus far from the input is stored through the next pointer, which
             must be a pointer to [4mint[24m.  This is [4mnot[24m a conversion, although  it
             can be suppressed with the [1m* [22mflag.

       For  backwards compatibility, other conversion characters (except ‚Äò\0‚Äô)
       are taken as if they were ‚Äò%d‚Äô or, if uppercase, ‚Äò%ld‚Äô, and a  ‚Äòconver‚Äê
       sion‚Äô  of ‚Äò%\0‚Äô causes an immediate return of EOF.  The [1mF [22mand [1mX [22mconver‚Äê
       sions will be changed in the future to conform to the ANSI C  standard,
       after which they will act like [1mf [22mand [1mx [22mrespectively.

[1mRETURN VALUES[0m
       These functions return the number of input items assigned, which can be
       fewer than provided for, or even zero, in the event of a matching fail‚Äê
       ure.   Zero indicates that, while there was input available, no conver‚Äê
       sions were assigned; typically this is due to an invalid input  charac‚Äê
       ter,  such as an alphabetic character for a ‚Äò%d‚Äô conversion.  The value
       EOF is returned if an input failure occurs before any  conversion  such
       as  an end‚Äêof‚Äêfile occurs. If an error or end‚Äêof‚Äêfile occurs after con‚Äê
       version has begun, the number of conversions  which  were  successfully
       completed is returned.

[1mSEE ALSO[0m
       [4mstrtol[24m(3), [4mstrtoul[24m(3), [4mstrtod[24m(3), [4mgetc[24m(3), [4mprintf[24m(3)

[1mSTANDARDS[0m
       The   functions   [1mfscanf[22m(),  [1mscanf[22m(),  and  [1msscanf[22m()  conform  to  ANSI
       X3.159‚Äê1989 (‚ÄúANSI C89‚Äù).

[1mHISTORY[0m
       The functions [1mvscanf[22m(), [1mvsscanf[22m() and [1mvfscanf[22m() are  new  to  this  re‚Äê
       lease.

[1mBUGS[0m
       The current situation with [1m%F [22mand [1m%X [22mconversions is unfortunate.

       All  of  the backwards compatibility formats will be removed in the fu‚Äê
       ture.

       Numerical strings are truncated to 512 characters; for example, [1m%f  [22mand
       [1m%d [22mare implicitly [1m%512f [22mand [1m%512d[22m.

FreeBSD 13.2                    January 8, 1993                       SCANF(3)
