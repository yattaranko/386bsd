IEEE(3)                     Library Functions Manual                   IEEE(3)

[1mNAME[0m
       copysign, drem, finite, logb, scalb copysign, remainder, ‚Äî exponent ma‚Äê
       nipulations

[1mSYNOPSIS[0m
       [1m#include <math.h>[0m

       [4mdouble[0m
       [1mcopysign[22m([4mdouble[24m [4mx[24m, [4mdouble[24m [4my[24m);

       [4mdouble[0m
       [1mdrem[22m([4mdouble[24m [4mx[24m, [4mdouble[24m [4my[24m);

       [4mint[0m
       [1mfinite[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mlogb[22m([4mdouble[24m [4mx[24m);

       [4mdouble[0m
       [1mscalb[22m([4mdouble[24m [4mx[24m, [4mint[24m [4mn[24m);

[1mDESCRIPTION[0m
       These  functions  are required for, or recommended by the IEEE standard
       754 for floating-point arithmetic.

       The [1mcopysign[22m() function returns [4mx[24m with its sign changed to [4my[24m‚Äôs.

       The [1mdrem[22m() function returns the remainder [4mr[24m := [4mx[24m - [4mn‚àóy[24m where [4mn[24m  is  the
       integer  nearest  the  exact  value of [4mx[24m/[4my[24m; moreover if |[4mn[24m - [4mx[24m/[4my[24m| = 1/2
       then [4mn[24m is even.  Consequently the remainder is computed exactly and |[4mr[24m|
       ‚â§  |[4my[24m|/2.  But  [1mdrem[22m([4mx[24m,  [4m0[24m)   is   exceptional.    (See   below   under
       ‚ÄúDIAGNOSTICS‚Äù.)

       The [1mfinite[22m() function returns the value 1 just when -‚àû < [4mx[24m < +‚àû; other‚Äê
       wise  a  zero is returned (when |[4mx[24m| = ‚àû or [4mx[24m is [4mNaN[24m or is the VAX‚Äôs re‚Äê
       served operand).

       The [1mlogb[22m() function returns [4mx[24m‚Äôs exponent [4mn[24m, a signed integer  converted
       to double-precision floating-point and so chosen that 1 (<= |[4mx[24m|2**[4mn[24m < 2
       unless  [4mx[24m = 0 or (only on machines that conform to IEEE 754) |[4mx[24m| = ‚àû or
       [4mx[24m lies between  0  and  the  Underflow  Threshold.   (See  below  under
       ‚ÄúBUGS‚Äù.)

       The  Fn  calb  returns  [4mx[24m‚àó(2**[4mn[24m) computed, for integer n, without first
       computing 2‚àó[4mn[24m.

[1mRETURN VALUES[0m
       The IEEE standard 754 defines [1mdrem[22m([4mx[24m, [4m0[24m) and [1mdrem[22m([4m‚àû[24m, [4my[24m) to  be  invalid
       operations  that produce a [4mNaN[24m.  On the VAX, [1mdrem[22m([4mx[24m, [4m0[24m) generates a re‚Äê
       served operand fault.  No ‚àû exists on a VAX.

       IEEE 754 defines [1mlogb[22m([4m¬±‚àû[24m) = ‚àû and [1mlogb[22m([4m0[24m) = -‚àû, and requires the latter
       to signal Division-by-Zero.  But on a VAX, [1mlogb[22m([4m0[24m) = 1.0  -  2.0**31  =
       -2,147,483,647.0.   And  if the correct value of [1mscalb[22m() would overflow
       on a VAX, it generates a reserved operand fault  and  sets  the  global
       variable [4merrno[24m to ERANGE.

[1mSEE ALSO[0m
       [4mfloor[24m(3), [4mmath[24m(3), [4minfnan[24m(3)

[1mHISTORY[0m
       The [1mieee [22mfunctions appeared in 4.3BSD.

[1mBUGS[0m
       Should  [1mdrem[22m([4mx[24m,  [4m0[24m)  and  [1mlogb[22m([4m0[24m) on a VAX signal invalidity by setting
       [4merrno[24m = EDOM?  Should [1mlogb[22m([4m0[24m) return  -1.7e38?

       IEEE  754  currently   specifies   that   [1mlogb[22m([4mdenormalized[24m   [4mno.[24m)    =
       [1mlogb[22m([4mtiniest[24m  [4mnormalized[24m  [4mno.[24m [4m>[24m [4m0[24m) but the consensus has changed to the
       specification in the new  proposed  IEEE  standard  p854,  namely  that
       [1mlogb[22m([4mx[24m) satisfy

             1 ‚â§ [1mscalb[22m(|[4mx[24m|, [4m-logb(x)[24m) < Radix  ... = 2 for IEEE 754

       for  every  x  except  0, ‚àû and [4mNaN[24m.  Almost every program that assumes
       754‚Äôs specification will work correctly if [1mlogb[22m() follows 854‚Äôs  speci‚Äê
       fication instead.

       IEEE  754  requires  [1mcopysign[22m([4mx[24m, [4mNaN)[24m) = ¬±[4mx[24m but says nothing else about
       the sign of a [4mNaN[24m.  A [4mNaN[24m [4mN[24mot [4ma[24m [4mN[24mumber) is similar  in  spirit  to  the
       VAX‚Äôs reserved operand, but very different in important details.  Since
       the sign bit of a reserved operand makes it look negative,

             [1mcopysign[22m([4mx[24m, [4mreserved[24m [4moperand[24m) = -[4mx[24m;

       should this return the reserved operand instead?

4.3 Berkeley Distribution         May 6, 1991                          IEEE(3)
