GETSOCKOPT(2)                 System Calls Manual                GETSOCKOPT(2)

[1mNAME[0m
       getsockopt, setsockopt ‚Äî get and set options on sockets

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/socket.h>[0m

       [4mint[0m
       [1mgetsockopt[22m([4mint[24m [4ms[24m, [4mint[24m [4mlevel[24m, [4mint[24m [4moptname[24m, [4mvoid[24m [4m*optval[24m, [4mint[24m [4m*optlen[24m);

       [4mint[0m
       [1msetsockopt[22m([4mint[24m   [4ms[24m,   [4mint[24m  [4mlevel[24m,  [4mint[24m  [4moptname[24m,  [4mconst[24m  [4mvoid[24m  [4m*optval[24m,
           [4mint[24m [4moptlen[24m);

[1mDESCRIPTION[0m
       [1mGetsockopt[22m() and [1msetsockopt[22m() manipulate the [4moptions[24m associated with  a
       socket.  Options may exist at multiple protocol levels; they are always
       present at the uppermost ‚Äúsocket‚Äù level.

       When  manipulating socket options the level at which the option resides
       and the name of the option must be specified.  To manipulate options at
       the socket level, [4mlevel[24m is specified as SOL_SOCKET.  To manipulate  op‚Äê
       tions  at any other level the protocol number of the appropriate proto‚Äê
       col controlling the option is supplied.  For example, to indicate  that
       an option is to be interpreted by the TCP protocol, [4mlevel[24m should be set
       to the protocol number of TCP; see [4mgetprotoent[24m(3).

       The  parameters  [4moptval[24m and [4moptlen[24m are used to access option values for
       [1msetsockopt[22m().  For [1mgetsockopt[22m() they identify a  buffer  in  which  the
       value   for   the   requested   option(s)  are  to  be  returned.   For
       [1mgetsockopt[22m(), [4moptlen[24m is a value‚Äêresult parameter, initially  containing
       the  size of the buffer pointed to by [4moptval[24m, and modified on return to
       indicate the actual size of the value returned.  If no option value  is
       to be supplied or returned, [4moptval[24m may be NULL.

       [4mOptname[24m  and  any specified options are passed uninterpreted to the ap‚Äê
       propriate  protocol  module  for  interpretation.   The  include   file
       ‚ü®[4msys/socket.h[24m‚ü© contains definitions for socket level options, described
       below.   Options at other protocol levels vary in format and name; con‚Äê
       sult the appropriate entries in section 4 of the manual.

       Most socket‚Äêlevel options utilize an [4mint[24m  parameter  for  [4moptval[24m.   For
       [1msetsockopt[22m(),  the parameter should be non‚Äêzero to enable a boolean op‚Äê
       tion, or zero if the option is to be disabled.  SO_LINGER uses a [4mstruct[0m
       [4mlinger[24m parameter, defined in ‚ü®[4msys/socket.h[24m‚ü©, which  specifies  the  de‚Äê
       sired  state  of  the  option  and  the  linger  interval  (see below).
       SO_SNDTIMEO and SO_RCVTIMEO use a [4mstruct[24m [4mtimeval[24m parameter, defined  in
       ‚ü®[4msys/time.h[24m‚ü©.

       The  following  options  are recognized at the socket level.  Except as
       noted,  each  may  be  examined  with   [1mgetsockopt[22m()   and   set   with
       [1msetsockopt[22m().

             SO_DEBUG        enables recording of debugging information
             SO_REUSEADDR    enables local address reuse
             SO_KEEPALIVE    enables keep connections alive
             SO_DONTROUTE    enables routing bypass for outgoing messages
             SO_LINGER       linger on close if data present
             SO_BROADCAST    enables permission to transmit broadcast messages
             SO_OOBINLINE    enables reception of out‚Äêof‚Äêband data in band
             SO_SNDBUF       set buffer size for output
             SO_RCVBUF       set buffer size for input
             SO_SNDLOWAT     set minimum count for output
             SO_RCVLOWAT     set minimum count for input
             SO_SNDTIMEO     set timeout value for output
             SO_RCVTIMEO     set timeout value for input
             SO_TYPE         get the type of the socket (get only)
             SO_ERROR        get and clear error on the socket (get only)

       SO_DEBUG   enables   debugging  in  the  underlying  protocol  modules.
       SO_REUSEADDR indicates that the rules used in validating addresses sup‚Äê
       plied in  a  [4mbind[24m(2)  call  should  allow  reuse  of  local  addresses.
       SO_KEEPALIVE  enables  the  periodic transmission of messages on a con‚Äê
       nected socket.  Should the connected party fail  to  respond  to  these
       messages,  the  connection is considered broken and processes using the
       socket are notified via a SIGPIPE signal when attempting to send  data.
       SO_DONTROUTE  indicates  that outgoing messages should bypass the stan‚Äê
       dard routing facilities.  Instead, messages are directed to the  appro‚Äê
       priate network interface according to the network portion of the desti‚Äê
       nation address.

       SO_LINGER  controls  the action taken when unsent messags are queued on
       socket and a [4mclose[24m(2) is performed.  If the  socket  promises  reliable
       delivery  of  data  and  SO_LINGER  is  set,  the system will block the
       process on the [4mclose[24m attempt until it is able to transmit the  data  or
       until it decides it is unable to deliver the information (a timeout pe‚Äê
       riod, termed the linger interval, is specified in the [1msetsockopt[22m() call
       when  SO_LINGER is requested).  If SO_LINGER is disabled and a [4mclose[24m is
       issued, the system will process the close in a manner that  allows  the
       process to continue as quickly as possible.

       The option SO_BROADCAST requests permission to send broadcast datagrams
       on  the  socket.   Broadcast was a privileged operation in earlier ver‚Äê
       sions of the system.  With protocols that support out‚Äêof‚Äêband data, the
       SO_OOBINLINE option requests that out‚Äêof‚Äêband data  be  placed  in  the
       normal  data  input  queue as received; it will then be accessible with
       [4mrecv[24m or [4mread[24m calls without the MSG_OOB flag.  Some protocols always be‚Äê
       have as if this option is set.  SO_SNDBUF and SO_RCVBUF are options  to
       adjust  the normal buffer sizes allocated for output and input buffers,
       respectively.  The buffer size may be increased for high‚Äêvolume connec‚Äê
       tions, or may be decreased to limit the possible  backlog  of  incoming
       data.  The system places an absolute limit on these values.

       SO_SNDLOWAT  is  an  option  to set the minimum count for output opera‚Äê
       tions.  Most output operations process all of the data supplied by  the
       call,  delivering data to the protocol for transmission and blocking as
       necessary for flow control.  Nonblocking output operations will process
       as much data as permitted subject to flow control without blocking, but
       will process no data if flow control does not allow the smaller of  the
       low  water  mark  value  or  the  entire  request  to  be processed.  A
       [4mselect[24m(2) operation testing the ability to write to a socket  will  re‚Äê
       turn  true  only  if the low water mark amount could be processed.  The
       default value for SO_SNDLOWAT is set to a convenient size  for  network
       efficiency,  often  1024.   SO_RCVLOWAT is an option to set the minimum
       count for input operations.  In general, receive calls will block until
       any (non‚Äêzero) amount of data is received, then return with smaller  of
       the  amount  available  or the amount requested.  The default value for
       SO_SNDLOWAT is 1.  If SO_SNDLOWAT is set to a  larger  value,  blocking
       receive calls normally wait until they have received the smaller of the
       low  water mark value or the requested amount.  Receive calls may still
       return less than the low water mark if an error  occurs,  a  signal  is
       caught, or the type of data next in the receive queue is different than
       that returned.

       SO_SNDTIMEO  is an option to set a timeout value for output operations.
       It accepts a [4mstruct[24m [4mtimeval[24m parameter with the number  of  seconds  and
       microseconds used to limit waits for output operations to complete.  If
       a send operation has blocked for this much time, it returns with a par‚Äê
       tial  count or with the error EWOULDBLOCK if no data were sent.  In the
       current implementation, this timer is restarted  each  time  additional
       data  are delivered to the protocol, implying that the limit applies to
       output portions ranging in size from the low water mark to the high wa‚Äê
       ter mark for output.  SO_RCVTIMEO is an option to set a  timeout  value
       for  input  operations.  It accepts a [4mstruct[24m [4mtimeval[24m parameter with the
       number of seconds and microseconds used to limit waits for input opera‚Äê
       tions to complete.   In  the  current  implementation,  this  timer  is
       restarted  each  time additional data are received by the protocol, and
       thus the limit is in effect an inactivity timer.  If a  receive  opera‚Äê
       tion  has  been blocked for this much time without receiving additional
       data, it returns with a short count or with the error EWOULDBLOCK if no
       data were received.

       Finally, SO_TYPE and SO_ERROR are options used only with  [1msetsockopt[22m().
       SO_TYPE returns the type of the socket, such as SOCK_STREAM; it is use‚Äê
       ful  for servers that inherit sockets on startup.  SO_ERROR returns any
       pending error on the socket and clears the error  status.   It  may  be
       used  to check for asynchronous errors on connected datagram sockets or
       for other asynchronous errors.

[1mRETURN VALUES[0m
       A 0 is returned if the call succeeds, ‚Äê1 if it fails.

[1mERRORS[0m
       The call succeeds unless:

       [EBADF]        The argument [4ms[24m is not a valid descriptor.

       [ENOTSOCK]     The argument [4ms[24m is a file, not a socket.

       [ENOPROTOOPT]  The option is unknown at the level indicated.

       [EFAULT]       The address pointed to by [4moptval[24m is not in a valid  part
                      of  the  process  address space.  For [1mgetsockopt[22m(), this
                      error may also be returned if [4moptlen[24m is not in  a  valid
                      part of the process address space.

[1mSEE ALSO[0m
       [4mioctl[24m(2), [4msocket[24m(2), [4mgetprotoent[24m(3) [4mprotocols[24m(5)

[1mBUGS[0m
       Several  of the socket options should be handled at lower levels of the
       system.

[1mHISTORY[0m
       The [1mgetsockopt [22msystem call appeared in 4.2BSD.

4.3‚ÄêReno Berkeley Distribution    May 1, 1991                    GETSOCKOPT(2)
