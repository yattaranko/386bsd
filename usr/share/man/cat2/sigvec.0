SIGVEC(2)                     System Calls Manual                    SIGVEC(2)

[1mNAME[0m
       sigvec ‚Äî software signal facilities

[1mSYNOPSIS[0m
       [1m#include <signal.h>[0m

       struct sigvec {
               void     (*sv_handler)();
               sigset_t sv_mask;
               int      sv_flags;
       };

       [1msigvec[22m([4mint[24m [4msig[24m, [4mstruct[24m [4msigvec[24m [4m*vec[24m, [4mstruct[24m [4msigvec[24m [4m*ovec[24m);

[1mDESCRIPTION[0m
       [1mThis interface is made obsolete by sigaction(2).[0m

       The system defines a set of signals that may be delivered to a process.
       Signal  delivery  resembles  the occurence of a hardware interrupt: the
       signal is blocked from further occurrence, the current process  context
       is  saved,  and a new one is built.  A process may specify a [4mhandler[24m to
       which a signal is delivered, or specify that a signal is to be  [4mblocked[0m
       or  [4mignored[24m.  A process may also specify that a default action is to be
       taken by the system when a signal occurs.   Normally,  signal  handlers
       execute on the current stack of the process.  This may be changed, on a
       per‚Äêhandler basis, so that signals are taken on a special [4msignal[24m [4mstack[24m.

       All  signals  have the same [4mpriority[24m.  Signal routines execute with the
       signal that caused their invocation [4mblocked[24m, but other signals may  yet
       occur.   A  global  [4msignal[24m  [4mmask[24m  defines  the set of signals currently
       blocked from delivery to a process.  The signal mask for a  process  is
       initialized  from  that  of its parent (normally 0).  It may be changed
       with a [4msigblock[24m(2) or [4msigsetmask[24m(2) call, or when a signal is delivered
       to the process.

       When a signal condition arises for a process, the signal is added to  a
       set of signals pending for the process.  If the signal is not currently
       [4mblocked[24m  by  the  process  then it is delivered to the process.  When a
       signal is delivered, the current state of the process is saved,  a  new
       signal  mask is calculated (as described below), and the signal handler
       is invoked.  The call to the handler is arranged so that if the  signal
       handling  routine returns normally the process will resume execution in
       the context from before the signal‚Äôs delivery.  If the  process  wishes
       to  resume  in a different context, then it must arrange to restore the
       previous context itself.

       When a signal is delivered to a process a new signal mask is  installed
       for the duration of the process‚Äô signal handler (or until a [4msigblock[24m or
       [4msigsetmask[24m  call  is  made).  This mask is formed by taking the current
       signal mask, adding the signal to be delivered, and [4mor[24m‚Äôing in the  sig‚Äê
       nal mask associated with the handler to be invoked.

       [1mSigvec[22m()  assigns a handler for a specific signal.  If [4mvec[24m is non‚Äêzero,
       it specifies a handler routine and mask to be used when delivering  the
       specified  signal.   Further, if the SV_ONSTACK bit is set in [4msv_flags[24m,
       the system will deliver the signal to the process on  a  [4msignal[24m  [4mstack[24m,
       specified with [4msigstack[24m(2).  If [4movec[24m is non‚Äêzero, the previous handling
       information for the signal is returned to the user.

       The  following  is  a  list of all signals with names as in the include
       file ‚ü®[4msignal.h[24m‚ü©:

         [1mNAME            Default Action                      Description[0m
       SIGHUP          terminate process       terminal line hangup
       SIGINT          terminate process       interrupt program
       SIGQUIT         create core image       quit program
       SIGILL          create core image       illegal instruction
       SIGTRAP         create core image       trace trap
       SIGABRT         create core image       [4mabort[24m(2) call (formerly SIGIOT)
       SIGEMT          create core image       emulate instruction executed
       SIGFPE          create core image       floating‚Äêpoint exception
       SIGKILL         terminate process       kill program
       SIGBUS          create core image       bus error
       SIGSEGV         create core image       segmentation violation
       SIGSYS          create  core  image        system  call  given  invalid
                                               argument
       SIGPIPE         terminate process       write on a pipe with no reader
       SIGALRM         terminate process       real‚Äêtime timer expired
       SIGTERM         terminate process       software termination signal
       SIGURG           discard  signal           urgent  condition present on
                                               socket
       SIGSTOP         stop  process             stop  (cannot  be  caught  or
                                               ignored)
       SIGTSTP          stop  process             stop  signal  generated from
                                               keyboard
       SIGCONT         discard signal          continue after stop
       SIGCHLD         discard signal          child status has changed
       SIGTTIN         stop process            background read attempted  from
                                               control terminal
       SIGTTOU          stop  process            background write attempted to
                                               control terminal
       SIGIO           discard signal          I/O is possible on a descriptor
                                               (see [4mfcntl[24m(2))
       SIGXCPU         terminate process       cpu time  limit  exceeded  (see
                                               [4msetrlimit[24m(2))
       SIGXFSZ          terminate  process       file size limit exceeded (see
                                               [4msetrlimit[24m(2))
       SIGVTALRM        terminate  process        virtual  time   alarm   (see
                                               [4msetitimer[24m(2))
       SIGPROF          terminate  process        profiling  timer  alarm (see
                                               [4msetitimer[24m(2))
       SIGWINCH        discard signal          Window size change
       SIGINFO         discard signal          status request from keyboard
       SIGUSR1         terminate process       User defined signal 1
       SIGUSR2         terminate process       User defined signal 2

       Once a signal handler is installed, it remains installed until  another
       [1msigvec[22m() call is made, or an [4mexecve[24m(2) is performed.  A signal‚Äêspecific
       default  action may be reset by setting [4msv_handler[24m to SIG_DFL.  The de‚Äê
       faults are process termination, possibly with  core  dump;  no  action;
       stopping  the process; or continuing the process.  See the above signal
       list for each signal‚Äôs default action.  If [4msv_handler[24m is  SIG_IGN  cur‚Äê
       rent and pending instances of the signal are ignored and discarded.

       If a signal is caught during the system calls listed below, the call is
       normally  restarted.   The  call can be forced to terminate prematurely
       with an EINTR error return by setting the SV_INTERRUPT bit in [4msv_flags[24m.
       The  affected  system  calls  include  [4mread[24m(2),  [4mwrite[24m(2),   [4msendto[24m(2),
       [4mrecvfrom[24m(2), [4msendmsg[24m(2) and [4mrecvmsg[24m(2) on a communications channel or a
       slow  device  (such as a terminal, but not a regular file) and during a
       [4mwait[24m(2) or [4mioctl[24m(2).  However, calls that have  already  committed  are
       not  restarted,  but  instead  return a partial success (for example, a
       short read count).

       After a [4mfork[24m(2) or [4mvfork[24m(2) all signals, the signal  mask,  the  signal
       stack, and the restart/interrupt flags are inherited by the child.

       [4mExecve[24m(2)  reinstates  the  default  action  for all signals which were
       caught and resets all signals to be caught on the user stack.   Ignored
       signals  remain ignored; the signal mask remains the same; signals that
       interrupt system calls continue to do so.

[1mNOTES[0m
       The mask specified in [4mvec[24m is not allowed to block SIGKILL  or  SIGSTOP.
       This is done silently by the system.

       The  SV_INTERRUPT  flag is not available in 4.2BSD, hence it should not
       be used if backward compatibility is needed.

[1mRETURN VALUES[0m
       A 0 value indicated that the call succeeded.  A -1 return  value  indi‚Äê
       cates an error occurred and [4merrno[24m is set to indicated the reason.

[1mERRORS[0m
       [1mSigvec[22m()  will  fail and no new signal handler will be installed if one
       of the following occurs:

       [EFAULT]  Either [4mvec[24m or [4movec[24m points to memory that is not a valid  part
                 of the process address space.

       [EINVAL]  [4mSig[24m is not a valid signal number.

       [EINVAL]  An  attempt is made to ignore or supply a handler for SIGKILL
                 or SIGSTOP.

[1mSEE ALSO[0m
       [4msigaction[24m(2),    [4mkill[24m(1),    [4mptrace[24m(2),    [4mkill[24m(2),     [4msigprocmask[24m(2),
       [4msigsuspend[24m(2),  [4msigblock[24m(2),  [4msigsetmask[24m(2),  [4msigpause[24m(2), [4msigstack[24m(2),
       [4msigvec[24m(2), [4msigsetops[24m(3), [4msetjmp[24m(3), [4msiginterrupt[24m(3), [4mtty[24m(4)

[1mEXAMPLE[0m
       On the VAX-11 The handler routine can be declared:

             void handler(sig, code, scp)
             int sig, code;
             struct sigcontext *scp;

       Here [4msig[24m is the signal number, into which the hardware faults and traps
       are mapped as defined below.  [4mCode[24m is a parameter that is either a con‚Äê
       stant as given below or, for compatibility mode faults, the  code  pro‚Äê
       vided by the hardware (Compatibility mode faults are distinguished from
       the  other  SIGILL  traps  by  having PSL_CM set in the psl).  [4mScp[24m is a
       pointer to the [4msigcontext[24m structure (defined in  ‚ü®[4msignal.h[24m‚ü©),  used  to
       restore the context from before the signal.

[1mBUGS[0m
       This manual page is still confusing.

4th Berkeley Distribution       April 29, 1991                       SIGVEC(2)
