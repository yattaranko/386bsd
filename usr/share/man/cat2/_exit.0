EXIT(2)                       System Calls Manual                      EXIT(2)

[1mNAME[0m
       _exit ‚Äî terminate the calling process

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m

       [4mvoid[24m [4mvolatile[0m
       [1m_exit[22m([4mint[24m [4mstatus[24m);

[1mDESCRIPTION[0m
       The  [1m_exit[22m()  function  terminates  a process with the following conse‚Äê
       quences:

       [1m‚Ä¢   [22mAll of the descriptors open in  the  calling  process  are  closed.
           This may entail delays, for example, waiting for output to drain; a
           process in this state may not be killed, as it is already dying.

       [1m‚Ä¢   [22mIf  the  parent  process  of the calling process has an outstanding
           [4mwait[24m call or is interested in the SIGCHLD signal, it is notified of
           the calling process‚Äôs termination and the [4mstatus[24m area is set as de‚Äê
           fined by [4mwait[24m(2).

       [1m‚Ä¢   [22mThe parent process‚ÄêID of all  of  the  calling  process‚Äôs  existing
           child  processes  are set to 1; the initialization process (see the
           DEFINITIONS section of [4mintro[24m(2)) inherits each of these  processes.
           Any stopped children are restarted with a hangup signal (SIGHUP).

       Most  C  programs  call  the  library  routine  [4mexit[24m(3),  which flushes
       buffers, closes streams, unlinks temporary files, etc., before  calling
       [1m_exit[22m().

[1mRETURN VALUE[0m
       [1m_exit[22m() can never return.

[1mSEE ALSO[0m
       [4mfork[24m(2), [4msigvec[24m(2), [4mwait[24m(2), [4mexit[24m(3)

[1mHISTORY[0m
       An [1mexit [22mfunction call appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution        July 25, 1991                         EXIT(2)
