EXECVE(2)                     System Calls Manual                    EXECVE(2)

[1mNAME[0m
       execve ‚Äî execute a file

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m

       [4mint[0m
       [1mexecve[22m([4mconst[24m [4mchar[24m [4m*path[24m, [4mconst[24m [4m*[24m [4mchar[24m [4m*argv[24m, [4mconst[24m [4m*[24m [4mchar[24m [4m*envp[24m);

[1mDESCRIPTION[0m
       [1mExecve[22m()  transforms  the  calling process into a new process.  The new
       process is constructed from an ordinary file, whose name is pointed  to
       by  [4mpath[24m,  called  the  [4mnew[24m  [4mprocess[24m [4mfile[24m.  This file is either an exe‚Äê
       cutable object file, or a file of data for  an  interpreter.   An  exe‚Äê
       cutable  object  file  consists  of  an identifying header, followed by
       pages of data representing the initial program (text)  and  initialized
       data pages.  Additional pages may be specified by the header to be ini‚Äê
       tialized with zero data;  see [4ma.out[24m(5).

       An interpreter file begins with a line of the form:

             [1m#! [4m[22minterpreter[24m [[4marg[24m]

       When an interpreter file is [1mexecve[22m()‚Äôd, the system [1mexecve[22m()‚Äôs the spec‚Äê
       ified  [4minterpreter[24m.   If  the optional [4marg[24m is specified, it becomes the
       first argument to the [4minterpreter[24m,  and  the  name  of  the  originally
       [1mexecve[22m()‚Äôd file becomes the second argument; otherwise, the name of the
       originally  [1mexecve[22m()‚Äôd  file  becomes the first argument.  The original
       arguments are shifted over to become the subsequent arguments.  The ze‚Äê
       roth argument, normally the name of the [1mexecve[22m()‚Äôd file,  is  left  un‚Äê
       changed.

       The  argument [4margv[24m is a pointer to a null‚Äêterminated array of character
       pointers to null‚Äêterminated character strings.  These strings construct
       the argument list to be made available to the new  process.   At  least
       one argument must be present in the array; by custom, the first element
       should  be the name of the executed program (for example, the last com‚Äê
       ponent of [4mpath[24m).

       The argument [4menvp[24m is also a pointer to a null‚Äêterminated array of char‚Äê
       acter pointers to null‚Äêterminated strings.  A pointer to this array  is
       normally  stored in the global variable [4menviron.[24m These strings pass in‚Äê
       formation to the new process that is not directly an  argument  to  the
       command (see [4menviron[24m(7)).

       File  descriptors  open in the calling process image remain open in the
       new process image, except for those for which the close‚Äêon‚Äêexec flag is
       set (see [4mclose[24m(2) and [4mfcntl[24m(2)).  Descriptors that remain open are  un‚Äê
       affected by [1mexecve[22m().

       Signals  set to be ignored in the calling process are set to be ignored
       in the new process. Signals which are set to be caught in  the  calling
       process  image  are  set  to  default  action in the new process image.
       Blocked signals remain blocked regardless of changes to the signal  ac‚Äê
       tion.   The signal stack is reset to be undefined (see [4msigaction[24m(2) for
       more information).

       If the set‚Äêuser‚ÄêID mode bit of the new process image file is  set  (see
       [4mchmod[24m(2)), the effective user ID of the new process image is set to the
       owner  ID  of the new process image file.  If the set‚Äêgroup‚ÄêID mode bit
       of the new process image file is set, the effective group ID of the new
       process image is set to the group ID of the  new  process  image  file.
       The  real user ID, real group ID and supplementary group IDs of the new
       process image remain the same as the calling process image.

       The new process also inherits the following attributes from the calling
       process:

             process ID           see [4mgetpid[24m(2)
             parent process ID    see [4mgetppid[24m(2)
             process group ID     see [4mgetpgrp[24m(2)
             access groups        see [4mgetgroups[24m(2)
             working directory    see [4mchdir[24m(2)
             root directory       see [4mchroot[24m(2)
             control terminal     see [4mtermios[24m(4)
             resource usages      see [4mgetrusage[24m(2)
             interval timers      see [4mgetitimer[24m(2)
             resource limits      see [4mgetrlimit[24m(2)
             file mode mask       see [4mumask[24m(2)
             signal mask          see [4msigvec[24m(2), [4msigsetmask[24m(2)

       When a program is executed as a result of an [1mexecve[22m() call, it  is  en‚Äê
       tered as follows:

             main(argc, argv, envp)
             int argc;
             char **argv, **envp;

       where  [4margc[24m  is  the number of elements in [4margv[24m (the ‚Äò‚Äòarg count‚Äô‚Äô) and
       [4margv[24m points to the array of character pointers to the  arguments  them‚Äê
       selves.

[1mRETURN VALUES[0m
       As  the [1mexecve[22m() function overlays the current process image with a new
       process image the successful call has no  process  to  return  to.   If
       [1mexecve[22m()  does return to the calling process an error has occurred; the
       return value will be ‚Äê1 and the global variable [4merrno[24m is set  to  indi‚Äê
       cate the error.

[1mERRORS[0m
       [1mExecve[22m() will fail and return to the calling process if:

       [ENOTDIR]       A component of the path prefix is not a directory.

       [EINVAL]        The  pathname  contains a character with the high‚Äêorder
                       bit set.

       [ENAMETOOLONG]  A component of a pathname exceeded 255  characters,  or
                       an entire path name exceeded 1023 characters.

       [ENOENT]        The new process file does not exist.

       [ELOOP]         Too many symbolic links were encountered in translating
                       the pathname.

       [EACCES]        Search permission is denied for a component of the path
                       prefix.

       [EACCES]        The new process file is not an ordinary file.

       [EACCES]        The new process file mode denies execute permission.

       [ENOEXEC]       The new process file has the appropriate access permis‚Äê
                       sion, but has an invalid magic number in its header.

       [ETXTBSY]       The  new process file is a pure procedure (shared text)
                       file that is currently open for writing or  reading  by
                       some process.

       [ENOMEM]        The  new  process  requires more virtual memory than is
                       allowed by the imposed maximum ([4mgetrlimit[24m(2)).

       [E2BIG]         The number of bytes in the new process‚Äôs argument  list
                       is  larger than the system‚Äêimposed limit.  The limit in
                       the system  as  released  is  20480  bytes  (NCARGS  in
                       ‚ü®[4msys/param.h[24m‚ü©.

       [EFAULT]        The new process file is not as long as indicated by the
                       size values in its header.

       [EFAULT]        [4mPath[24m, [4margv[24m, or [4menvp[24m point to an illegal address.

       [EIO]           An  I/O error occurred while reading from the file sys‚Äê
                       tem.

[1mCAVEAT[0m
       If a program is [4msetuid[24m to a non‚Äêsuper‚Äêuser, but is  executed  when  the
       real  [4muid[24m is ‚Äò‚Äòroot‚Äô‚Äô, then the program has some of the powers of a su‚Äê
       per‚Äêuser as well.

[1mSEE ALSO[0m
       [4mexit[24m(2), [4mfork[24m(2), [4mexecl[24m(3), [4menviron[24m(7)

[1mHISTORY[0m
       The [1mexecve [22mfunction call appeared in 4.2BSD.

4th Berkeley Distribution       March 10, 1991                       EXECVE(2)
