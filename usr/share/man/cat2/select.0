SELECT(2)                     System Calls Manual                    SELECT(2)

[1mNAME[0m
       select ‚Äî synchronous I/O multiplexing

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/time.h>[0m

       [4mint[0m
       [1mselect[22m([4mint[24m  [4mnfds[24m, [4mfd_set[24m [4m*readfds[24m, [4mfd_set[24m [4m*writefds[24m, [4mfd_set[24m [4m*exceptfds[24m,
           [4mstruct[24m [4mtimeval[24m [4m*timeout[24m);

       [1mFD_SET[22m([4mfd[24m, [4m&fdset[24m);

       [1mFD_CLR[22m([4mfd[24m, [4m&fdset[24m);

       [1mFD_ISSET[22m([4mfd[24m, [4m&fdset[24m);

       [1mFD_ZERO[22m([4m&fdset[24m);

[1mDESCRIPTION[0m
       [1mSelect[22m() examines the I/O descriptor sets whose addresses are passed in
       [4mreadfds[24m, [4mwritefds[24m, and [4mexceptfds[24m to see if some  of  their  descriptors
       are  ready  for  reading, are ready for writing, or have an exceptional
       condition  pending,  respectively.   The  first  [4mnfds[24m  descriptors  are
       checked in each set; i.e., the descriptors from 0 through [4mnfds[24m‚Äê1 in the
       descriptor  sets  are examined.  On return, [1mselect[22m() replaces the given
       descriptor sets with subsets consisting of those descriptors  that  are
       ready  for  the requested operation.  [1mSelect[22m() returns the total number
       of ready descriptors in all the sets.

       The descriptor sets are stored as bit fields  in  arrays  of  integers.
       The  following  macros  are  provided  for manipulating such descriptor
       sets: [1mFD_ZERO[22m([4m&fdsetx[24m) initializes a descriptor set [4mfdset[24m to  the  null
       set.   [1mFD_SET[22m([4mfd[24m, [4m&fdset[24m) includes a particular descriptor [4mfd[24m in [4mfdset[24m.
       [1mFD_CLR[22m([4mfd[24m, [4m&fdset[24m) removes [4mfd[24m from [4mfdset[24m.  [1mFD_ISSET[22m([4mfd[24m, [4m&fdset[24m) is non‚Äê
       zero if [4mfd[24m is a member of [4mfdset[24m, zero otherwise.  The behavior of these
       macros is undefined if a descriptor value is less than zero or  greater
       than  or  equal  to FD_SETSIZE, which is normally at least equal to the
       maximum number of descriptors supported by the system.

       If [4mtimeout[24m is a non‚Äênil pointer, it specifies  a  maximum  interval  to
       wait  for  the selection to complete.  If [4mtimeout[24m is a nil pointer, the
       select blocks indefinitely.  To affect a  poll,  the  [4mtimeout[24m  argument
       should be non‚Äênil, pointing to a zero‚Äêvalued timeval structure.

       Any of [4mreadfds[24m, [4mwritefds[24m, and [4mexceptfds[24m may be given as nil pointers if
       no descriptors are of interest.

[1mRETURN VALUES[0m
       [1mSelect[22m()  returns the number of ready descriptors that are contained in
       the descriptor sets, or ‚Äê1 if an error occurred.  If the time limit ex‚Äê
       pires, [1mselect[22m() returns 0.  If [1mselect[22m() returns with an error,  includ‚Äê
       ing one due to an interrupted call, the descriptor sets will be unmodi‚Äê
       fied.

[1mERRORS[0m
       An error return from [1mselect[22m() indicates:

       [EBADF]            One  of the descriptor sets specified an invalid de‚Äê
                          scriptor.

       [EINTR]            A signal was delivered before the time limit expired
                          and before any of the selected events occurred.

       [EINVAL]           The specified time limit is  invalid.   One  of  its
                          components is negative or too large.

[1mSEE ALSO[0m
       [4maccept[24m(2),    [4mconnect[24m(2),    [4mread[24m(2),   [4mwrite[24m(2),   [4mrecv[24m(2),   [4msend[24m(2),
       [4mgetdtablesize[24m(2)

[1mBUGS[0m
       Although the provision of [4mgetdtablesize[24m(2) was intended to  allow  user
       programs to be written independent of the kernel limit on the number of
       open  files, the dimension of a sufficiently large bit field for select
       remains a problem.  The default  size  FD_SETSIZE  (currently  256)  is
       somewhat  larger  than  the  current kernel limit to the number of open
       files.  However, in order to accommodate programs  which  might  poten‚Äê
       tially use a larger number of open files with select, it is possible to
       increase this size within a program by providing a larger definition of
       FD_SETSIZE before the inclusion of ‚ü®[4msys/types.h[24m‚ü©.

       [1mSelect[22m()  should  probably  return the time remaining from the original
       timeout, if any, by modifying the time value in place.  This may be im‚Äê
       plemented in future versions of the system.  Thus, it is unwise to  as‚Äê
       sume that the timeout value will be unmodified by the [1mselect[22m() call.

[1mHISTORY[0m
       The [1mselect [22mfunction call appeared in 4.2BSD.

4.2 Berkeley Distribution       March 10, 1991                       SELECT(2)
