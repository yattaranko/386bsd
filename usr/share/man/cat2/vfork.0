VFORK(2)                      System Calls Manual                     VFORK(2)

[1mNAME[0m
       vfork ‚Äî spawn new process in a virtual memory efficient way

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m

       [4mint[0m
       [1mvfork[22m([4mvoid[24m);

[1mDESCRIPTION[0m
       [1mVfork[22m()  can  be used to create new processes without fully copying the
       address space of the old process, which is horrendously inefficient  in
       a  paged  environment.   It is useful when the purpose of [4mfork[24m(2) would
       have been to create a new system context for an [4mexecve[24m.   [1mVfork[22m()  dif‚Äê
       fers from [4mfork[24m in that the child borrows the parent‚Äôs memory and thread
       of  control  until  a call to [4mexecve[24m(2) or an exit (either by a call to
       [4mexit[24m(2) or abnormally.)  The parent  process  is  suspended  while  the
       child is using its resources.

       [1mVfork[22m()  returns  0  in  the child‚Äôs context and (later) the pid of the
       child in the parent‚Äôs context.

       [1mVfork[22m() can normally be used just like [4mfork[24m.  It does  not  work,  how‚Äê
       ever,  to return while running in the childs context from the procedure
       that called [1mvfork[22m() since the eventual return from [1mvfork[22m()  would  then
       return  to a no longer existent stack frame.  Be careful, also, to call
       [4m_exit[24m rather than [4mexit[24m if you can‚Äôt [4mexecve[24m, since [4mexit[24m will  flush  and
       close  standard  I/O channels, and thereby mess up the parent processes
       standard I/O data structures.  (Even with [4mfork[24m it is wrong to call [4mexit[0m
       since buffered data would then be flushed twice.)

[1mSEE ALSO[0m
       [4mfork[24m(2), [4mexecve[24m(2), [4msigvec[24m(2), [4mwait[24m(2),

[1mDIAGNOSTICS[0m
       Same as for [4mfork[24m.

[1mBUGS[0m
       This system call will be eliminated when proper system  sharing  mecha‚Äê
       nisms  are  implemented.  Users should not depend on the memory sharing
       semantics of [4mvfork[24m as it will, in that  case,  be  made  synonymous  to
       [4mfork[24m.

       To  avoid a possible deadlock situation, processes that are children in
       the middle of a [1mvfork[22m() are never  sent  SIGTTOU  or  SIGTTIN  signals;
       rather,  output or [4mioctl[24m(2) calls are allowed and input attempts result
       in an end‚Äêof‚Äêfile indication.

[1mHISTORY[0m
       The [1mvfork [22mfunction call appeared in 3.0BSD.

4th Berkeley Distribution       March 10, 1991                        VFORK(2)
