SOCKET(2)                     System Calls Manual                    SOCKET(2)

[1mNAME[0m
       socket ‚Äî create an endpoint for communication

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/socket.h>[0m

       [4mint[0m
       [1msocket[22m([4mint[24m [4mdomain[24m, [4mint[24m [4mtype[24m, [4mint[24m [4mprotocol[24m);

[1mDESCRIPTION[0m
       [1mSocket[22m()  creates  an endpoint for communication and returns a descrip‚Äê
       tor.

       The [4mdomain[24m parameter specifies a  communications  domain  within  which
       communication  will  take place; this selects the protocol family which
       should be used.   These  families  are  defined  in  the  include  file
       ‚ü®[4msys/socket.h[24m‚ü©.  The currently understood formats are

             AF_UNIX         (UNIX internal protocols),
             AF_INET         (ARPA Internet protocols),
             AF_ISO          (ISO protocols),
             AF_NS           (Xerox Network Systems protocols), and
             AF_IMPLINK      (IMP host at IMP link layer).

       The  socket  has  the  indicated [4mtype[24m, which specifies the semantics of
       communication.  Currently defined types are:

             SOCK_STREAM
             SOCK_DGRAM
             SOCK_RAW
             SOCK_SEQPACKET
             SOCK_RDM

       A SOCK_STREAM type provides  sequenced,  reliable,  two‚Äêway  connection
       based  byte streams.  An out‚Äêof‚Äêband data transmission mechanism may be
       supported.  A SOCK_DGRAM socket supports datagrams (connectionless, un‚Äê
       reliable messages of a fixed  (typically  small)  maximum  length).   A
       SOCK_SEQPACKET  socket  may provide a sequenced, reliable, two‚Äêway con‚Äê
       nection‚Äêbased data transmission path for  datagrams  of  fixed  maximum
       length;  a  consumer may be required to read an entire packet with each
       read system call.  This facility is protocol  specific,  and  presently
       implemented  only for PF_NS.  SOCK_RAW sockets provide access to inter‚Äê
       nal network protocols and interfaces.  The  types  SOCK_RAW,  which  is
       available  only  to the super‚Äêuser, and SOCK_RDM, which is planned, but
       not yet implemented, are not described here.

       The [4mprotocol[24m specifies a  particular  protocol  to  be  used  with  the
       socket.  Normally only a single protocol exists to support a particular
       socket  type  within  a given protocol family.  However, it is possible
       that many protocols may exist, in which case a particular protocol must
       be specified in this manner.  The protocol number to use is  particular
       to  the  communication  domain in which communication is to take place;
       see [4mprotocols[24m(5).

       Sockets of type SOCK_STREAM are full‚Äêduplex byte  streams,  similar  to
       pipes.   A  stream  socket must be in a [4mconnected[24m state before any data
       may be sent or received on it.  A connection to another socket is  cre‚Äê
       ated  with  a [4mconnect[24m(2) call.  Once connected, data may be transferred
       using [4mread[24m(2) and [4mwrite[24m(2) calls or some variant  of  the  [4msend[24m(2)  and
       [4mrecv[24m(2)  calls.   When  a  session has been completed a [4mclose[24m(2) may be
       performed.  Out‚Äêof‚Äêband data may also be transmitted  as  described  in
       [4msend[24m(2) and received as described in [4mrecv[24m(2).

       The  communications  protocols  used  to implement a SOCK_STREAM insure
       that data is not lost or duplicated.  If a piece of data for which  the
       peer  protocol  has  buffer  space  cannot  be successfully transmitted
       within a reasonable length of time, then the connection  is  considered
       broken  and  calls  will  indicate  an  error  with ‚Äê1 returns and with
       ETIMEDOUT as the specific code in the global variable [4merrno[24m.  The  pro‚Äê
       tocols  optionally keep sockets ‚Äúwarm‚Äù by forcing transmissions roughly
       every minute in the absence of other activity.  An error is then  indi‚Äê
       cated  if  no  response can be elicited on an otherwise idle connection
       for a extended period (e.g. 5 minutes).  A SIGPIPE signal is raised  if
       a  process sends on a broken stream; this causes naive processes, which
       do not handle the signal, to exit.

       SOCK_SEQPACKET sockets employ the  same  system  calls  as  SOCK_STREAM
       sockets.   The  only  difference is that [4mread[24m(2) calls will return only
       the amount of data requested, and any remaining in the arriving  packet
       will be discarded.

       SOCK_DGRAM  and  SOCK_RAW  sockets allow sending of datagrams to corre‚Äê
       spondents named in [4msend[24m(2) calls.   Datagrams  are  generally  received
       with  [4mrecvfrom[24m(2),  which returns the next datagram with its return ad‚Äê
       dress.

       An [4mfcntl[24m(2) call can be used to specify a process group  to  receive  a
       SIGURG  signal  when  the out‚Äêof‚Äêband data arrives.  It may also enable
       non‚Äêblocking I/O and asynchronous notification of I/O events via SIGIO.

       The operation of sockets is controlled by socket level [4moptions[24m.   These
       options  are  defined  in  the  file ‚ü®[4msys/socket.h[24m‚ü©.  [4mSetsockopt[24m(2) and
       [4mgetsockopt[24m(2) are used to set and get options, respectively.

[1mRETURN VALUES[0m
       A ‚Äê1 is returned if an error occurs, otherwise the return  value  is  a
       descriptor referencing the socket.

[1mERRORS[0m
       The [1msocket[22m() call fails if:

       [EPROTONOSUPPORT]  The  protocol  type or the specified protocol is not
                          supported within this domain.

       [EMFILE]           The per‚Äêprocess descriptor table is full.

       [ENFILE]           The system file table is full.

       [EACCESS]          Permission to create a socket of the specified  type
                          and/or protocol is denied.

       [ENOBUFS]          Insufficient  buffer space is available.  The socket
                          cannot be created  until  sufficient  resources  are
                          freed.

[1mSEE ALSO[0m
       [4maccept[24m(2),   [4mbind[24m(2),   [4mconnect[24m(2),   [4mgetprotoent[24m(3),   [4mgetsockname[24m(2),
       [4mgetsockopt[24m(2),  [4mioctl[24m(2),  [4mlisten[24m(2),  [4mread[24m(2),   [4mrecv[24m(2),   [4mselect[24m(2),
       [4msend[24m(2), [4mshutdown[24m(2), [4msocketpair[24m(2), [4mwrite[24m(2)

       [4mAn[24m  [4mIntroductory[24m [4m4.3[24m [4mBSD[24m [4mInterprocess[24m [4mCommunication[24m [4mTutorial[24m, reprinted
       in UNIX Programmer‚Äôs Supplementary Documents Volume 1.

       [4mBSD[24m [4mInterprocess[24m [4mCommunication[24m [4mTutorial[24m, reprinted in UNIX Programmer‚Äôs
       Supplementary Documents Volume 1.

[1mHISTORY[0m
       The [1msocket [22mfunction call appeared in 4.2BSD.

4.2 Berkeley Distribution       March 10, 1991                       SOCKET(2)
