GETRLIMIT(2)                  System Calls Manual                 GETRLIMIT(2)

[1mNAME[0m
       getrlimit, setrlimit ‚Äî control maximum system resource consumption

[1mSYNOPSIS[0m
       [1m#include <sys/time.h>[0m
       [1m#include <sys/resource.h>[0m

       [4mint[0m
       [1mgetrlimit[22m([4mint[24m [4mresource[24m, [4mstruct[24m [4mrlimit[24m [4m*rlp[24m);

       [4mint[0m
       [1msetrlimit[22m([4mint[24m [4mresource[24m, [4mstruct[24m [4mrlimit[24m [4m*rlp[24m);

[1mDESCRIPTION[0m
       Limits  on  the  consumption of system resources by the current process
       and each process it creates may be obtained with the [1mgetrlimit[22m()  call,
       and set with the [1msetrlimit[22m() call.

       The [4mresource[24m parameter is one of the following:

       RLIMIT_CPU      the  maximum amount of cpu time (in seconds) to be used
                       by each process.

       RLIMIT_FSIZE    the largest size, in bytes, of any single file that may
                       be created.

       RLIMIT_DATA     the maximum size, in bytes, of the data segment  for  a
                       process;  this defines how far a program may extend its
                       break with the [4msbrk[24m(2) system call.

       RLIMIT_STACK    the maximum size, in bytes, of the stack segment for  a
                       process; this defines how far a program‚Äôs stack segment
                       may be extended.  Stack extension is performed automat‚Äê
                       ically by the system.

       RLIMIT_CORE     the  largest size, in bytes, of a [4mcore[24m file that may be
                       created.

       RLIMIT_RSS      the maximum size, in bytes, to which a process‚Äôs  resi‚Äê
                       dent  set  size  may grow.  This imposes a limit on the
                       amount of physical memory to be given to a process;  if
                       memory  is tight, the system will prefer to take memory
                       from processes that are exceeding their declared  resi‚Äê
                       dent set size.

       RLIMIT_MEMLOCK  the maximum size, in bytes, of locked down (e.g. forced
                       resident) memory that can be used by a process. By def‚Äê
                       inition,  one cannot lock more memory than is resident,
                       more memory than is allocated to  a  process,  or  more
                       memory  than is present for use by processes within the
                       computer.  N.B. memory involved  in  read/write  opera‚Äê
                       tions is also temporarily locked resident; these opera‚Äê
                       tions do not affect this resource in any way.

       RLIMIT_NPROC    the maximum number of processes per user

       A resource limit is specified as a soft limit and a hard limit.  When a
       soft  limit is exceeded a process may receive a signal (for example, if
       the cpu time or file size is exceeded), but it will be allowed to  con‚Äê
       tinue  execution  until  it reaches the hard limit (or modifies its re‚Äê
       source limit).  The [4mrlimit[24m structure is used to specify  the  hard  and
       soft limits on a resource,

             struct rlimit {
                     int     rlim_cur;       /* current (soft) limit */
                     int     rlim_max;       /* hard limit */
             };

       Only the super‚Äêuser may raise the maximum limits.  Other users may only
       alter  [4mrlim_cur[24m  within  the range from 0 to [4mrlim_max[24m or (irreversibly)
       lower [4mrlim_max[24m.

       An  ‚Äúinfinite‚Äù  value  for  a  limit  is   defined   as   RLIM_INFINITY
       (0x7fffffff).

       Because this information is stored in the per‚Äêprocess information, this
       system  call  must be executed directly by the shell if it is to affect
       all future processes created by the shell; [1mlimit  [22mis  thus  a  built‚Äêin
       command to [4mcsh[24m(1).

       The  system  refuses  to extend the data or stack space when the limits
       would be exceeded in the normal way: a [4mbreak[24m call  fails  if  the  data
       space  limit  is reached.  When the stack limit is reached, the process
       receives a segmentation fault (SIGSEGV); if this signal is  not  caught
       by a handler using the signal stack, this signal will kill the process.

       A  file I/O operation that would create a file larger that the process‚Äô
       soft limit will cause the write to fail and a signal SIGXFSZ to be gen‚Äê
       erated; this normally terminates the process, but may be caught.   When
       the  soft  cpu  time limit is exceeded, a signal SIGXCPU is sent to the
       offending process.

[1mRETURN VALUES[0m
       A 0 return value indicates that the call succeeded, changing or return‚Äê
       ing the resource limit.   A return value of ‚Äê1 indicates that an  error
       occurred, and an error code is stored in the global location [4merrno[24m.

[1mERRORS[0m
       [1mGetrlimit[22m() and [1msetrlimit[22m() will fail if:

       [EFAULT]           The address specified for [4mrlp[24m is invalid.

       [EPERM]            The limit specified to [1msetrlimit[22m() would have raised
                          the  maximum  limit value, and the caller is not the
                          super‚Äêuser.

[1mSEE ALSO[0m
       [4mcsh[24m(1), [4mquota[24m(2), [4msigvec[24m(2), [4msigstack[24m(2)

[1mBUGS[0m
       There should be [1mlimit [22mand [1munlimit [22mcommands in [4msh[24m(1) as well as in [4mcsh[24m.

[1mHISTORY[0m
       The [1mgetrlimit [22mfunction call appeared in 4.2BSD.

4th Berkeley Distribution       March 10, 1991                    GETRLIMIT(2)
