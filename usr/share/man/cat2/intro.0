INTRO(2)                      System Calls Manual                     INTRO(2)

[1mNAME[0m
       intro ‚Äî introduction to system calls and error numbers

[1mSYNOPSIS[0m
       [1m#include <sys/errno.h>[0m

[1mDESCRIPTION[0m
       This  section provides an overview of the system calls, their error re‚Äê
       turns, and other common definitions and concepts.

[1mDIAGNOSTICS[0m
       Nearly all of the system calls provide an error number in the  external
       variable [4merrno[24m, which is defined as:

             [1mextern int errno[0m

       When  a system call detects an error, it returns an integer value indi‚Äê
       cating failure (usually ‚Äê1) and sets the  variable  [4merrno[24m  accordingly.
       <This  allows  interpretation  of  the failure on receiving a ‚Äê1 and to
       take action accordingly.> Successful calls never set [4merrno[24m;  once  set,
       it  remains until another error occurs.  It should only be examined af‚Äê
       ter an error.  Note that a number of system calls overload the meanings
       of these error numbers, and that the meanings must be  interpreted  ac‚Äê
       cording to the type and circumstances of the call.

       The following is a complete list of the errors and their names as given
       in ‚ü®[4msys/errno.h[24m‚ü©.

       0 [4mError[24m [4m0[24m.  Not used.

       1 EPERM [4mOperation[24m [4mnot[24m [4mpermitted[24m [4m.[24m An attempt was made to perform an op‚Äê
               eration  limited to processes with appropriate privileges or to
               the owner of a file or other resources.

       2 ENOENT [4mNo[24m [4msuch[24m [4mfile[24m [4mor[24m [4mdirectory[24m.  A component of a  specified  path‚Äê
               name did not exist, or the pathname was an empty string.

       3  ESRCH  [4mNo[24m  [4msuch[24m [4mprocess[24m.  No process could be found corresponding to
               that specified by the given process ID.

       4 EINTR [4mInterrupted[24m [4mfunction[24m [4mcall[24m.  An  asynchronous  signal  (such  as
               SIGINT  or SIGQUIT) was caught by the process during the execu‚Äê
               tion of an interruptible function. If the signal  handler  per‚Äê
               forms  a  normal return, the interupted function call will seem
               to have returned the error condition.

       5 EIO [4mInput/output[24m [4merror[24m.  Some physical  input  or  output  error  oc‚Äê
               curred.   This  error not be reported until a subsequent opera‚Äê
               tion on the same file descriptor and may be lost (over written)
               by any subsequent errors.

       6 ENXIO [4mNo[24m [4msuch[24m [4mdevice[24m [4mor[24m [4maddress[24m.  Input or output on a  special  file
               referred  to a device that did not exist, or made a request be‚Äê
               yond the limits of the device.  This error may also occur when,
               for example, a tape drive is not online or no disk pack  is  is
               loaded on a drive.

       7  E2BIG  [4mArg[24m [4mlist[24m [4mtoo[24m [4mlong[24m.  The number of bytes used for the argument
               and environment list of the new process  exceeded  the  current
               limit of 20480 bytes (NCARGS in ‚ü®[4msys/param.h[24m‚ü©).

       8  ENOEXEC  [4mExec[24m  [4mformat[24m  [4merror[24m.   A request was made to execute a file
               that, although it has the appropriate permissions, was  not  in
               the format required for an executable file.

       9  EBADF  [4mBad[24m  [4mfile[24m  [4mdescriptor[24m.  A file descriptor argument was out of
               range, referred to no open file, or a read (write) request  was
               made to a file that was only open for writing (reading).

       10  ECHILD [4mNo[24m [4mchild[24m [4mprocesses[24m.  A [4mwait[24m or [4mwaitpid[24m function was executed
               by a  process  that  had  no  existing  or  unwaited‚Äêfor  child
               processes.

       11  EDEADLK  [4mResource[24m  [4mdeadlock[24m [4mavoided[24m.  An attempt was made to lock a
               system resource that would have resulted in a  deadlock  situa‚Äê
               tion.

       12 ENOMEM [4mCannnot[24m [4mallocate[24m [4mmemory[24m.  The new process image required more
               memory  than  was  allowed by the hardware or by system‚Äêimposed
               memory management constraints.  A lack of swap  space  is  nor‚Äê
               mally  temporary;  however, a lack of core is not.  Soft limits
               may be increased to their corresponding hard limits.

       13 EACCES [4mPermission[24m [4mdenied[24m.  An attempt was made to access a file in a
               way forbidden by its file access permissions.

       14 EFAULT [4mBad[24m [4maddress[24m.  The system detected an invalid address  in  at‚Äê
               tempting to use an argument of a call.

       15  ENOTBLK [4mNot[24m [4ma[24m [4mblock[24m [4mdevice[24m.  A block device operation was attempted
               on a non‚Äêblock device or file.

       16 EBUSY [4mResource[24m [4mbusy[24m.  An attempt to use a system resource which  was
               in use at the time in a manner which would have conflicted with
               the request.

       17  EEXIST  [4mFile[24m [4mexists[24m.  An existing file was mentioned in an inappro‚Äê
               priate context, for instance, as the new link name  in  a  [4mlink[0m
               function.

       18  EXDEV  [4mImproper[24m [4mlink[24m.  A hard link to a file on another file system
               was attempted.

       19 ENODEV [4mOperation[24m [4mnot[24m [4msupported[24m [4mby[24m [4mdevice[24m.  An attempt  was  made  to
               apply  an inappropriate function to a device, for example, try‚Äê
               ing to read a write‚Äêonly device such as a printer.

       20 ENOTDIR [4mNot[24m [4ma[24m [4mdirectory[24m.  A component of the specified pathname  ex‚Äê
               isted,  but  it  was  not a directory, when a directory was ex‚Äê
               pected.

       21 EISDIR [4mIs[24m [4ma[24m [4mdirectory[24m.  An attempt was made to open a directory with
               write mode specified.

       22 EINVAL [4mInvalid[24m [4margument[24m.  Some invalid argument was  supplied.  (For
               example,  specifying  an  undefined  signal to a [4msignal[24m or [4mkill[0m
               function).

       23 ENFILE [4mToo[24m [4mmany[24m [4mopen[24m [4mfiles[24m [4min[24m [4msystem[24m.  Maximum number  of  file  de‚Äê
               scriptors  allowable  on  the system has been reached and a re‚Äê
               quests for an open cannot be satisfied until at least  one  has
               been closed.

       24  EMFILE  [4mToo[24m [4mmany[24m [4mopen[24m [4mfiles[24m.  <As released, the limit on the number
               of open files per process is 64.> [4mGetdtablesize[24m(2) will  obtain
               the current limit.

       25  ENOTTY  [4mInappropriate[24m  [4mioctl[24m  [4mfor[24m  [4mdevice[24m.  A control function (see
               [4mioctl[24m(2)) was attempted for a file or special device for  which
               the operation was inappropriate.

       26  ETXTBSY  [4mText[24m  [4mfile[24m  [4mbusy[24m.   The  new  process was a pure procedure
               (shared text) file  which  was  open  for  writing  by  another
               process,  or the pure procedure file was being executed an [4mopen[0m
               call requested write access.

       27 EFBIG [4mFile[24m [4mtoo[24m [4mlarge[24m.  The size  of  a  file  exceeded  the  maximum
               (about 2.1E9 bytes).

       28  ENOSPC  [4mDevice[24m [4mout[24m [4mof[24m [4mspace[24m.  A [4mwrite[24m to an ordinary file, the cre‚Äê
               ation of a directory or symbolic link, or the creation of a di‚Äê
               rectory entry failed because no more disk blocks are  available
               on  the  file system, or the allocation of an inode for a newly
               created file failed because no more inodes are available on the
               file system.

       29 ESPIPE [4mIllegal[24m [4mseek[24m.  An [4mlseek[24m function was issued on a socket, pipe
               or FIFO.

       30 EROFS [4mRead‚Äêonly[24m [4mfile[24m [4msystem[24m.  An attempt was made to modify  a  file
               or  directory  was  made on a file system that was read‚Äêonly at
               the time.

       31 EMLINK [4mToo[24m [4mmany[24m [4mlinks[24m.  Maximum allowable hard  links  to  a  single
               file has been exceeded (limit of 32767 hard links per file).

       32  EPIPE  [4mBroken[24m  [4mpipe[24m.   A  write on a pipe, socket or FIFO for which
               there is no process to read the data.

       33 EDOM [4mNumerical[24m [4margument[24m [4mout[24m [4mof[24m [4mdomain[24m.  A numerical  input  argument
               was outside the defined domain of the mathematical function.

       34  ERANGE  [4mNumerical[24m  [4mresult[24m  [4mout[24m [4mof[24m [4mrange[24m.  A numerical result of the
               function was to large to fit in the  available  space  (perhaps
               exceeded precision).

       35 EAGAIN [4mResource[24m [4mtemporarily[24m [4munavailable[24m.  This is a temporary condi‚Äê
               tion and later calls to the same routine may complete normally.

       36  EINPROGRESS  [4mOperation[24m  [4mnow[24m [4min[24m [4mprogress[24m.  An operation that takes a
               long time to complete (such as a [4mconnect[24m(2)) was attempted on a
               non‚Äêblocking object (see [4mfcntl[24m(2)).

       37 EALREADY [4mOperation[24m [4malready[24m [4min[24m [4mprogress[24m.  An operation was  attempted
               on  a  non‚Äêblocking  object  that  already  had an operation in
               progress.

       38 ENOTSOCK [4mSocket[24m [4moperation[24m [4mon[24m [4mnon‚Äêsocket[24m.  Self‚Äêexplanatory.

       39 EDESTADDRREQ [4mDestination[24m [4maddress[24m [4mrequired[24m.  A required  address  was
               omitted from an operation on a socket.

       40  EMSGSIZE  [4mMessage[24m  [4mtoo[24m [4mlong[24m.  A message sent on a socket was larger
               than the internal message buffer or some other network limit.

       41 EPROTOTYPE [4mProtocol[24m [4mwrong[24m [4mtype[24m [4mfor[24m [4msocket[24m.  A protocol was specified
               that does not support the semantics  of  the  socket  type  re‚Äê
               quested. For example, you cannot use the ARPA Internet UDP pro‚Äê
               tocol with type SOCK_STREAM.

       42 ENOPROTOOPT [4mProtocol[24m [4mnot[24m [4mavailable[24m.  A bad option or level was spec‚Äê
               ified in a [4mgetsockopt[24m(2) or [4msetsockopt[24m(2) call.

       43  EPROTONOSUPPORT  [4mProtocol[24m [4mnot[24m [4msupported[24m.  The protocol has not been
               configured into the system or no implementation for it exists.

       44 ESOCKTNOSUPPORT [4mSocket[24m [4mtype[24m [4mnot[24m  [4msupported[24m.   The  support  for  the
               socket  type  has not been configured into the system or no im‚Äê
               plementation for it exists.

       45 EOPNOTSUPP [4mOperation[24m [4mnot[24m [4msupported[24m.  The attempted operation is  not
               supported  for the type of object referenced.  Usually this oc‚Äê
               curs when a file descriptor refers to a  file  or  socket  that
               cannot  support this operation, for example, trying to [4maccept[24m a
               connection on a datagram socket.

       46 EPFNOSUPPORT [4mProtocol[24m [4mfamily[24m [4mnot[24m [4msupported[24m.  The protocol family has
               not been configured into the system or no implementation for it
               exists.

       47 EAFNOSUPPORT [4mAddress[24m [4mfamily[24m [4mnot[24m [4msupported[24m [4mby[24m  [4mprotocol[24m  [4mfamily[24m.   An
               address incompatible with the requested protocol was used.  For
               example,  you shouldn‚Äôt necessarily expect to be able to use NS
               addresses with ARPA Internet protocols.

       48 EADDRINUSE [4mAddress[24m [4malready[24m [4min[24m [4muse[24m.  Only one usage of  each  address
               is normally permitted.

       49  EADDRNOTAVAIL  [4mCannot[24m  [4massign[24m  [4mrequested[24m [4maddress[24m.  Normally results
               from an attempt to create a socket with an address not on  this
               machine.

       50  ENETDOWN  [4mNetwork[24m  [4mis[24m  [4mdown[24m.  A socket operation encountered a dead
               network.

       51 ENETUNREACH [4mNetwork[24m [4mis[24m [4munreachable[24m.   A  socket  operation  was  at‚Äê
               tempted to an unreachable network.

       52  ENETRESET  [4mNetwork[24m  [4mdropped[24m [4mconnection[24m [4mon[24m [4mreset[24m.  The host you were
               connected to crashed and rebooted.

       53 ECONNABORTED [4mSoftware[24m [4mcaused[24m [4mconnection[24m [4mabort[24m.  A  connection  abort
               was caused internal to your host machine.

       54  ECONNRESET  [4mConnection[24m  [4mreset[24m  [4mby[24m  [4mpeer[24m.  A connection was forcibly
               closed by a peer.  This normally results from  a  loss  of  the
               connection on the remote socket due to a timeout or a reboot.

       55 ENOBUFS [4mNo[24m [4mbuffer[24m [4mspace[24m [4mavailable[24m.  An operation on a socket or pipe
               was  not  performed because the system lacked sufficient buffer
               space or because a queue was full.

       56 EISCONN [4mSocket[24m [4mis[24m [4malready[24m [4mconnected[24m.  A [4mconnect[24m request was made  on
               an already connected socket; or, a [4msendto[24m or [4msendmsg[24m request on
               a  connected  socket  specified a destination when already con‚Äê
               nected.

       57 ENOTCONN [4mSocket[24m [4mis[24m [4mnot[24m [4mconnected[24m.  An request  to  send  or  receive
               data  was  disallowed  because  the socket is not connected and
               (when sending on a  datagram socket) no address was supplied.

       58 ESHUTDOWN [4mCannot[24m [4msend[24m [4mafter[24m [4msocket[24m [4mshutdown[24m.  A request to send data
               was disallowed because the socket had already  been  shut  down
               with a previous [4mshutdown[24m(2) call.

       60  ETIMEDOUT  [4mConnection[24m  [4mtimed[24m [4mout[24m.  A [4mconnect[24m or [4msend[24m request failed
               because the connected party did not properly  respond  after  a
               period of time.  (The timeout period is dependent on the commu‚Äê
               nication protocol.)

       61  ECONNREFUSED  [4mConnection[24m  [4mrefused[24m.  No connection could be made be‚Äê
               cause the target machine actively refused it.  This usually re‚Äê
               sults from trying to connect to a service that is  inactive  on
               the foreign host.

       62  ELOOP  [4mToo[24m  [4mmany[24m  [4mlevels[24m [4mof[24m [4msymbolic[24m [4mlinks[24m.  A path name lookup in‚Äê
               volved more than 8 symbolic links.

       63 ENAMETOOLONG [4mFile[24m [4mname[24m [4mtoo[24m [4mlong[24m.  A component of  a  path  name  ex‚Äê
               ceeded  255 (MAXNAMELEN) characters, or an entire path name ex‚Äê
               ceeded 1023 (MAXPATHLEN‚Äê1) characters.

       64 EHOSTDOWN [4mHost[24m [4mis[24m [4mdown[24m.  A socket operation failed because the  des‚Äê
               tination host was down.

       65  EHOSTUNREACH [4mNo[24m [4mroute[24m [4mto[24m [4mhost[24m.  A socket operation was attempted to
               an unreachable host.

       66 ENOTEMPTY [4mDirectory[24m [4mnot[24m [4mempty[24m.  A directory with entries other  than
               ‚Äò.‚Äô and ‚Äò..‚Äô was supplied to a remove directory or rename call.

       67 EPROCLIM [4mToo[24m [4mmany[24m [4mprocesses[24m.

       68 EUSERS [4mToo[24m [4mmany[24m [4musers[24m.  The quota system ran out of table entries.

       69  EDQUOT  [4mDisc[24m [4mquota[24m [4mexceeded[24m.  A [4mwrite[24m to an ordinary file, the cre‚Äê
               ation of a directory or symbolic link, or the creation of a di‚Äê
               rectory entry failed because the user‚Äôs quota  of  disk  blocks
               was  exhausted,  or the allocation of an inode for a newly cre‚Äê
               ated file failed because the user‚Äôs quota  of  inodes  was  ex‚Äê
               hausted.

       70 ESTALE [4mStale[24m [4mNFS[24m [4mfile[24m [4mhandle[24m.  An attempt was made to access an open
               file  (on an NFS filesystem) which is now unavailable as refer‚Äê
               enced by the file descriptor.  This may indicate the  file  was
               deleted  on the NFS server or some other catastrophic event oc‚Äê
               cured.

       72 EBADRPC [4mRPC[24m [4mstruct[24m [4mis[24m [4mbad[24m.  Exchange of RPC information  was  unsuc‚Äê
               cessful.

       73  ERPCMISMATCH  [4mRPC[24m  [4mversion[24m [4mwrong[24m.  The version of RPC on the remote
               peer is not compatible with the local version.

       74 EPROGUNAVAIL [4mRPC[24m [4mprog.[24m [4mnot[24m [4mavail[24m.  The requested program is not reg‚Äê
               istered on the remote host.

       75 EPROGMISMATCH [4mProgram[24m [4mversion[24m [4mwrong[24m.  The requested version  of  the
               program is not available on the remote host (RPC).

       76  EPROCUNAVAIL  [4mBad[24m [4mprocedure[24m [4mfor[24m [4mprogram[24m.  An RPC call was attempted
               for a procedure which doesn‚Äôt exist in the remote program.

       77 ENOLCK [4mNo[24m [4mlocks[24m [4mavailable[24m.  A system‚Äêimposed limit on the number  of
               simultaneous file locks was reached.

       78  ENOSYS  [4mFunction[24m  [4mnot[24m [4mimplemented[24m.  Attempted a system call that is
               not available on this system.

[1mDEFINITIONS[0m
       Process ID.
               Each active process in the system is uniquely identified  by  a
               non‚Äênegative integer called a process ID.  The range of this ID
               is from 0 to 30000.

       Parent process ID
               A  new  process  is created by a currently active process; (see
               [4mfork[24m(2)).  The parent process ID of a process is the process ID
               of its creator.

       Process Group ID
               Each active process is a member of  a  process  group  that  is
               identified  by  a non‚Äênegative integer called the process group
               ID.  This is the process ID of the group leader.  This grouping
               permits the signaling of related processes (see [4mkillpg[24m(2))  and
               the job control mechanisms of [4mcsh[24m(1).

       Tty Group ID
               Each active process can be a member of a terminal group that is
               identified  by  a non‚Äênegative integer called the tty group ID.
               This grouping is used to arbitrate between multiple  jobs  con‚Äê
               tending for the same terminal; (see [4mcsh[24m(1) and [4mtty[24m(4)).

       Real User ID and Real Group ID
               Each  user  on  the  system is identified by a positive integer
               termed the real user ID.

               Each user is also a member of one or more groups.  One of these
               groups is distinguished from others and  used  in  implementing
               accounting  facilities.   The positive integer corresponding to
               this distinguished group is termed the real group ID.

               All processes have a real user ID and real group ID.  These are
               initialized from the equivalent attributes of the process  that
               created it.

       Effective User Id, Effective Group Id, and Access Groups
               Access to system resources is governed by three values: the ef‚Äê
               fective  user  ID, the effective group ID, and the group access
               list.

               The effective user ID and effective group ID are initially  the
               process‚Äôs  real user ID and real group ID respectively.  Either
               may be modified through execution  of  a  set‚Äêuser‚ÄêID  or  set‚Äê
               group‚ÄêID file (possibly by one its ancestors) (see [4mexecve[24m(2)).

               The  group  access list is an additional set of group ID‚Äôs used
               only in determining resource accessibility.  Access checks  are
               performed as described below in ‚Äò‚ÄòFile Access Permissions‚Äô‚Äô.

       Super‚Äêuser
               A  process is recognized as a [4msuper‚Äêuser[24m process and is granted
               special privileges if its effective user ID is 0.

       Special Processes
               The processes with a process ID‚Äôs of 0, 1, and 2  are  special.
               Process  0  is  the scheduler.  Process 1 is the initialization
               process [4minit[24m, and is the ancestor of every other process in the
               system.  It is used to control the process structure.   Process
               2 is the paging daemon.

       Descriptor
               An  integer assigned by the system when a file is referenced by
               [4mopen[24m(2) or [4mdup[24m(2), or when a  socket  is  created  by  [4mpipe[24m(2),
               [4msocket[24m(2) or [4msocketpair[24m(2), which uniquely identifies an access
               path  to that file or socket from a given process or any of its
               children.

       File Name
               Names consisting of up to 255 (MAXNAMELEN)  characters  may  be
               used to name an ordinary file, special file, or directory.

               These  characters  may  be  selected  from the set of all ASCII
               character excluding 0 (NUL) and the ASCII code for ‚Äò/‚Äô (slash).
               (The parity bit, bit 7, must be 0.)

               Note that it is generally unwise to use ‚Äò*‚Äô, ‚Äò?‚Äô, ‚Äò[‚Äô or ‚Äò]‚Äô as
               part of file names because of the special meaning  attached  to
               these characters by the shell.

       Path Name
               A  path name is a NUL‚Äêterminated character string starting with
               an optional slash ‚Äò/‚Äô, followed by zero or more directory names
               separated by slashes, optionally followed by a file name.   The
               total length of a path name must be less than 1024 (MAXPATHLEN)
               characters.

               If  a  path name begins with a slash, the path search begins at
               the [4mroot[24m directory.  Otherwise, the search begins from the cur‚Äê
               rent working directory.  A slash by itself names the  root  di‚Äê
               rectory.  An empty pathname refers to the current directory.

       Directory
               A  directory  is  a  special type of file that contains entries
               that are references to  other  files.   Directory  entries  are
               called links.  By convention, a directory contains at least two
               links,  ‚Äò.‚Äô  and  ‚Äò..‚Äô,  referred to as [4mdot[24m and [4mdot‚Äêdot[24m respec‚Äê
               tively.  Dot refers to the directory itself and dot‚Äêdot  refers
               to its parent directory.

       Root Directory and Current Working Directory
               Each  process has associated with it a concept of a root direc‚Äê
               tory and a current working directory for the purpose of resolv‚Äê
               ing path name searches.  A process‚Äôs root directory need not be
               the root directory of the root file system.

       File Access Permissions
               Every file in the file system has a set of access  permissions.
               These permissions are used in determining whether a process may
               perform  a  requested  operation on the file (such as opening a
               file for writing).  Access permissions are established  at  the
               time a file is created.  They may be changed at some later time
               through the [4mchmod[24m(2) call.

               File  access is broken down according to whether a file may be:
               read, written, or executed.  Directory files  use  the  execute
               permission to control if the directory may be searched.

               File  access  permissions are interpreted by the system as they
               apply to three different classes of users:  the  owner  of  the
               file, those users in the file‚Äôs group, anyone else.  Every file
               has  an independent set of access permissions for each of these
               classes.  When an access check is made, the system  decides  if
               permission should be granted by checking the access information
               applicable to the caller.

               Read,  write,  and  execute/search  permissions  on  a file are
               granted to a process if:

               The process‚Äôs effective user ID  is  that  of  the  super‚Äêuser.
               (Note:  even  the  super‚Äêuser  cannot  execute a non‚Äêexecutable
               file.)

               The process‚Äôs effective user ID matches  the  user  ID  of  the
               owner of the file and the owner permissions allow the access.

               The  process‚Äôs  effective user ID does not match the user ID of
               the owner of the file, and either the process‚Äôs effective group
               ID matches the group ID of the file, or the  group  ID  of  the
               file  is in the process‚Äôs group access list, and the group per‚Äê
               missions allow the access.

               Neither the effective user ID nor effective group ID and  group
               access  list of the process match the corresponding user ID and
               group ID of the file, but the permissions for  ‚Äò‚Äòother  users‚Äô‚Äô
               allow access.

               Otherwise, permission is denied.

       Sockets and Address Families

               A  socket  is  an endpoint for communication between processes.
               Each socket has queues for sending and receiving data.

               Sockets are typed according to their communications properties.
               These properties include whether messages sent and received  at
               a socket require the name of the partner, whether communication
               is reliable, the format used in naming message recipients, etc.

               Each  instance of the system supports some collection of socket
               types; consult [4msocket[24m(2) for more information about  the  types
               available and their properties.

               Each  instance  of  the  system supports some number of sets of
               communications protocols.  Each protocol set supports addresses
               of a certain format.  An Address Family is the set of addresses
               for a specific group of protocols.  Each socket has an  address
               chosen from the address family in which the socket was created.

[1mSEE ALSO[0m
       intro(3), perror(3)

[1mHISTORY[0m
       An [1mintro [22mappeared in Version 6 AT&T UNIX.

4th Berkeley Distribution        July 23, 1991                        INTRO(2)
