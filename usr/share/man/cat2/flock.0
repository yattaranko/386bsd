FLOCK(2)                      System Calls Manual                     FLOCK(2)

[1mNAME[0m
       flock ‚Äî apply or remove an advisory lock on an open file

[1mSYNOPSIS[0m
       [1m#include <sys/file.h>[0m
       [1m#define   LOCK_SH   1    /* shared lock */[0m
       [1m#define   LOCK_EX   2    /* exclusive lock */[0m
       [1m#define   LOCK_NB   4    /* don‚Äôt block when locking */[0m
       [1m#define   LOCK_UN   8    /* unlock */[0m

       [4mint[0m
       [1mflock[22m([4mint[24m [4mfd[24m, [4mint[24m [4moperation[24m);

[1mDESCRIPTION[0m
       [1mFlock[22m() applies or removes an [4madvisory[24m lock on the file associated with
       the  file  descriptor [4mfd[24m.  A lock is applied by specifying an [4moperation[0m
       parameter that is the inclusive or of LOCK_SH or LOCK_EX and, possibly,
       LOCK_NB.  To unlock an existing lock operation should be LOCK_UN.

       Advisory locks allow cooperating processes to perform consistent opera‚Äê
       tions on files, but do not guarantee consistency (i.e.,  processes  may
       still  access  files without using advisory locks possibly resulting in
       inconsistencies).

       The locking mechanism allows two  types  of  locks:  [4mshared[24m  locks  and
       [4mexclusive[24m locks.  At any time multiple shared locks may be applied to a
       file,  but at no time are multiple exclusive, or both shared and exclu‚Äê
       sive, locks allowed simultaneously on a file.

       A shared lock may be [4mupgraded[24m to an exclusive  lock,  and  vice  versa,
       simply  by  specifying  the  appropriate lock type; this results in the
       previous lock being released and the new lock applied  (possibly  after
       other processes have gained and released the lock).

       Requesting  a  lock on an object that is already locked normally causes
       the caller to be blocked until the lock may be acquired.  If LOCK_NB is
       included in [4moperation[24m, then this will not happen; instead the call will
       fail and the error EWOULDBLOCK will be returned.

[1mNOTES[0m
       Locks are on files, not file descriptors.  That  is,  file  descriptors
       duplicated  through  [4mdup[24m(2)  or  [4mfork[24m(2)  do not result in multiple in‚Äê
       stances of a lock, but rather multiple references to a single lock.  If
       a process holding a lock on a file forks and the child  explicitly  un‚Äê
       locks the file, the parent will lose its lock.

       Processes blocked awaiting a lock may be awakened by signals.

[1mRETURN VALUES[0m
       Zero  is  returned if the operation was successful; on an error a ‚Äê1 is
       returned and an error code is left in the global location [4merrno[24m.

[1mERRORS[0m
       The [1mflock[22m() call fails if:

       [EWOULDBLOCK]  The file is locked and the LOCK_NB option was specified.

       [EBADF]        The argument [4mfd[24m is an invalid descriptor.

       [EINVAL]       The argument [4mfd[24m refers to an object other than a file.

[1mSEE ALSO[0m
       [4mopen[24m(2), [4mclose[24m(2), [4mdup[24m(2), [4mexecve[24m(2), [4mfork[24m(2)

[1mHISTORY[0m
       The [1mflock [22mfunction call appeared in 4.2BSD.

4.2 Berkeley Distribution       March 10, 1991                        FLOCK(2)
