RECV(2)                       System Calls Manual                      RECV(2)

[1mNAME[0m
       recv, recvfrom, recvmsg ‚Äî receive a message from a socket

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/socket.h>[0m

       [4mint[0m
       [1mrecv[22m([4mint[24m [4ms[24m, [4mvoid[24m [4m*buf[24m, [4mint[24m [4mlen[24m, [4mint[24m [4mflags[24m);

       [4mint[0m
       [1mrecvfrom[22m([4mint[24m  [4ms[24m,  [4mvoid[24m [4m*buf[24m, [4mint[24m [4mlen[24m, [4mint[24m [4mflags[24m, [4mstruct[24m [4msockaddr[24m [4m*from[24m,
           [4mint[24m [4m*fromlen[24m);

       [4mint[0m
       [1mrecvmsg[22m([4mint[24m [4ms[24m, [4mstruct[24m [4mmsghdr[24m [4m*msg[24m, [4mint[24m [4mflags[24m);

[1mDESCRIPTION[0m
       [1mRecvfrom[22m() and [1mrecvmsg[22m() are used to receive messages  from  a  socket,
       and  may  be used to receive data on a socket whether or not it is con‚Äê
       nection‚Äêoriented.

       If [4mfrom[24m is non‚Äênil, and the  socket  is  not  connection‚Äêoriented,  the
       source  address of the message is filled in.  [4mFromlen[24m is a value‚Äêresult
       parameter, initialized to the size of the buffer associated with  [4mfrom[24m,
       and  modified  on  return  to  indicate  the actual size of the address
       stored there.

       The [1mrecv[22m() call is normally  used  only  on  a  [4mconnected[24m  socket  (see
       [4mconnect[24m(2))  and  is identical to [1mrecvfrom[22m() with a nil [4mfrom[24m parameter.
       As it is redundant, it may not be supported in future releases.

       All three routines return the length of the message on successful  com‚Äê
       pletion.   If  a message is too long to fit in the supplied buffer, ex‚Äê
       cess bytes may be discarded depending on the type of socket the message
       is received from (see [4msocket[24m(2)).

       If no messages are available at the socket, the receive call waits  for
       a message to arrive, unless the socket is nonblocking (see [4mfcntl[24m(2)) in
       which case the value ‚Äê1 is returned and the external variable [4merrno[24m set
       to  EWOULDBLOCK.  The receive calls normally return any data available,
       up to the requested amount, rather than waiting for receipt of the full
       amount requested; this behavior is affected by the socket‚Äêlevel options
       SO_RCVLOWAT and SO_RCVTIMEO described in [4mgetsockopt[24m(2).

       The [4mselect[24m(2) call may be used to determine when more data arrive.

       The [4mflags[24m argument to a recv call is formed by [4mor[24m‚Äôing one  or  more  of
       the values:

             MSG_OOB        process out‚Äêof‚Äêband data
             MSG_PEEK       peek at incoming message
             MSG_WAITALL    wait for full request or error
       The MSG_OOB flag requests receipt of out‚Äêof‚Äêband data that would not be
       received  in  the  normal  data stream.  Some protocols place expedited
       data at the head of the normal data queue, and thus this flag cannot be
       used with such protocols.  The MSG_PEEK flag causes the receive  opera‚Äê
       tion to return data from the beginning of the receive queue without re‚Äê
       moving  that data from the queue.  Thus, a subsequent receive call will
       return the same data.  The MSG_WAITALL flag requests that the operation
       block until the full request is satisfied.  However, the call may still
       return less data than requested if a signal is caught, an error or dis‚Äê
       connect occurs, or the next data to be received is of a different  type
       than that returned.

       The  [1mrecvmsg[22m()  call  uses a [4mmsghdr[24m structure to minimize the number of
       directly supplied parameters.  This structure has the  following  form,
       as defined in ‚ü®[4msys/socket.h[24m‚ü©:

       struct msghdr {
               caddr_t msg_name;       /* optional address */
               u_int   msg_namelen;    /* size of address */
               struct  iovec *msg_iov; /* scatter/gather array */
               u_int   msg_iovlen;     /* # elements in msg_iov */
               caddr_t msg_control;    /* ancillary data, see below */
               u_int   msg_controllen; /* ancillary data buffer len */
               int     msg_flags;      /* flags on received message */
       };

       Here  [4mmsg_name[24m  and  [4mmsg_namelen[24m specify the destination address if the
       socket is unconnected; [4mmsg_name[24m may be given as a null  pointer  if  no
       names are desired or required.  [4mMsg_iov[24m and [4mmsg_iovlen[24m describe scatter
       gather  locations,  as  discussed  in  [4mread[24m(2).  [4mMsg_control[24m, which has
       length [4mmsg_controllen[24m, points to a buffer for  other  protocol  control
       related  messages  or other miscellaneous ancillary data.  The messages
       are of the form:

       struct cmsghdr {
               u_int   cmsg_len;       /* data byte count, including hdr */
               int     cmsg_level;     /* originating protocol */
               int     cmsg_type;      /* protocol‚Äêspecific type */
       /* followed by
               u_char  cmsg_data[]; */
       };
       As an example, one could use this to learn  of  changes  in  the  data‚Äê
       stream in XNS/SPP, or in ISO, to obtain user‚Äêconnection‚Äêrequest data by
       requesting  a recvmsg with no data buffer provided immediately after an
       [1maccept[22m() call.

       Open file descriptors are now passed as ancillary data for AF_UNIX  do‚Äê
       main  sockets,  with  [4mcmsg_level[24m set to SOL_SOCKET and [4mcmsg_type[24m set to
       SCM_RIGHTS.

       The [4mmsg_flags[24m field is set on return according to the message received.
       MSG_EOR indicates end‚Äêof‚Äêrecord; the data returned completed  a  record
       (generally  used with sockets of type SOCK_SEQPACKET).  MSG_TRUNC indi‚Äê
       cates that the trailing portion of a datagram was discarded because the
       datagram was larger than the  buffer  supplied.   MSG_CTRUNC  indicates
       that  some  control  data  were  discarded  due to lack of space in the
       buffer for ancillary data.  MSG_OOB is returned to indicate that  expe‚Äê
       dited or out‚Äêof‚Äêband data were received.

[1mRETURN VALUES[0m
       These  calls return the number of bytes received, or ‚Äê1 if an error oc‚Äê
       curred.

[1mERRORS[0m
       The calls fail if:

       [EBADF]        The argument [4ms[24m is an invalid descriptor.

       [ENOTCONN]     The socket is assoicated with a connection‚Äêoriented pro‚Äê
                      tocol and has not been  connected  (see  [4mconnect[24m(2)  and
                      [4maccept[24m(2) ).

       [ENOTSOCK]     The argument [4ms[24m does not refer to a socket.

       [EWOULDBLOCK]  The socket is marked non‚Äêblocking, and the receive oper‚Äê
                      ation  would  block,  or a receive timeout had been set,
                      and the timeout expired before data were received.

       [EINTR]        The receive was interrupted by delivery of a signal  be‚Äê
                      fore any data were available.

       [EFAULT]       The   receive   buffer   pointer(s)  point  outside  the
                      process‚Äôs address space.

[1mSEE ALSO[0m
       [4mfcntl[24m(2), [4mread[24m(2), [4mselect[24m(2), [4mgetsockopt[24m(2), [4msocket[24m(2)

[1mHISTORY[0m
       The [1mrecv [22mfunction call appeared in 4.2BSD.

4.3‚ÄêReno Berkeley Distribution    May 1, 1991                          RECV(2)
