SIGACTION(2)                  System Calls Manual                 SIGACTION(2)

[1mNAME[0m
       sigaction ‚Äî software signal facilities

[1mSYNOPSIS[0m
       [1m#include <signal.h>[0m

       struct sigaction {
               void     (*sa_handler)();
               sigset_t sa_mask;
               int      sa_flags;
       };

       [1msigaction[22m([4mint[24m [4msig[24m, [4mstruct[24m [4msigaction[24m [4m*act[24m, [4mstruct[24m [4msigaction[24m [4m*oact[24m);

[1mDESCRIPTION[0m
       The system defines a set of signals that may be delivered to a process.
       Signal  delivery  resembles  the occurence of a hardware interrupt: the
       signal is blocked from further occurrence, the current process  context
       is  saved,  and a new one is built.  A process may specify a [4mhandler[24m to
       which a signal is delivered, or specify that a signal is to be [4mignored[24m.
       A process may also specify that a default action is to be taken by  the
       system  when  a  signal occurs.  A signal may also be [4mblocked[24m, in which
       case its delivery is postponed until it is [4munblocked[24m.  The action to be
       taken on delivery is determined at the  time  of  delivery.   Normally,
       signal  handlers execute on the current stack of the process.  This may
       be changed, on a per‚Äêhandler basis, so that signals are taken on a spe‚Äê
       cial [4msignal[24m [4mstack[24m.

       Signal routines execute with the signal that  caused  their  invocation
       [4mblocked[24m, but other signals may yet occur.  A global [4msignal[24m [4mmask[24m defines
       the  set  of signals currently blocked from delivery to a process.  The
       signal mask for a process is initialized from that of its parent  (nor‚Äê
       mally  empty).  It may be changed with a [4msigprocmask[24m(2) call, or when a
       signal is delivered to the process.

       When a signal condition arises for a process, the signal is added to  a
       set of signals pending for the process.  If the signal is not currently
       [4mblocked[24m  by  the  process then it is delivered to the process.  Signals
       may be delivered any time a process enters the operating system  (e.g.,
       during a system call, page fault or trap, or clock interrupt).  If mul‚Äê
       tiple  signals  are ready to be delivered at the same time, any signals
       that could be caused by traps are delivered first.  Additional  signals
       may be processed at the same time, with each appearing to interrupt the
       handlers for the previous signals before their first instructions.  The
       set of pending signals is returned by the [4msigpending[24m(2) function.  When
       a  caught  signal  is  delivered,  the  current state of the process is
       saved, a new signal mask is calculated (as described  below),  and  the
       signal handler is invoked.  The call to the handler is arranged so that
       if the signal handling routine returns normally the process will resume
       execution  in  the  context  from before the signal‚Äôs delivery.  If the
       process wishes to resume in a different context, then it  must  arrange
       to restore the previous context itself.

       When  a signal is delivered to a process a new signal mask is installed
       for the duration of the process‚Äô signal handler (or until a [4msigprocmask[0m
       call is made).  This mask is formed by taking the union of the  current
       signal  mask set, the signal to be delivered, and the signal mask asso‚Äê
       ciated with the handler to be invoked.

       [1mSigaction[22m() assigns an action for a specific signal.  If  [4mact[24m  is  non‚Äê
       zero,  it  specifies an action (SIG_DFL, SIG_IGN, or a handler routine)
       and mask to be used when delivering the specified signal.  If  [4moact[24m  is
       non‚Äêzero,  the previous handling information for the signal is returned
       to the user.

       Once a signal handler is installed, it remains installed until  another
       [1msigaction[22m()  call is made, or an [4mexecve[24m(2) is performed.  A signal‚Äêspe‚Äê
       cific default action may be reset by  setting  [4msa_handler[24m  to  SIG_DFL.
       The  defaults  are process termination, possibly with core dump; no ac‚Äê
       tion; stopping the process; or continuing the process.  See the  signal
       list  below for each signal‚Äôs default action.  If [4msa_handler[24m is SIG_IGN
       current and pending instances of the signal are ignored and discarded.

       Options may be specified by setting [4msa_flags[24m.  If the SA_NOCLDSTOP  bit
       is  set when installing a catching function for the SIGCHLD signal, the
       SIGCHLD signal will be generated only when a child process  exits,  not
       when  a  child process stops.  Further, if the SA_ONSTACK bit is set in
       [4msa_flags[24m, the system will deliver the signal to the process on a [4msignal[0m
       [4mstack[24m, specified with [4msigstack[24m(2).

       If a signal is caught during the system calls listed  below,  the  call
       may  be  forced  to  terminate with the error EINTR, or the call may be
       restarted.  Restart of  pending  calls  is  requested  by  setting  the
       SA_RESTART bit in [4msa_flags[24m.  The affected system calls include [4mread[24m(2),
       [4mwrite[24m(2), [4msendto[24m(2), [4mrecvfrom[24m(2), [4msendmsg[24m(2) and [4mrecvmsg[24m(2) on a commu‚Äê
       nications channel or a slow device (such as a terminal, but not a regu‚Äê
       lar  file)  and during a [4mwait[24m(2) or [4mioctl[24m(2).  However, calls that have
       already committed are not restarted, but instead return a partial  suc‚Äê
       cess (for example, a short read count).

       After  a  [4mfork[24m(2)  or [4mvfork[24m(2) all signals, the signal mask, the signal
       stack, and the restart/interrupt flags are inherited by the child.

       [4mExecve[24m(2) reinstates the default action  for  all  signals  which  were
       caught  and resets all signals to be caught on the user stack.  Ignored
       signals remain ignored; the signal mask remains the same; signals  that
       restart pending system calls continue to do so.

       The  following  is  a  list of all signals with names as in the include
       file ‚ü®[4msignal.h[24m‚ü©:

         [1mNAME            Default Action                      Description[0m
       SIGHUP          terminate process       terminal line hangup
       SIGINT          terminate process       interrupt program
       SIGQUIT         create core image       quit program
       SIGILL          create core image       illegal instruction
       SIGTRAP         create core image       trace trap
       SIGABRT         create core image       [4mabort[24m(2) call (formerly SIGIOT)
       SIGEMT          create core image       emulate instruction executed
       SIGFPE          create core image       floating‚Äêpoint exception
       SIGKILL         terminate process       kill program
       SIGBUS          create core image       bus error
       SIGSEGV         create core image       segmentation violation
       SIGSYS          create  core  image        system  call  given  invalid
                                               argument
       SIGPIPE         terminate process       write on a pipe with no reader
       SIGALRM         terminate process       real‚Äêtime timer expired
       SIGTERM         terminate process       software termination signal
       SIGURG           discard  signal           urgent  condition present on
                                               socket
       SIGSTOP         stop  process             stop  (cannot  be  caught  or
                                               ignored)
       SIGTSTP          stop  process             stop  signal  generated from
                                               keyboard
       SIGCONT         discard signal          continue after stop
       SIGCHLD         discard signal          child status has changed
       SIGTTIN         stop process            background read attempted  from
                                               control terminal
       SIGTTOU          stop  process            background write attempted to
                                               control terminal
       SIGIO           discard signal          I/O is possible on a descriptor
                                               (see [4mfcntl[24m(2))
       SIGXCPU         terminate process       cpu time  limit  exceeded  (see
                                               [4msetrlimit[24m(2))
       SIGXFSZ          terminate  process       file size limit exceeded (see
                                               [4msetrlimit[24m(2))
       SIGVTALRM        terminate  process        virtual  time   alarm   (see
                                               [4msetitimer[24m(2))
       SIGPROF          terminate  process        profiling  timer  alarm (see
                                               [4msetitimer[24m(2))
       SIGWINCH        discard signal          Window size change
       SIGINFO         discard signal          status request from keyboard
       SIGUSR1         terminate process       User defined signal 1
       SIGUSR2         terminate process       User defined signal 2

[1mNOTE[0m
       The mask specified in [4mact[24m is not allowed to block  SIGKILL  or  SIGSTOP
       This is done silently by the system.

[1mRETURN VALUES[0m
       A  0  value indicated that the call succeeded.  A -1 return value indi‚Äê
       cates an error occurred and [4merrno[24m is set to indicated the reason.

[1mERROR[0m
       [1mSigaction[22m() will fail and no new signal handler will  be  installed  if
       one  of  the following occurs: Either [4mact[24m or [4moact[24m points to memory that
       is not a valid part of the process address space.  [4mSig[24m is not  a  valid
       signal  number.   An  attempt is made to ignore or supply a handler for
       [4mSIGKIL[24m or SIGSTOP

[1mSTANDARD[0m
       The [1msigaction [22mfunction is defined by IEEE Std 1003.1‚Äê1988  (‚ÄúPOSIX.1‚Äù).
       The SA_ONSTACK and SA_RESTART flags are Berkeley extensions, as are the
       signals,  SIGTRAP,  SIGEMT,  SIGBUS,  SIGSYS,  SIGURG,  SIGIO, SIGXCPU,
       SIGXFSZ, SIGVTALRM, SIGPROF, SIGWINCH, and SIGINFO.  Most of those sig‚Äê
       nals are available on most BSD-derived systems.

[1mSEE ALSO[0m
       [4mkill[24m(1), [4mptrace[24m(2), [4mkill[24m(2), [4msigaction[24m(2), [4msigprocmask[24m(2), [4msigsetops[24m [4m2[24m,
       [4msigsuspend[24m(2), [4msigblock[24m(2),  [4msigsetmask[24m(2),  [4msigpause[24m(2),  [4msigstack[24m(2),
       [4msigvec[24m(2), [4msetjmp[24m(3), [4msiginterrupt[24m [4m3[24m, [4mtty[24m(4)

[1mEXAMPLE[0m
       On a VAX-11, the handler routine can be declared:

             void handler(sig, code, scp)
             int sig, code;
             struct sigcontext *scp;

       Here [4msig[24m is the signal number, into which the hardware faults and traps
       are mapped as defined below.  [4mCode[24m is a parameter that is either a con‚Äê
       stant  as given below or the code provided by the hardware (Compatibil‚Äê
       ity mode faults are distinguished from the other SIGILL traps by having
       PSL_CM set in the psl).  [4mScp[24m is a pointer to the  [4msigcontext[24m  structure
       (defined  in  ‚ü®[4msignal.h[24m‚ü©),  used to restore the context from before the
       signal.

FreeBSD 13.2                     July 23, 1991                    SIGACTION(2)
