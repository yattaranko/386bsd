GETITIMER(2)                  System Calls Manual                 GETITIMER(2)

[1mNAME[0m
       getitimer, setitimer — get/set value of interval timer

[1mSYNOPSIS[0m
       [1m#include <sys/time.h>[0m
       [1m#define ITIMER_REAL      0[0m
       [1m#define ITIMER_VIRTUAL   1[0m
       [1m#define ITIMER_PROF      2[0m

       [4mint[0m
       [1mgetitimer[22m([4mint[24m [4mwhich[24m, [4mstruct[24m [4mitimerval[24m [4m*value[24m);

       [4mint[0m
       [1msetitimer[22m([4mint[24m        [4mwhich[24m,        [4mstruct[24m       [4mitimerval[24m       [4m*value[24m,
           [4mstruct[24m [4mitimerval[24m [4m*ovalue[24m);

[1mDESCRIPTION[0m
       The system provides each process with three interval timers, defined in
       ⟨[4msys/time.h[24m⟩.  The [1mgetitimer[22m() call returns the current value  for  the
       timer  specified  in  [4mwhich[24m in the structure at [4mvalue[24m.  The [1msetitimer[22m()
       call sets a timer to the specified [4mvalue[24m (returning the previous  value
       of the timer if [4movalue[24m is non‐nil).

       A timer value is defined by the [4mitimerval[24m structure:

             struct itimerval {
                     struct  timeval it_interval;    /* timer interval */
                     struct  timeval it_value;       /* current value */
             };

       If  [4mit_value[24m is non‐zero, it indicates the time to the next timer expi‐
       ration.  If [4mit_interval[24m is non‐zero, it specifies a value to be used in
       reloading [4mit_value[24m when the timer expires.  Setting [4mit_value[24m to 0  dis‐
       ables  a timer.  Setting [4mit_interval[24m to 0 causes a timer to be disabled
       after its next expiration (assuming [4mit_value[24m is non‐zero).

       Time values smaller than the resolution of the system clock are rounded
       up to this resolution (typically 10 milliseconds).

       The ITIMER_REAL timer decrements in real time.  A SIGALRM signal is de‐
       livered when this timer expires.

       The ITIMER_VIRTUAL timer decrements in process virtual time.   It  runs
       only  when  the  process is executing.  A SIGVTALRM signal is delivered
       when it expires.

       The ITIMER_PROF timer decrements both in process virtual time and  when
       the  system  is running on behalf of the process.  It is designed to be
       used by interpreters in statistically profiling the execution of inter‐
       preted programs.  Each time the ITIMER_PROF timer expires, the  SIGPROF
       signal  is  delivered.   Because  this signal may interrupt in‐progress
       system calls, programs using this timer must be prepared to restart in‐
       terrupted system calls.

[1mNOTES[0m
       Three macros for manipulating time values are defined in  ⟨[4msys/time.h[24m⟩.
       [4mTimerclear[24m  sets a time value to zero, [4mtimerisset[24m tests if a time value
       is non‐zero, and [4mtimercmp[24m compares two time values (beware that >=  and
       <= do not work with this macro).

[1mRETURN VALUES[0m
       If  the  calls  succeed, a value of 0 is returned.  If an error occurs,
       the value ‐1 is returned, and a more precise error code  is  placed  in
       the global variable [4merrno[24m.

[1mERRORS[0m
       [1mGetitimer[22m() and [1msetitimer[22m() will fail if:

       [EFAULT]           The [4mvalue[24m parameter specified a bad address.

       [EINVAL]           A  [4mvalue[24m parameter specified a time was too large to
                          be handled.

[1mSEE ALSO[0m
       [4mselect[24m(2), [4msigvec[24m(2), [4mgettimeofday[24m(2)

[1mHISTORY[0m
       The [1mgetitimer [22mfunction call appeared in 4.2BSD.

4.2 Berkeley Distribution       March 10, 1991                    GETITIMER(2)
