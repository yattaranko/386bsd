WAIT(2)                       System Calls Manual                      WAIT(2)

[1mNAME[0m
       wait, waitpid, wait4, wait3 ‚Äî wait for process terminatation

[1mSYNOPSIS[0m
       [1m#include <sys/types.h>[0m
       [1m#include <sys/wait.h>[0m

       [4mpid_t[0m
       [1mwait[22m([4mint[24m [4m*status[24m);

       [1m#include <sys/time.h>[0m
       [1m#include <sys/resource.h>[0m

       [4mpid_t[0m
       [1mwaitpid[22m([4mpid_t[24m [4mwpid[24m, [4mint[24m [4m*status[24m, [4mint[24m [4moptions[24m);

       [4mpid_t[0m
       [1mwait3[22m([4mint[24m [4m*status[24m, [4mint[24m [4moptions[24m, [4mstruct[24m [4mrusage[24m [4m*rusage[24m);

       [4mpid_t[0m
       [1mwait4[22m([4mpid_t[24m [4mwpid[24m, [4mint[24m [4m*status[24m, [4mint[24m [4moptions[24m, [4mstruct[24m [4mrusage[24m [4m*rusage[24m);

[1mDESCRIPTION[0m
       The  [1mwait[22m()  function  suspends  execution of its calling process until
       [4mstatus[24m information is available for a terminated child  process,  or  a
       signal  is  received.   On  return  from  a successful [1mwait[22m() call, the
       [4mstatus[24m area contains termination information about the process that ex‚Äê
       ited as defined below.

       The [1mwait4[22m() call provides a more general interface  for  programs  that
       need  to  wait for certain child processes, that need resource utiliza‚Äê
       tion statistics accummulated by child processes, or  that  require  op‚Äê
       tions.  The other wait functions are implemented using [1mwait4[22m().

       The  [4mwpid[24m  parameter  specifies the set of child processes for which to
       wait.  If [4mwpid[24m is ‚Äê1, the call waits for any child process.  If [4mwpid[24m is
       0, the call waits for any child process in the  process  group  of  the
       caller.   If  [4mwpid[24m is greater than zero, the call waits for the process
       with process id [4mwpid[24m.  If [4mwpid[24m is less than ‚Äê1, the call waits for  any
       process whose process group id equals the absolute value of [4mwpid[24m.

       The  [4mstatus[24m parameter is defined below.  The [4moptions[24m parameter contains
       the bitwise OR of any of the following options.  The WNOHANG option  is
       used  to  indicate  that  the  call  should  not  block if there are no
       processes that wish to report status.  If the WUNTRACED option is  set,
       children  of  the  current  process  that are stopped due to a SIGTTIN,
       SIGTTOU, SIGTSTP, or SIGSTOP signal also have their status reported.

       If [4mrusage[24m is non‚Äêzero, a summary of the resources used  by  the  termi‚Äê
       nated process and all its children is returned

       When  the  WNOHANG  option is specified and no processes wish to report
       status, [1mwait4[22m() returns a process id of 0.

       The [1mwaitpid[22m() call is identical to [1mwait4[22m()  with  an  [4mrusage[24m  value  of
       zero.   The older [1mwait3[22m() call is the same as [1mwait4[22m() with a [4mwpid[24m value
       of ‚Äê1.

       The following macros may be used to test the  manner  of  exit  of  the
       process.   One  of  the  first three macros will evaluate to a non‚Äêzero
       (true) value:

       [1mWIFEXITED[22m([4mstatus[24m)
               True if the process terminated normally by a call  to  [4m_exit[24m(2)
               or [4mexit[24m(2).

       [1mWIFSIGNALED[22m([4mstatus[24m)
               True if the process terminated due to receipt of a signal.

       [1mWIFSTOPPED[22m([4mstatus[24m)
               True if the process has not terminated, but has stopped and can
               be  restarted.   This  macro  can be true only if the wait call
               specified the WUNTRACED option or if the child process is being
               traced (see [4mptrace[24m(2)).

       Depending on the values of those macros, the following  macros  produce
       the remaining status information about the child process:

       [1mWEXITSTATUS[22m([4mstatus[24m)
               If [1mWIFEXITED[22m([4mstatus[24m) is true, evaluates to the low‚Äêorder 8 bits
               of the argument passed to [4m_exit[24m(2) or [4mexit[24m(2) by the child.

       [1mWTERMSIG[22m([4mstatus[24m)
               If  [1mWIFSIGNALED[22m([4mstatus[24m) is true, evaluates to the number of the
               signal that caused the termination of the process.

       [1mWCOREDUMP[22m([4mstatus[24m)
               If [1mWIFSIGNALED[22m([4mstatus[24m) is true, evaluates as true if the termi‚Äê
               nation of the process was accompanied by the creation of a core
               file containing an image of the process when the signal was re‚Äê
               ceived.

       [1mWSTOPSIG[22m([4mstatus[24m)
               If [1mWIFSTOPPED[22m([4mstatus[24m) is true, evaluates to the number  of  the
               signal that caused the process to stop.

[1mNOTES[0m
       See  [4msigaction[24m(2) for a list of termination signals.  A status of 0 in‚Äê
       dicates normal termination.

       If a parent process terminates without waiting for  all  of  its  child
       processes  to terminate, the remaining child processes are assigned the
       parent process 1 ID (the init process ID).

       If a signal is caught while any of the [1mwait[22m()  calls  is  pending,  the
       call  may  be interrupted or restarted when the signal‚Äêcatching routine
       returns, depending on  the  options  in  effect  for  the  signal;  see
       [4mintro[24m(2), System call restart.

[1mRETURN VALUES[0m
       If  [1mwait[22m()  returns  due  to a stopped or terminated child process, the
       process ID of the child is returned to the calling process.  Otherwise,
       a value of ‚Äê1 is returned and [4merrno[24m is set to indicate the error.

       If [1mwait4[22m(), [1mwait3[22m() or [1mwaitpid[22m() returns due to a stopped or terminated
       child process, the process ID of the child is returned to  the  calling
       process.   If  there  are no children not previously awaited, ‚Äê1 is re‚Äê
       turned with [4merrno[24m set to [ECHILD].  Otherwise, if WNOHANG is  specified
       and  there are no stopped or exited children, 0 is returned.  If an er‚Äê
       ror is detected or a caught signal aborts the call, a value  of  ‚Äê1  is
       returned and [4merrno[24m is set to indicate the error.

[1mERRORS[0m
       [1mWait[22m() will fail and return immediately if:

       [ECHILD]           The  calling  process  has  no existing unwaited‚Äêfor
                          child processes.

       [EFAULT]           The [4mstatus[24m or [4mrusage[24m arguments point to  an  illegal
                          address.   (May  not  be  detected  before exit of a
                          child process.)

       [EINTR]            The call was interrupted by a caught signal, or  the
                          signal did not have the SA_RESTART flag set.

[1mSTANDARDS[0m
       The  [1mwait[22m()  and  [1mwaitpid[22m() functions are defined by POSIX; [1mwait4[22m() and
       [1mwait3[22m() are not specified by POSIX.   The  [1mWCOREDUMP[22m()  macro  and  the
       ability  to  restart  a pending [1mwait[22m() call are extensions to the POSIX
       interface.

[1mSEE ALSO[0m
       [4mexit[24m(2), [4msigaction[24m(2)

[1mHISTORY[0m
       A [1mwait [22mfunction call appeared in Version 6 AT&T UNIX.

4th Berkeley Distribution       March 10, 1991                         WAIT(2)
