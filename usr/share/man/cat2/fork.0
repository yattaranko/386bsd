FORK(2)                       System Calls Manual                      FORK(2)

[1mNAME[0m
       fork ‚Äî create a new process

[1mSYNOPSIS[0m
       [1m#include <unistd.h>[0m

       [4mpid_t[0m
       [1mfork[22m([4mvoid[24m);

[1mDESCRIPTION[0m
       [1mFork[22m()  causes  creation  of  a  new  process.   The new process (child
       process) is an exact copy of the calling process (parent  process)  ex‚Äê
       cept for the following:

             [1m‚Ä¢   [22mThe child process has a unique process ID.

             [1m‚Ä¢   [22mThe  child  process  has a different parent process ID (i.e.,
                 the process ID of the parent process).

             [1m‚Ä¢   [22mThe child process has its own copy of the  parent‚Äôs  descrip‚Äê
                 tors.   These  descriptors  reference the same underlying ob‚Äê
                 jects, so that, for instance, file pointers in  file  objects
                 are  shared  between  the  child  and  the parent, so that an
                 [4mlseek[24m(2) on a descriptor in the child process  can  affect  a
                 subsequent  [4mread[24m  or  [4mwrite[24m  by  the parent.  This descriptor
                 copying is also used by the shell to establish standard input
                 and output for newly created processes as well as to  set  up
                 pipes.

             [1m‚Ä¢   [22mThe  child  processes resource utilizations are set to 0; see
                 [4msetrlimit[24m(2).

[1mRETURN VALUES[0m
       Upon successful completion, [1mfork[22m() returns a value of 0  to  the  child
       process  and  returns the process ID of the child process to the parent
       process.  Otherwise, a value of ‚Äê1 is returned to the  parent  process,
       no  child  process  is created, and the global variable [4merrno[24m is set to
       indicate the error.

[1mERRORS[0m
       [1mFork[22m() will fail and no child process will be created if:

       [EAGAIN]  The system‚Äêimposed limit on the total number of processes un‚Äê
                 der execution would be exceeded.  This  limit  is  configura‚Äê
                 tion‚Äêdependent.

       [EAGAIN]  The system‚Äêimposed limit MAXUPRC (‚ü®[4msys/param.h[24m‚ü©) on the total
                 number of processes under execution by a single user would be
                 exceeded.

       [ENOMEM]  There is insufficient swap space for the new process.

[1mSEE ALSO[0m
       [4mexecve[24m(2), [4mwait[24m(2)

[1mHISTORY[0m
       A [1mfork [22mfunction call appeared in Version 6 AT&T UNIX.

                                March 10, 1991                         FORK(2)
